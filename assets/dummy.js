"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('dummy/acceptance-tests/sinon', ['exports', 'ember-sinon/acceptance-tests/sinon'], function (exports, sinon) {

	'use strict';



	exports['default'] = sinon['default'];

});
define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

    'use strict';

    Ember['default'].MODEL_FACTORY_INJECTIONS = true;

    var App = Ember['default'].Application.extend({
        modulePrefix: config['default'].modulePrefix,
        podModulePrefix: config['default'].podModulePrefix,
        Resolver: Resolver['default']
    });

    loadInitializers['default'](App, config['default'].modulePrefix);

    exports['default'] = App;

});
define('dummy/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'dummy/config/environment'], function (exports, AppVersionComponent, config) {

  'use strict';

  var _config$APP = config['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;

  exports['default'] = AppVersionComponent['default'].extend({
    version: version,
    name: name
  });

});
define('dummy/components/demos/sl-grid-detail', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend();

});
define('dummy/components/demos/tabs/tab-one', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        inputText: 'One input text',

        text: 'Here is some dynamic content from the \'demos/tabs/tab-one\' component.'
    });

});
define('dummy/components/property-text', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Component.extend({
        classNameBindings: ['required:list-group-item-warning'],

        classNames: ['list-group-item'],

        required: false
    });

});
define('dummy/components/sl-alert', ['exports', 'sl-ember-components/components/sl-alert'], function (exports, sl_alert) {

	'use strict';



	exports['default'] = sl_alert['default'];

});
define('dummy/components/sl-button', ['exports', 'sl-ember-components/components/sl-button'], function (exports, sl_button) {

	'use strict';



	exports['default'] = sl_button['default'];

});
define('dummy/components/sl-calendar-day', ['exports', 'sl-ember-components/components/sl-calendar-day'], function (exports, sl_calendar_day) {

	'use strict';



	exports['default'] = sl_calendar_day['default'];

});
define('dummy/components/sl-calendar-month', ['exports', 'sl-ember-components/components/sl-calendar-month'], function (exports, sl_calendar_month) {

	'use strict';



	exports['default'] = sl_calendar_month['default'];

});
define('dummy/components/sl-calendar-year', ['exports', 'sl-ember-components/components/sl-calendar-year'], function (exports, sl_calendar_year) {

	'use strict';



	exports['default'] = sl_calendar_year['default'];

});
define('dummy/components/sl-calendar', ['exports', 'sl-ember-components/components/sl-calendar'], function (exports, sl_calendar) {

	'use strict';



	exports['default'] = sl_calendar['default'];

});
define('dummy/components/sl-chart', ['exports', 'sl-ember-components/components/sl-chart'], function (exports, sl_chart) {

	'use strict';



	exports['default'] = sl_chart['default'];

});
define('dummy/components/sl-checkbox', ['exports', 'sl-ember-components/components/sl-checkbox'], function (exports, sl_checkbox) {

	'use strict';



	exports['default'] = sl_checkbox['default'];

});
define('dummy/components/sl-date-picker', ['exports', 'sl-ember-components/components/sl-date-picker'], function (exports, sl_date_picker) {

	'use strict';



	exports['default'] = sl_date_picker['default'];

});
define('dummy/components/sl-date-range-picker', ['exports', 'sl-ember-components/components/sl-date-range-picker'], function (exports, sl_date_range_picker) {

	'use strict';



	exports['default'] = sl_date_range_picker['default'];

});
define('dummy/components/sl-date-time', ['exports', 'sl-ember-components/components/sl-date-time'], function (exports, sl_date_time) {

	'use strict';



	exports['default'] = sl_date_time['default'];

});
define('dummy/components/sl-drop-button', ['exports', 'sl-ember-components/components/sl-drop-button'], function (exports, sl_drop_button) {

	'use strict';



	exports['default'] = sl_drop_button['default'];

});
define('dummy/components/sl-drop-option-divider', ['exports', 'sl-ember-components/components/sl-drop-option-divider'], function (exports, sl_drop_option_divider) {

	'use strict';



	exports['default'] = sl_drop_option_divider['default'];

});
define('dummy/components/sl-drop-option', ['exports', 'sl-ember-components/components/sl-drop-option'], function (exports, sl_drop_option) {

	'use strict';



	exports['default'] = sl_drop_option['default'];

});
define('dummy/components/sl-grid-cell', ['exports', 'sl-ember-components/components/sl-grid-cell'], function (exports, sl_grid_cell) {

	'use strict';



	exports['default'] = sl_grid_cell['default'];

});
define('dummy/components/sl-grid-column-header', ['exports', 'sl-ember-components/components/sl-grid-column-header'], function (exports, sl_grid_column_header) {

	'use strict';



	exports['default'] = sl_grid_column_header['default'];

});
define('dummy/components/sl-grid-row', ['exports', 'sl-ember-components/components/sl-grid-row'], function (exports, sl_grid_row) {

	'use strict';



	exports['default'] = sl_grid_row['default'];

});
define('dummy/components/sl-grid', ['exports', 'sl-ember-components/components/sl-grid'], function (exports, sl_grid) {

	'use strict';



	exports['default'] = sl_grid['default'];

});
define('dummy/components/sl-input', ['exports', 'sl-ember-components/components/sl-input'], function (exports, sl_input) {

	'use strict';



	exports['default'] = sl_input['default'];

});
define('dummy/components/sl-menu-item-show-all', ['exports', 'sl-ember-components/components/sl-menu-item-show-all'], function (exports, sl_menu_item_show_all) {

	'use strict';



	exports['default'] = sl_menu_item_show_all['default'];

});
define('dummy/components/sl-menu-item', ['exports', 'sl-ember-components/components/sl-menu-item'], function (exports, sl_menu_item) {

	'use strict';



	exports['default'] = sl_menu_item['default'];

});
define('dummy/components/sl-menu', ['exports', 'sl-ember-components/components/sl-menu'], function (exports, sl_menu) {

	'use strict';



	exports['default'] = sl_menu['default'];

});
define('dummy/components/sl-modal-body', ['exports', 'sl-ember-components/components/sl-modal-body'], function (exports, sl_modal_body) {

	'use strict';



	exports['default'] = sl_modal_body['default'];

});
define('dummy/components/sl-modal-footer', ['exports', 'sl-ember-components/components/sl-modal-footer'], function (exports, sl_modal_footer) {

	'use strict';



	exports['default'] = sl_modal_footer['default'];

});
define('dummy/components/sl-modal-header', ['exports', 'sl-ember-components/components/sl-modal-header'], function (exports, sl_modal_header) {

	'use strict';



	exports['default'] = sl_modal_header['default'];

});
define('dummy/components/sl-modal', ['exports', 'sl-ember-components/components/sl-modal'], function (exports, SLModal) {

	'use strict';

	exports['default'] = SLModal['default'];

});
define('dummy/components/sl-pagination', ['exports', 'sl-ember-components/components/sl-pagination'], function (exports, sl_pagination) {

	'use strict';



	exports['default'] = sl_pagination['default'];

});
define('dummy/components/sl-panel', ['exports', 'sl-ember-components/components/sl-panel'], function (exports, sl_panel) {

	'use strict';



	exports['default'] = sl_panel['default'];

});
define('dummy/components/sl-progress-bar', ['exports', 'sl-ember-components/components/sl-progress-bar'], function (exports, sl_progress_bar) {

	'use strict';



	exports['default'] = sl_progress_bar['default'];

});
define('dummy/components/sl-radio-group', ['exports', 'sl-ember-components/components/sl-radio-group'], function (exports, sl_radio_group) {

	'use strict';



	exports['default'] = sl_radio_group['default'];

});
define('dummy/components/sl-radio', ['exports', 'sl-ember-components/components/sl-radio'], function (exports, sl_radio) {

	'use strict';



	exports['default'] = sl_radio['default'];

});
define('dummy/components/sl-select', ['exports', 'sl-ember-components/components/sl-select'], function (exports, sl_select) {

	'use strict';



	exports['default'] = sl_select['default'];

});
define('dummy/components/sl-span', ['exports', 'sl-ember-components/components/sl-span'], function (exports, sl_span) {

	'use strict';



	exports['default'] = sl_span['default'];

});
define('dummy/components/sl-tab-pane', ['exports', 'sl-ember-components/components/sl-tab-pane'], function (exports, sl_tab_pane) {

	'use strict';



	exports['default'] = sl_tab_pane['default'];

});
define('dummy/components/sl-tab-panel', ['exports', 'sl-ember-components/components/sl-tab-panel'], function (exports, sl_tab_panel) {

	'use strict';



	exports['default'] = sl_tab_panel['default'];

});
define('dummy/components/sl-textarea', ['exports', 'sl-ember-components/components/sl-textarea'], function (exports, sl_textarea) {

	'use strict';



	exports['default'] = sl_textarea['default'];

});
define('dummy/components/sl-tooltip', ['exports', 'sl-ember-components/components/sl-tooltip'], function (exports, sl_tooltip) {

	'use strict';



	exports['default'] = sl_tooltip['default'];

});
define('dummy/controllers/array', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('dummy/controllers/browsers', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        components: Ember['default'].A([{
            name: 'sl-alert',
            lib: { 'twb': true }
        }, {
            name: 'sl-button',
            lib: { 'twb': true }
        }, {
            name: 'sl-calendar',
            lib: { 'sec': true }
        }, {
            name: 'sl-chart',
            lib: { 'hc': true }
        }, {
            name: 'sl-checkbox',
            lib: { 'twb': true }
        }, {
            name: 'sl-date-picker',
            lib: { 'bd': true }
        }, {
            name: 'sl-date-range-picker',
            lib: { 'bd': true }
        }, {
            name: 'sl-date-time',
            lib: { 'sec': true }
        }, {
            name: 'sl-drop-button',
            lib: { 'twb': true }
        }, {
            name: 'sl-drop-option',
            lib: { 'twb': true }
        }, {
            name: 'sl-grid',
            lib: { 'sec': true }
        }, {
            name: 'sl-input',
            lib: { 'twb': true, 'ta': true }
        }, {
            name: 'sl-menu',
            lib: { 'sec': true }
        }, {
            name: 'sl-modal',
            lib: { 'twb': true }
        }, {
            name: 'sl-pagination',
            lib: { 'sec': true }
        }, {
            name: 'sl-panel',
            lib: { 'twb': true }
        }, {
            name: 'sl-progress-bar',
            lib: { 'twb': true }
        }, {
            name: 'sl-radio',
            lib: { 'sec': true }
        }, {
            name: 'sl-radio-group',
            lib: { 'twb': true }
        }, {
            name: 'sl-select',
            lib: { 's2': true }
        }, {
            name: 'sl-span',
            lib: { 'sec': true }
        }, {
            name: 'sl-tab-pane',
            lib: { 'twb': true }
        }, {
            name: 'sl-tab-panel',
            lib: { 'twb': true }
        }, {
            name: 'sl-textarea',
            lib: { 'sec': true }
        }, {
            name: 'sl-tooltip',
            lib: { 'twb': true }
        }])
    });

});
define('dummy/controllers/demos/sl-calendar', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        actions: {
            logLabel: function logLabel(dateObjects) {
                window.console.log(dateObjects);
            }
        }
    });

});
define('dummy/controllers/demos/sl-chart', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        actions: {
            logOptions: function logOptions() {
                window.console.log('Chart options:', this.get('chartOptions'));
            },

            logSeries: function logSeries() {
                window.console.log('Content:', this.get('content'));
            }
        },

        chartOptions: {
            chart: {
                type: 'bar'
            },

            xAxis: {
                categories: ['Apples', 'Bananas', 'Oranges']
            },

            yAxis: {
                title: {
                    text: 'Fruit Eaten'
                }
            }
        }
    });

});
define('dummy/controllers/demos/sl-date-time', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        firstDayDate: Ember['default'].computed(function () {
            return window.moment().dayOfYear(1);
        }),

        threeMonthsAgoDate: Ember['default'].computed(function () {
            var now = window.moment();

            return window.moment().month(now.month() - 3);
        })
    });

});
define('dummy/controllers/demos/sl-drop-button', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        actions: {
            logRed: function logRed() {
                window.console.log('Red!');
            },

            logGreen: function logGreen() {
                window.console.log('Green!');
            },

            logWhite: function logWhite() {
                window.console.log('White!');
            }
        }
    });

});
define('dummy/controllers/demos/sl-grid', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        sortProperties: ['fruit'],
        sortedModel: Ember['default'].computed.sort('model', 'sortProperties'),

        actions: {
            rowClick: function rowClick(row) {
                window.console.log('Clicked', row);
            },

            logName: function logName(row) {
                window.console.log('Record:', Ember['default'].get(row, 'name'));
            },

            sortColumn: function sortColumn(column) {
                var columns = this.get('columns');
                var currentDir = Ember['default'].get(column, 'sorted');

                var sortDir = 'asc';
                if ('asc' === currentDir) {
                    sortDir = 'desc';
                }

                for (var i = 0; i < columns.length; i++) {
                    Ember['default'].set(columns[i], 'sorted', null);
                }

                Ember['default'].set(column, 'sorted', sortDir);

                var columnString = column['valuePath'];

                if (sortDir !== 'asc') {
                    columnString = columnString + ':desc';
                }

                this.set('sortProperties', [columnString]);
            }
        },

        columns: Ember['default'].A([{
            title: 'Color',
            valuePath: 'name'
        }, {
            headerClass: 'smallWidth',
            primary: true,
            sortable: true,
            sorted: 'asc',
            title: 'Fruit',
            valuePath: 'fruit'
        }, {
            headerClass: 'smallWidth',
            sortable: true,
            title: 'Hex Code',
            valuePath: 'hexCode'
        }]),

        rowActions: [{
            label: 'Log',
            action: 'sendLog'
        }],

        totalCount: 6
    });

});
define('dummy/controllers/demos/sl-input', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        colors: [{ id: 'Black' }, { id: 'Blue' }, { id: 'Gray' }, { id: 'Green' }, { id: 'Orange' }, { id: 'Purple' }, { id: 'Red' }, { id: 'White' }, { id: 'Yellow' }],

        names: ['Jeff', 'Michael', 'Jeremy']
    });

});
define('dummy/controllers/demos/sl-menu', ['exports', 'ember', 'ember-stream/mixins/stream-enabled'], function (exports, Ember, StreamEnabled) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend(StreamEnabled['default'], {
        actions: {
            doSomething: function doSomething(actionName, data) {
                console.log('Doing', actionName, data);
            }
        },

        initialize: Ember['default'].on('init', function () {
            var streamService = this.get('streamService');
            var menuStreamName = this.get('menuStreamName');

            var lastPressedKey = undefined;
            window.addEventListener('keydown', function (event) {
                switch (event.keyCode) {
                    case 9:
                        // Tab key
                        streamService.send(menuStreamName, event.shiftKey ? 'selectPrevious' : 'selectNext');
                        event.preventDefault();
                        break;

                    case 13:
                        // Enter key
                        streamService.send(menuStreamName, 'doAction');
                        break;

                    case 27:
                        // Escape key
                        streamService.send(menuStreamName, 'hideAll');
                        break;

                    case 37:
                        // Left arrow key
                        streamService.send(menuStreamName, 'selectLeft');
                        event.preventDefault();
                        break;

                    case 38:
                        // Up arrow key
                        streamService.send(menuStreamName, 'selectUp');
                        event.preventDefault();
                        break;

                    case 39:
                        // Right arrow key
                        streamService.send(menuStreamName, 'selectRight');
                        event.preventDefault();
                        break;

                    case 40:
                        // Down arrow key
                        streamService.send(menuStreamName, 'selectDown');
                        event.preventDefault();
                        break;

                    case 48:
                        // 0 key
                        streamService.send(menuStreamName, 'showAll');
                        break;

                    case 49: // 1 key
                    case 50: // 2 key
                    case 51: // 3 key
                    case 52: // 4 key
                    case 53: // 5 key
                    case 54: // 6 key
                    case 55: // 7 key
                    case 56: // 8 key
                    case 57:
                        // 9 key
                        streamService.send(menuStreamName, 'select', event.keyCode - 49);
                        break;

                    case 189:
                        // - key
                        if (189 !== lastPressedKey) {
                            streamService.send(menuStreamName, 'selectSubMenu');
                        }
                        break;
                }

                lastPressedKey = event.keyCode;
            });
        }),

        menuItems: Ember['default'].A([{
            label: 'Main One',
            items: [{
                label: 'Sub 1',
                action: 'say',
                data: '"hello"'
            }, {
                label: 'Sub 2',
                items: [{ label: 'Sub 1 - 1' }, { label: 'Sub 1 - 2' }]
            }]
        }, { label: 'Main Two' }, { label: 'Main Three' }]),

        menuStreamName: 'demoMenu'

    });

});
define('dummy/controllers/demos/sl-pagination', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        actions: {
            changePage: function changePage(pageNumber) {
                window.console.log('Page changed to', pageNumber);
            }
        }
    });

});
define('dummy/controllers/demos/sl-progress-bar', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        dynamicValue: 42
    });

});
define('dummy/controllers/demos/sl-radio-group', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        currentColor: 'blue'
    });

});
define('dummy/controllers/demos/sl-select', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        numbers: [10, 20, 30, 40, 50, 60, 70, 80, 90]
    });

});
define('dummy/controllers/demos/sl-span', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        initialize: Ember['default'].on('init', function () {
            var _this = this;

            setTimeout(function () {
                _this.set('isLoading', false);
            }, 5000);
        }),

        isLoading: true
    });

});
define('dummy/controllers/demos/tabs/home', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Controller.extend({
        testValue: 'Hello'
    });

});
define('dummy/controllers/object', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('dummy/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'dummy/config/environment'], function (exports, initializerFactory, config) {

  'use strict';

  var _config$APP = config['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;

  exports['default'] = {
    name: 'App Version',
    initialize: initializerFactory['default'](name, version)
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('dummy/mixins/stream-enabled', ['exports', 'ember-stream/mixins/stream-enabled'], function (exports, stream_enabled) {

	'use strict';



	exports['default'] = stream_enabled['default'];

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

    'use strict';

    var Router = Ember['default'].Router.extend({
        location: config['default'].locationType,

        scrollToTopAfterRouteTransition: Ember['default'].observer('url', function () {
            window.scrollTo(0, 0);
        })
    });

    Router.map(function () {
        this.route('index', { path: '/' });
        this.route('browsers');

        this.route('demos', function () {
            this.route('sl-alert');
            this.route('sl-modal');
            this.route('sl-button');
            this.route('sl-calendar');
            this.route('sl-chart');
            this.route('sl-checkbox');
            this.route('sl-date-picker');
            this.route('sl-date-range-picker');
            this.route('sl-date-time');
            this.route('sl-drop-button');
            this.route('sl-input');
            this.route('sl-grid');
            this.route('sl-menu');
            this.route('sl-pagination');
            this.route('sl-panel');
            this.route('sl-progress-bar');
            this.route('sl-radio');
            this.route('sl-radio-group');
            this.route('sl-select');
            this.route('sl-span');
            this.route('sl-tab-panel');
            this.route('sl-textarea');
            this.route('sl-tooltip');

            this.route('services', function () {
                this.route('sl-modal');
            });
        });
    });

    exports['default'] = Router;

});
define('dummy/routes/application', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend();

});
define('dummy/routes/demos/sl-calendar', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        model: function model() {
            return Ember['default'].A([{
                date: new Date(),
                label: 'Today!'
            }]);
        }
    });

});
define('dummy/routes/demos/sl-chart', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        model: function model() {
            return Ember['default'].A([{
                name: 'Jane',
                data: [1, 0, 4]
            }, {
                name: 'John',
                data: [5, 7, 3]
            }]);
        }
    });

});
define('dummy/routes/demos/sl-grid', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        model: function model() {
            return Ember['default'].A([{
                name: 'Red',
                fruit: 'Apple',
                hexCode: '#FF0000'
            }, {
                name: 'Orange',
                fruit: 'Orange',
                hexCode: '#FF7700'
            }, {
                name: 'Yellow',
                fruit: 'Banana',
                hexCode: '#FFFF00'
            }, {
                name: 'Green',
                fruit: 'Lime',
                hexCode: '#00FF00'
            }, {
                name: 'Blue',
                fruit: 'Blueberry',
                hexCode: '#0000FF'
            }, {
                name: 'Purple',
                fruit: 'Grape',
                hexCode: '#FF00FF'
            }]);
        }
    });

});
define('dummy/routes/demos/sl-menu', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({

        model: function model() {
            return {
                label: null,
                pages: [{
                    label: 'Colors',
                    pages: [{
                        label: 'Red',
                        action: function action() {
                            window.console.log('The color RED');
                        }
                    }, {
                        label: 'Green',
                        action: function action() {
                            window.console.log('The color GREEN');
                        }
                    }, {
                        label: 'Blue',
                        action: function action() {
                            window.console.log('The color BLUE');
                        }
                    }]
                }, {
                    label: 'Numbers',
                    pages: [{
                        label: '1-5',
                        pages: [{
                            label: '1',
                            action: {
                                actionName: 'number clicked',
                                data: '1'
                            }
                        }, {
                            label: '2',
                            action: {
                                actionName: 'number clicked',
                                data: '2'
                            }
                        }, {
                            label: '3',
                            action: {
                                actionName: 'number clicked',
                                data: '3'
                            }
                        }, {
                            label: '4',
                            action: {
                                actionName: 'number clicked',
                                data: '4'
                            }
                        }, {
                            label: '5',
                            action: {
                                actionName: 'number clicked',
                                data: '5'
                            }
                        }]
                    }, {
                        label: '6-10',
                        pages: [{
                            label: '6',
                            action: {
                                actionName: 'number clicked',
                                data: '6'
                            }
                        }, {
                            label: '7',
                            action: {
                                actionName: 'number clicked',
                                data: '7'
                            }
                        }, {
                            label: '8',
                            action: {
                                actionName: 'number clicked',
                                data: '8'
                            }
                        }, {
                            label: '9',
                            action: {
                                actionName: 'number clicked',
                                data: '9'
                            }
                        }, {
                            label: '10',
                            action: {
                                actionName: 'number clicked',
                                data: '10'
                            }
                        }]
                    }]
                }, {
                    label: 'Cities',
                    pages: [{
                        label: 'Texas',
                        pages: [{ label: 'Dallas' }, { label: 'Houston' }, { label: 'San Antonio' }, { label: 'Austin' }]
                    }, {
                        label: 'Oklahoma',
                        pages: [{ label: 'Oklahoma City' }, { label: 'Norman' }]
                    }, {
                        label: 'California',
                        pages: [{ label: 'Los Angeles' }, { label: 'San Francisco' }, { label: 'Palo Alto' }]
                    }]
                }, {
                    label: 'Routes',
                    pages: [{ label: 'Checkbox', route: 'sl-checkbox' }, { label: 'Button', route: 'sl-button' }, { label: 'Calendar', route: 'sl-calendar' }, { label: 'Alert', route: 'sl-alert' }]
                }]
            };
        }
    });

});
define('dummy/routes/demos/sl-select', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    exports['default'] = Ember['default'].Route.extend({
        model: function model() {
            return Ember['default'].A([{
                label: 'Red',
                description: 'Apples',
                value: 'red'
            }, {
                label: 'Orange',
                description: 'Oranges',
                value: 'orange'
            }, {
                label: 'Yellow',
                description: 'Bananas',
                value: 'yellow'
            }, {
                label: 'Green',
                description: 'Avocados',
                value: 'green'
            }, {
                label: 'Purple',
                description: 'Blueberries',
                value: 'purple'
            }, {
                label: 'Splorge',
                description: '???',
                value: 'splorge'
            }]);
        }
    });

});
define('dummy/services/stream', ['exports', 'ember-stream/services/stream'], function (exports, stream) {

	'use strict';



	exports['default'] = stream['default'];

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-alert.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-alert.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-alert.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-button.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-button.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-button.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-calendar-day.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-calendar-day.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-calendar-day.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-calendar-month.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-calendar-month.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-calendar-month.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-calendar-year.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-calendar-year.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-calendar-year.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-calendar.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-calendar.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-calendar.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-chart.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-chart.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-chart.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-checkbox.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-checkbox.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-checkbox.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-date-picker.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-date-picker.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-date-picker.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-date-range-picker.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-date-range-picker.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-date-range-picker.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-date-time.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-date-time.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-date-time.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-drop-button.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-drop-button.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-drop-button.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-drop-option-divider.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-drop-option-divider.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-drop-option-divider.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-drop-option.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-drop-option.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-drop-option.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-grid-cell.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-grid-cell.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-grid-cell.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-grid-column-header.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-grid-column-header.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-grid-column-header.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-grid-row.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-grid-row.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-grid-row.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-grid.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-grid.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-grid.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-input.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-input.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-input.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-menu-item-show-all.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-menu-item-show-all.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-menu-item-show-all.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-menu-item.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-menu-item.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-menu-item.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-menu.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-menu.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-menu.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-modal-body.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-modal-body.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-modal-body.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-modal-footer.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-modal-footer.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-modal-footer.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-modal-header.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-modal-header.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-modal-header.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-modal.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-modal.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-modal.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-pagination.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-pagination.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-pagination.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-panel.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-panel.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-panel.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-progress-bar.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-progress-bar.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-progress-bar.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-radio-group.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-radio-group.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-radio-group.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-radio.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-radio.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-radio.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-select.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-select.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-select.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-span.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-span.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-span.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-tab-pane.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-tab-pane.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-tab-pane.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-tab-panel.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-tab-panel.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-tab-panel.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-textarea.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-textarea.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-textarea.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/components/sl-tooltip.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/components');
  QUnit.test('modules/sl-ember-components/components/sl-tooltip.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/components/sl-tooltip.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/mixins/class-prefix.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/mixins');
  QUnit.test('modules/sl-ember-components/mixins/class-prefix.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/mixins/class-prefix.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/mixins/sl-component-input-id.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/mixins');
  QUnit.test('modules/sl-ember-components/mixins/sl-component-input-id.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/mixins/sl-component-input-id.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/mixins/sl-input-based.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/mixins');
  QUnit.test('modules/sl-ember-components/mixins/sl-input-based.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/mixins/sl-input-based.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/mixins/sl-namespace.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/mixins');
  QUnit.test('modules/sl-ember-components/mixins/sl-namespace.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/mixins/sl-namespace.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/mixins/sl-tooltip-enabled.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/mixins');
  QUnit.test('modules/sl-ember-components/mixins/sl-tooltip-enabled.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/mixins/sl-tooltip-enabled.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/utils/bootstrap-naming.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/utils');
  QUnit.test('modules/sl-ember-components/utils/bootstrap-naming.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/utils/bootstrap-naming.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/utils/class-prefix.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/utils');
  QUnit.test('modules/sl-ember-components/utils/class-prefix.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/utils/class-prefix.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/utils/containsValue.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/utils');
  QUnit.test('modules/sl-ember-components/utils/containsValue.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/utils/containsValue.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/utils/error.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/utils');
  QUnit.test('modules/sl-ember-components/utils/error.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/utils/error.js should pass jshint.');
  });

});
define('dummy/sl-ember-components/tests/modules/sl-ember-components/utils/warn.jshint', function () {

  'use strict';

  QUnit.module('JSHint - modules/sl-ember-components/utils');
  QUnit.test('modules/sl-ember-components/utils/warn.js should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/sl-ember-components/utils/warn.js should pass jshint.');
  });

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 20
            },
            "end": {
              "line": 17,
              "column": 20
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-home");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        Home\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 20
            },
            "end": {
              "line": 23,
              "column": 20
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-cubes");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        Demo\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 20
            },
            "end": {
              "line": 35,
              "column": 20
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-plug");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                        Supported Browsers\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 20
            },
            "end": {
              "line": 57,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-alert");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 20
            },
            "end": {
              "line": 60,
              "column": 59
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 20
            },
            "end": {
              "line": 63,
              "column": 63
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-calendar");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 20
            },
            "end": {
              "line": 66,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-chart");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 20
            },
            "end": {
              "line": 69,
              "column": 63
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-checkbox");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 20
            },
            "end": {
              "line": 72,
              "column": 69
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-date-picker");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 75,
              "column": 20
            },
            "end": {
              "line": 77,
              "column": 20
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        sl-date-range-picker\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 80,
              "column": 20
            },
            "end": {
              "line": 80,
              "column": 65
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-date-time");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 83,
              "column": 20
            },
            "end": {
              "line": 83,
              "column": 69
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-drop-button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 20
            },
            "end": {
              "line": 86,
              "column": 55
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-grid");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 20
            },
            "end": {
              "line": 89,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-input");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 20
            },
            "end": {
              "line": 92,
              "column": 55
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-menu");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 95,
              "column": 20
            },
            "end": {
              "line": 95,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-modal");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 98,
              "column": 20
            },
            "end": {
              "line": 98,
              "column": 67
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-pagination");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 101,
              "column": 20
            },
            "end": {
              "line": 101,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-panel");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child18 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 104,
              "column": 20
            },
            "end": {
              "line": 106,
              "column": 20
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                        sl-progress-bar\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child19 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 109,
              "column": 20
            },
            "end": {
              "line": 109,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-radio");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child20 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 112,
              "column": 20
            },
            "end": {
              "line": 112,
              "column": 69
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-radio-group");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child21 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 115,
              "column": 20
            },
            "end": {
              "line": 115,
              "column": 59
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-select");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child22 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 118,
              "column": 20
            },
            "end": {
              "line": 118,
              "column": 55
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-span");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child23 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 121,
              "column": 20
            },
            "end": {
              "line": 121,
              "column": 65
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-tab-panel");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child24 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 124,
              "column": 20
            },
            "end": {
              "line": 124,
              "column": 63
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-textarea");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child25 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 127,
              "column": 20
            },
            "end": {
              "line": 127,
              "column": 61
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-tooltip");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 144,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/application.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-12");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","btn-group pull-right");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","btn btn-default dropdown-toggle");
        dom.setAttribute(el5,"data-toggle","dropdown");
        dom.setAttribute(el5,"aria-expanded","false");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6,"class","fa fa-reorder");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","caret");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("ul");
        dom.setAttribute(el5,"class","dropdown-menu");
        dom.setAttribute(el5,"role","menu");
        var el6 = dom.createTextNode("\n\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","http://softlayer.github.io/sl-ember-components/docs");
        dom.setAttribute(el7,"target","new");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-book");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        Documentation\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","https://github.com/softlayer/sl-ember-components/blob/master/CONTRIBUTING.md");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-cog");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        Contribution Guide\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","https://github.com/softlayer/sl-ember-components/stargazers");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-star");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        Star Our Repo\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","https://github.com/softlayer/sl-ember-components/fork");
        var el8 = dom.createTextNode("\n                        ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("i");
        dom.setAttribute(el8,"class","fa fa-code-fork");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                        Fork Our Repo\n                    ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"class","divider");
        dom.setAttribute(el6,"role","presentation");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("li");
        dom.setAttribute(el6,"role","presentation");
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-12 text-center");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("ember install sl-ember-components");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createElement("a");
        dom.setAttribute(el5,"href","https://github.com/softlayer/sl-ember-components/blob/master/LICENSE.md");
        var el6 = dom.createTextNode("MIT Licensed");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1, 1, 1, 3]);
        var morphs = new Array(27);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [7]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [17]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [19]),1,1);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [21]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [23]),1,1);
        morphs[7] = dom.createMorphAt(dom.childAt(element1, [25]),1,1);
        morphs[8] = dom.createMorphAt(dom.childAt(element1, [27]),1,1);
        morphs[9] = dom.createMorphAt(dom.childAt(element1, [29]),1,1);
        morphs[10] = dom.createMorphAt(dom.childAt(element1, [31]),1,1);
        morphs[11] = dom.createMorphAt(dom.childAt(element1, [33]),1,1);
        morphs[12] = dom.createMorphAt(dom.childAt(element1, [35]),1,1);
        morphs[13] = dom.createMorphAt(dom.childAt(element1, [37]),1,1);
        morphs[14] = dom.createMorphAt(dom.childAt(element1, [39]),1,1);
        morphs[15] = dom.createMorphAt(dom.childAt(element1, [41]),1,1);
        morphs[16] = dom.createMorphAt(dom.childAt(element1, [43]),1,1);
        morphs[17] = dom.createMorphAt(dom.childAt(element1, [45]),1,1);
        morphs[18] = dom.createMorphAt(dom.childAt(element1, [47]),1,1);
        morphs[19] = dom.createMorphAt(dom.childAt(element1, [49]),1,1);
        morphs[20] = dom.createMorphAt(dom.childAt(element1, [51]),1,1);
        morphs[21] = dom.createMorphAt(dom.childAt(element1, [53]),1,1);
        morphs[22] = dom.createMorphAt(dom.childAt(element1, [55]),1,1);
        morphs[23] = dom.createMorphAt(dom.childAt(element1, [57]),1,1);
        morphs[24] = dom.createMorphAt(dom.childAt(element1, [59]),1,1);
        morphs[25] = dom.createMorphAt(dom.childAt(element1, [61]),1,1);
        morphs[26] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["block","link-to",["index"],[],0,null,["loc",[null,[14,20],[17,32]]]],
        ["block","link-to",["demos"],[],1,null,["loc",[null,[20,20],[23,32]]]],
        ["block","link-to",["browsers"],[],2,null,["loc",[null,[32,20],[35,32]]]],
        ["block","link-to",["demos.sl-alert"],[],3,null,["loc",[null,[57,20],[57,69]]]],
        ["block","link-to",["demos.sl-button"],[],4,null,["loc",[null,[60,20],[60,71]]]],
        ["block","link-to",["demos.sl-calendar"],[],5,null,["loc",[null,[63,20],[63,75]]]],
        ["block","link-to",["demos.sl-chart"],[],6,null,["loc",[null,[66,20],[66,69]]]],
        ["block","link-to",["demos.sl-checkbox"],[],7,null,["loc",[null,[69,20],[69,75]]]],
        ["block","link-to",["demos.sl-date-picker"],[],8,null,["loc",[null,[72,20],[72,81]]]],
        ["block","link-to",["demos.sl-date-range-picker"],[],9,null,["loc",[null,[75,20],[77,32]]]],
        ["block","link-to",["demos.sl-date-time"],[],10,null,["loc",[null,[80,20],[80,77]]]],
        ["block","link-to",["demos.sl-drop-button"],[],11,null,["loc",[null,[83,20],[83,81]]]],
        ["block","link-to",["demos.sl-grid"],[],12,null,["loc",[null,[86,20],[86,67]]]],
        ["block","link-to",["demos.sl-input"],[],13,null,["loc",[null,[89,20],[89,69]]]],
        ["block","link-to",["demos.sl-menu"],[],14,null,["loc",[null,[92,20],[92,67]]]],
        ["block","link-to",["demos.sl-modal"],[],15,null,["loc",[null,[95,20],[95,69]]]],
        ["block","link-to",["demos.sl-pagination"],[],16,null,["loc",[null,[98,20],[98,79]]]],
        ["block","link-to",["demos.sl-panel"],[],17,null,["loc",[null,[101,20],[101,69]]]],
        ["block","link-to",["demos.sl-progress-bar"],[],18,null,["loc",[null,[104,20],[106,32]]]],
        ["block","link-to",["demos.sl-radio"],[],19,null,["loc",[null,[109,20],[109,69]]]],
        ["block","link-to",["demos.sl-radio-group"],[],20,null,["loc",[null,[112,20],[112,81]]]],
        ["block","link-to",["demos.sl-select"],[],21,null,["loc",[null,[115,20],[115,71]]]],
        ["block","link-to",["demos.sl-span"],[],22,null,["loc",[null,[118,20],[118,67]]]],
        ["block","link-to",["demos.sl-tab-panel"],[],23,null,["loc",[null,[121,20],[121,77]]]],
        ["block","link-to",["demos.sl-textarea"],[],24,null,["loc",[null,[124,20],[124,75]]]],
        ["block","link-to",["demos.sl-tooltip"],[],25,null,["loc",[null,[127,20],[127,73]]]],
        ["content","outlet",["loc",[null,[134,4],[134,14]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19, child20, child21, child22, child23, child24, child25]
    };
  }()));

});
define('dummy/templates/browsers', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 49
            },
            "end": {
              "line": 67,
              "column": 93
            }
          },
          "moduleName": "dummy/templates/browsers.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("TWB");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 68,
              "column": 49
            },
            "end": {
              "line": 68,
              "column": 95
            }
          },
          "moduleName": "dummy/templates/browsers.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("SEC");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 49
            },
            "end": {
              "line": 69,
              "column": 85
            }
          },
          "moduleName": "dummy/templates/browsers.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("HC");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 49
            },
            "end": {
              "line": 70,
              "column": 95
            }
          },
          "moduleName": "dummy/templates/browsers.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("BD");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 49
            },
            "end": {
              "line": 71,
              "column": 87
            }
          },
          "moduleName": "dummy/templates/browsers.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("TA");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 49
            },
            "end": {
              "line": 72,
              "column": 82
            }
          },
          "moduleName": "dummy/templates/browsers.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("S2");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 80,
                "column": 24
              },
              "end": {
                "line": 80,
                "column": 89
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check text-success");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 80,
                "column": 89
              },
              "end": {
                "line": 80,
                "column": 136
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","text-muted");
            var el2 = dom.createTextNode("—");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 83,
                "column": 24
              },
              "end": {
                "line": 83,
                "column": 89
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check text-success");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 83,
                "column": 89
              },
              "end": {
                "line": 83,
                "column": 136
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","text-muted");
            var el2 = dom.createTextNode("—");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 86,
                "column": 24
              },
              "end": {
                "line": 86,
                "column": 88
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check text-success");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child5 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 86,
                "column": 88
              },
              "end": {
                "line": 86,
                "column": 135
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","text-muted");
            var el2 = dom.createTextNode("—");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child6 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 24
              },
              "end": {
                "line": 89,
                "column": 88
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check text-success");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child7 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 88
              },
              "end": {
                "line": 89,
                "column": 135
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","text-muted");
            var el2 = dom.createTextNode("—");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child8 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 92,
                "column": 24
              },
              "end": {
                "line": 92,
                "column": 88
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check text-success");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child9 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 92,
                "column": 88
              },
              "end": {
                "line": 92,
                "column": 135
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","text-muted");
            var el2 = dom.createTextNode("—");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child10 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 95,
                "column": 24
              },
              "end": {
                "line": 95,
                "column": 88
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-check text-success");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child11 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 95,
                "column": 88
              },
              "end": {
                "line": 95,
                "column": 135
              }
            },
            "moduleName": "dummy/templates/browsers.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","text-muted");
            var el2 = dom.createTextNode("—");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 12
            },
            "end": {
              "line": 98,
              "column": 12
            }
          },
          "moduleName": "dummy/templates/browsers.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","text-center");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","text-center");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","text-center");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","text-center");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","text-center");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","text-center");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]),1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [9]),1,1);
          morphs[5] = dom.createMorphAt(dom.childAt(element0, [11]),1,1);
          morphs[6] = dom.createMorphAt(dom.childAt(element0, [13]),1,1);
          return morphs;
        },
        statements: [
          ["content","component.name",["loc",[null,[78,24],[78,42]]]],
          ["block","if",[["get","component.lib.twb",["loc",[null,[80,30],[80,47]]]]],[],0,1,["loc",[null,[80,24],[80,143]]]],
          ["block","if",[["get","component.lib.sec",["loc",[null,[83,30],[83,47]]]]],[],2,3,["loc",[null,[83,24],[83,143]]]],
          ["block","if",[["get","component.lib.hc",["loc",[null,[86,30],[86,46]]]]],[],4,5,["loc",[null,[86,24],[86,142]]]],
          ["block","if",[["get","component.lib.bd",["loc",[null,[89,30],[89,46]]]]],[],6,7,["loc",[null,[89,24],[89,142]]]],
          ["block","if",[["get","component.lib.ta",["loc",[null,[92,30],[92,46]]]]],[],8,9,["loc",[null,[92,24],[92,142]]]],
          ["block","if",[["get","component.lib.s2",["loc",[null,[95,30],[95,46]]]]],[],10,11,["loc",[null,[95,24],[95,142]]]]
        ],
        locals: ["component"],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 161,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/browsers.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Supported Browsers");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("As not all of the components in sl-ember-components are based upon the same third-party libraries it is possible that there is varying support for browser versions across the different components. Below is a table of each component's library dependencies. Beneath this table are the supported browsers for said libraries.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        var el3 = dom.createTextNode("Legend");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-1");
        var el4 = dom.createTextNode("\n            TWB\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-11");
        var el4 = dom.createTextNode("\n            Twitter Bootstrap\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-1");
        var el4 = dom.createTextNode("\n            SEC\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-11");
        var el4 = dom.createTextNode("\n            sl-ember-components\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-1");
        var el4 = dom.createTextNode("\n            HC\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-11");
        var el4 = dom.createTextNode("\n            Highcharts\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-1");
        var el4 = dom.createTextNode("\n            BD\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-11");
        var el4 = dom.createTextNode("\n            Bootstrap-Datepicker\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-1");
        var el4 = dom.createTextNode("\n            TA\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-11");
        var el4 = dom.createTextNode("\n            typeahead.js\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-1");
        var el4 = dom.createTextNode("\n            S2\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-11");
        var el4 = dom.createTextNode("\n            Select2\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2,"class","table table-hover table-striped");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("thead");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","col-sm-4");
        var el6 = dom.createTextNode("Component");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","col-sm-1 text-center");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","col-sm-1 text-center");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","col-sm-1 text-center");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","col-sm-1 text-center");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","col-sm-1 text-center");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5,"class","col-sm-1 text-center");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        var el3 = dom.createTextNode("Twitter Bootstrap");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("From ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","http://getbootstrap.com/getting-started/#support");
        var el4 = dom.createTextNode("http://getbootstrap.com/getting-started/#support");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(":");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Generally the latest versions of browsers are supported. On Windows, Internet Explorer 8-11 are supported.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("See provided link for most up-to-date information.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        var el3 = dom.createTextNode("sl-ember-components");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Latest versions of browsers plus one version prior. Version 0.11.1 supports Internet Explorer 10+.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        var el3 = dom.createTextNode("Highcharts");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("From ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","http://www.highcharts.com/products/highcharts/#compatible");
        var el4 = dom.createTextNode("http://www.highcharts.com/products/highcharts/#compatible");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(":");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Works in all modern mobile and desktop browsers including the iPhone/iPad and Internet Explorer from version 6. On iOS and Android, multitouch support provides a seamless user experience. Standard browsers use SVG for the graphics rendering. In legacy Internet Explorer graphics are drawn using VML.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("See provided link for most up-to-date information.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        var el3 = dom.createTextNode("Bootstrap-Datepicker");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("From ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","http://bootstrap-datepicker.readthedocs.org/en/release/#");
        var el4 = dom.createTextNode("http://bootstrap-datepicker.readthedocs.org/en/release/#");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(":");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Has a dependency on Twitter Bootstrap so same support previously listed.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("See provided link for most up-to-date information.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        var el3 = dom.createTextNode("typeahead.js");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("From ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","https://github.com/twitter/typeahead.js");
        var el4 = dom.createTextNode("https://github.com/twitter/typeahead.js");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(":");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Chrome");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Firefox 3.5+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Safari 4+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Internet Explorer 7+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Opera 11+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Not tested on mobile browsers");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("See provided link for most up-to-date information.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        var el3 = dom.createTextNode("Select2");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("From ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","http://ivaynberg.github.io/select2/");
        var el4 = dom.createTextNode("http://ivaynberg.github.io/select2/");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(":");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("IE 8+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Chrome 8+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Firefox 10+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Safari 3+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createTextNode("Opera 10.6+");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("See provided link for most up-to-date information.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [6, 1]);
        var element2 = dom.childAt(element1, [1, 1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [3]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [5]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [7]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [9]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [11]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [13]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        return morphs;
      },
      statements: [
        ["block","sl-tooltip",[],["title","Twitter Bootstrap"],0,null,["loc",[null,[67,49],[67,108]]]],
        ["block","sl-tooltip",[],["title","sl-ember-components"],1,null,["loc",[null,[68,49],[68,110]]]],
        ["block","sl-tooltip",[],["title","Highcharts"],2,null,["loc",[null,[69,49],[69,100]]]],
        ["block","sl-tooltip",[],["title","Bootstrap-Datepicker"],3,null,["loc",[null,[70,49],[70,110]]]],
        ["block","sl-tooltip",[],["title","typeahead.js"],4,null,["loc",[null,[71,49],[71,102]]]],
        ["block","sl-tooltip",[],["title","Select2"],5,null,["loc",[null,[72,49],[72,97]]]],
        ["block","each",[["get","components",["loc",[null,[76,20],[76,30]]]]],[],6,null,["loc",[null,[76,12],[98,21]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('dummy/templates/components/demos/sl-grid-detail-footer', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/demos/sl-grid-detail-footer.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","model.hexCode",["loc",[null,[1,0],[1,17]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/components/demos/sl-grid-detail-header', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/demos/sl-grid-detail-header.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Color: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","model.name",["loc",[null,[1,7],[1,21]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/components/demos/sl-grid-detail', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/demos/sl-grid-detail.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" fruit: ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,2,2);
        return morphs;
      },
      statements: [
        ["content","model.name",["loc",[null,[1,4],[1,18]]]],
        ["content","model.fruit",["loc",[null,[1,26],[1,41]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/components/demos/tabs/tab-one', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/demos/tabs/tab-one.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h4");
        var el2 = dom.createTextNode("Tab Pane One");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        return morphs;
      },
      statements: [
        ["content","text",["loc",[null,[3,3],[3,11]]]],
        ["inline","sl-input",[],["placeholder","Enter some text","value",["subexpr","@mut",[["get","inputText",["loc",[null,[5,47],[5,56]]]]],[],[]]],["loc",[null,[5,0],[5,58]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/components/demos/tabs/tab-two', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/demos/tabs/tab-two.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h4");
        var el2 = dom.createTextNode("Tab Pane Two");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/components/property-text', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/property-text.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("small");
          dom.setAttribute(el1,"class","text-danger");
          var el2 = dom.createTextNode("required");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 46
            },
            "end": {
              "line": 8,
              "column": 114
            }
          },
          "moduleName": "dummy/templates/components/property-text.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(", ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","text-info");
          var el2 = dom.createTextNode("default: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","default",["loc",[null,[8,96],[8,107]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 121
            },
            "end": {
              "line": 8,
              "column": 193
            }
          },
          "moduleName": "dummy/templates/components/property-text.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(", ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","text-danger");
          var el2 = dom.createTextNode("requires ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","requires",["loc",[null,[8,174],[8,186]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 16
          }
        },
        "moduleName": "dummy/templates/components/property-text.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h4");
        dom.setAttribute(el1,"class","list-group-item-heading");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","text-primary");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        morphs[3] = dom.createMorphAt(element1,2,2);
        morphs[4] = dom.createMorphAt(element1,3,3);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [4]),0,0);
        return morphs;
      },
      statements: [
        ["content","name",["loc",[null,[2,4],[2,12]]]],
        ["block","if",[["get","required",["loc",[null,[3,10],[3,18]]]]],[],0,null,["loc",[null,[3,4],[5,11]]]],
        ["content","type",["loc",[null,[8,31],[8,39]]]],
        ["block","if",[["get","default",["loc",[null,[8,52],[8,59]]]]],[],1,null,["loc",[null,[8,46],[8,121]]]],
        ["block","if",[["get","requires",["loc",[null,[8,127],[8,135]]]]],[],2,null,["loc",[null,[8,121],[8,200]]]],
        ["content","yield",["loc",[null,[10,3],[10,12]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('dummy/templates/demos/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-alert\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 8,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-button\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-calendar\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-chart\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-checkbox\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-date-picker\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-date-range-picker\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-date-time\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-drop-button\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-grid\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-input\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-menu\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-modal\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 44,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-pagination\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-panel\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-progress-bar\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-radio\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-radio-group\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child18 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-select\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child19 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-span\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child20 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-tab-panel\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child21 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-textarea\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child22 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        sl-tooltip\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 124,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Components");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("sl-component-input-id");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Provides unique id that a component can assign to an input and a label's \"for\" attribute.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("sl-input-based");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Provides state properties for input element based components.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("sl-namespace");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Namespace component events by elementId.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Provides Bootstrap tooltip functionality bindings, for both popovers and plain tooltips.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Utility Classes");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("containsValue");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Check whether a value is a valid value in object.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("error");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Provides a way for individual components to throw errors that are able to be recognized by methods\n        inside of a consuming application's Ember.onerror() function.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("warn");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Provides a mechanism for initiating console.warn()s.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("CSS Classes");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("sl-loading");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Apply a loading indicator to an element.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(23);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,2,2);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,4,4);
        morphs[4] = dom.createMorphAt(element0,5,5);
        morphs[5] = dom.createMorphAt(element0,6,6);
        morphs[6] = dom.createMorphAt(element0,7,7);
        morphs[7] = dom.createMorphAt(element0,8,8);
        morphs[8] = dom.createMorphAt(element0,9,9);
        morphs[9] = dom.createMorphAt(element0,10,10);
        morphs[10] = dom.createMorphAt(element0,11,11);
        morphs[11] = dom.createMorphAt(element0,12,12);
        morphs[12] = dom.createMorphAt(element0,13,13);
        morphs[13] = dom.createMorphAt(element0,14,14);
        morphs[14] = dom.createMorphAt(element0,15,15);
        morphs[15] = dom.createMorphAt(element0,16,16);
        morphs[16] = dom.createMorphAt(element0,17,17);
        morphs[17] = dom.createMorphAt(element0,18,18);
        morphs[18] = dom.createMorphAt(element0,19,19);
        morphs[19] = dom.createMorphAt(element0,20,20);
        morphs[20] = dom.createMorphAt(element0,21,21);
        morphs[21] = dom.createMorphAt(element0,22,22);
        morphs[22] = dom.createMorphAt(element0,23,23);
        return morphs;
      },
      statements: [
        ["block","link-to",["demos.sl-alert"],["class","list-group-item"],0,null,["loc",[null,[3,4],[5,16]]]],
        ["block","link-to",["demos.sl-button"],["class","list-group-item"],1,null,["loc",[null,[6,4],[8,16]]]],
        ["block","link-to",["demos.sl-calendar"],["class","list-group-item"],2,null,["loc",[null,[9,4],[11,16]]]],
        ["block","link-to",["demos.sl-chart"],["class","list-group-item"],3,null,["loc",[null,[12,4],[14,16]]]],
        ["block","link-to",["demos.sl-checkbox"],["class","list-group-item"],4,null,["loc",[null,[15,4],[17,16]]]],
        ["block","link-to",["demos.sl-date-picker"],["class","list-group-item"],5,null,["loc",[null,[18,4],[20,16]]]],
        ["block","link-to",["demos.sl-date-range-picker"],["class","list-group-item"],6,null,["loc",[null,[21,4],[23,16]]]],
        ["block","link-to",["demos.sl-date-time"],["class","list-group-item"],7,null,["loc",[null,[24,4],[26,16]]]],
        ["block","link-to",["demos.sl-drop-button"],["class","list-group-item"],8,null,["loc",[null,[27,4],[29,16]]]],
        ["block","link-to",["demos.sl-grid"],["class","list-group-item"],9,null,["loc",[null,[30,4],[32,16]]]],
        ["block","link-to",["demos.sl-input"],["class","list-group-item"],10,null,["loc",[null,[33,4],[35,16]]]],
        ["block","link-to",["demos.sl-menu"],["class","list-group-item"],11,null,["loc",[null,[36,4],[38,16]]]],
        ["block","link-to",["demos.sl-modal"],["class","list-group-item"],12,null,["loc",[null,[39,4],[41,16]]]],
        ["block","link-to",["demos.sl-pagination"],["class","list-group-item"],13,null,["loc",[null,[42,4],[44,16]]]],
        ["block","link-to",["demos.sl-panel"],["class","list-group-item"],14,null,["loc",[null,[45,4],[47,16]]]],
        ["block","link-to",["demos.sl-progress-bar"],["class","list-group-item"],15,null,["loc",[null,[48,4],[50,16]]]],
        ["block","link-to",["demos.sl-radio"],["class","list-group-item"],16,null,["loc",[null,[51,4],[53,16]]]],
        ["block","link-to",["demos.sl-radio-group"],["class","list-group-item"],17,null,["loc",[null,[54,4],[56,16]]]],
        ["block","link-to",["demos.sl-select"],["class","list-group-item"],18,null,["loc",[null,[57,4],[59,16]]]],
        ["block","link-to",["demos.sl-span"],["class","list-group-item"],19,null,["loc",[null,[60,4],[62,16]]]],
        ["block","link-to",["demos.sl-tab-panel"],["class","list-group-item"],20,null,["loc",[null,[63,4],[65,16]]]],
        ["block","link-to",["demos.sl-textarea"],["class","list-group-item"],21,null,["loc",[null,[66,4],[68,16]]]],
        ["block","link-to",["demos.sl-tooltip"],["class","list-group-item"],22,null,["loc",[null,[69,4],[71,16]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19, child20, child21, child22]
    };
  }()));

});
define('dummy/templates/demos/sl-alert', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 8
            },
            "end": {
              "line": 20,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            Dismissable info alert\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 34,
              "column": 50
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Success alert");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 50
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Warning alert");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 8
            },
            "end": {
              "line": 62,
              "column": 48
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Danger alert");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An action to call when the button is dismissed.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Whether to add a dismiss button.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bootstrap contextual color type; \"danger\", \"info\", \"success\", \"warning\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-alert.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 112,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-alert.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-alert");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A message box component for short alert messages. Based on ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/javascript/#alerts");
        var el3 = dom.createTextNode("Bootstrap - Alert messages");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-alert dismissable=true theme=\"info\"}}\n    Dismissable info alert\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-alert}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-alert theme=\"success\"}}\n    Success alert\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-alert}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-alert theme=\"warning\"}}\n    Warning alert\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-alert}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-alert theme=\"danger\"}}\n    Danger alert\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-alert}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-alert");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-alert.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [32]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [12, 3]),3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [14, 3]),3,3);
        morphs[4] = dom.createMorphAt(element0,1,1);
        morphs[5] = dom.createMorphAt(element0,3,3);
        morphs[6] = dom.createMorphAt(element0,5,5);
        morphs[7] = dom.createMorphAt(element0,7,7);
        morphs[8] = dom.createMorphAt(element0,9,9);
        return morphs;
      },
      statements: [
        ["block","sl-alert",[],["dismissable",true,"theme","info"],0,null,["loc",[null,[18,8],[20,21]]]],
        ["block","sl-alert",[],["theme","success"],1,null,["loc",[null,[34,8],[34,63]]]],
        ["block","sl-alert",[],["theme","warning"],2,null,["loc",[null,[48,8],[48,63]]]],
        ["block","sl-alert",[],["theme","danger"],3,null,["loc",[null,[62,8],[62,61]]]],
        ["block","property-text",[],["name","dismiss","type","String","requires","dismissable=true"],4,null,["loc",[null,[92,4],[94,22]]]],
        ["block","property-text",[],["name","dismissable","type","Boolean","default","false"],5,null,["loc",[null,[96,4],[98,22]]]],
        ["block","property-text",[],["name","popover","type","String"],6,null,["loc",[null,[100,4],[102,22]]]],
        ["block","property-text",[],["name","theme","type","String","default","\"info\""],7,null,["loc",[null,[104,4],[106,22]]]],
        ["block","property-text",[],["name","title","type","String"],8,null,["loc",[null,[108,4],[110,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  }()));

});
define('dummy/templates/demos/sl-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 13
            },
            "end": {
              "line": 16,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Default Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 13
            },
            "end": {
              "line": 28,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Primary Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 13
            },
            "end": {
              "line": 40,
              "column": 51
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Info Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 13
            },
            "end": {
              "line": 52,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Success Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 64,
              "column": 13
            },
            "end": {
              "line": 64,
              "column": 57
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Warning Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 13
            },
            "end": {
              "line": 76,
              "column": 55
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Danger Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 88,
              "column": 13
            },
            "end": {
              "line": 88,
              "column": 56
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Disabled Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 13
            },
            "end": {
              "line": 100,
              "column": 53
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Hover Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 112,
              "column": 13
            },
            "end": {
              "line": 112,
              "column": 51
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Link Button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An action to fire when the button is clicked.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Whether the browser should propagate the button click event.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("class");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute for the button.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Whether the button is disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 158,
              "column": 4
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text label on the button.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the button is placed in a pending state, with the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("pendingLabel");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" value becoming the primary button label text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text to display during associated AJAX activity.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 170,
              "column": 4
            },
            "end": {
              "line": 172,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content string.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 175,
                "column": 37
              },
              "end": {
                "line": 175,
                "column": 74
              }
            },
            "moduleName": "dummy/templates/demos/sl-button.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("sl-modal");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Used to trigger opening of a ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" by passing in the name of the stream that the modal is registered to.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["demos.sl-modal"],[],0,null,["loc",[null,[175,37],[175,86]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child18 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Suffix string of Bootstrap button sizes; \"extra-small\", \"small\", \"medium\" (default) or \"large\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child19 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 184,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bootstrap contextual style type; \"danger\", \"default\", \"hover\", \"info\", \"link\", \"primary\", \"success\", \"warning\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child20 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 190,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-button");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("An active <button> component. Based on ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/css/#buttons");
        var el3 = dom.createTextNode("Bootstrap - Buttons");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"default\"}}Default Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"primary\"}}Primary Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"info\"}}Info Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"success\"}}Success Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"warning\"}}Warning Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"danger\"}}Danger Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button disabled=true}}Disabled Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"hover\"}}Hover Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-button theme=\"link\"}}Link Button");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-button");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-button.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [42]);
        var morphs = new Array(21);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3, 3]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3, 3]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [12, 3, 3]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [14, 3, 3]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [16, 3, 3]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [18, 3, 3]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [20, 3, 3]),0,0);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [22, 3, 3]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [24, 3, 3]),0,0);
        morphs[9] = dom.createMorphAt(element0,1,1);
        morphs[10] = dom.createMorphAt(element0,3,3);
        morphs[11] = dom.createMorphAt(element0,5,5);
        morphs[12] = dom.createMorphAt(element0,7,7);
        morphs[13] = dom.createMorphAt(element0,9,9);
        morphs[14] = dom.createMorphAt(element0,11,11);
        morphs[15] = dom.createMorphAt(element0,13,13);
        morphs[16] = dom.createMorphAt(element0,15,15);
        morphs[17] = dom.createMorphAt(element0,17,17);
        morphs[18] = dom.createMorphAt(element0,19,19);
        morphs[19] = dom.createMorphAt(element0,21,21);
        morphs[20] = dom.createMorphAt(element0,23,23);
        return morphs;
      },
      statements: [
        ["block","sl-button",[],["theme","default"],0,null,["loc",[null,[16,13],[16,71]]]],
        ["block","sl-button",[],["theme","primary"],1,null,["loc",[null,[28,13],[28,71]]]],
        ["block","sl-button",[],["theme","info"],2,null,["loc",[null,[40,13],[40,65]]]],
        ["block","sl-button",[],["theme","success"],3,null,["loc",[null,[52,13],[52,71]]]],
        ["block","sl-button",[],["theme","warning"],4,null,["loc",[null,[64,13],[64,71]]]],
        ["block","sl-button",[],["theme","danger"],5,null,["loc",[null,[76,13],[76,69]]]],
        ["block","sl-button",[],["disabled",true],6,null,["loc",[null,[88,13],[88,70]]]],
        ["block","sl-button",[],["theme","hover"],7,null,["loc",[null,[100,13],[100,67]]]],
        ["block","sl-button",[],["theme","link"],8,null,["loc",[null,[112,13],[112,65]]]],
        ["block","property-text",[],["name","action","type","Function"],9,null,["loc",[null,[142,4],[144,22]]]],
        ["block","property-text",[],["name","bubbles","type","Boolean","default","true"],10,null,["loc",[null,[146,4],[148,22]]]],
        ["block","property-text",[],["name","class","type","String"],11,null,["loc",[null,[150,4],[152,22]]]],
        ["block","property-text",[],["name","disabled","type","Boolean","default","false"],12,null,["loc",[null,[154,4],[156,22]]]],
        ["block","property-text",[],["name","label","type","String"],13,null,["loc",[null,[158,4],[160,22]]]],
        ["block","property-text",[],["name","pending","type","Boolean","default","false"],14,null,["loc",[null,[162,4],[164,22]]]],
        ["block","property-text",[],["name","pendingLabel","type","Function","default","null"],15,null,["loc",[null,[166,4],[168,22]]]],
        ["block","property-text",[],["name","popover","type","String"],16,null,["loc",[null,[170,4],[172,22]]]],
        ["block","property-text",[],["name","showModalWithStreamName","type","String"],17,null,["loc",[null,[174,4],[176,22]]]],
        ["block","property-text",[],["name","size","type","String","default","\"medium\""],18,null,["loc",[null,[178,4],[180,22]]]],
        ["block","property-text",[],["name","theme","type","String","default","\"default\""],19,null,["loc",[null,[182,4],[184,22]]]],
        ["block","property-text",[],["name","title","type","String"],20,null,["loc",[null,[186,4],[188,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19, child20]
    };
  }()));

});
define('dummy/templates/demos/sl-calendar', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Action to call when a day is clicked that contains one of the content dates. An array of content objects with dates occurring on the clicked date will be returned to this action.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bound array of objects with date values, looked up using the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("dateValuePath");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The month number to display (1-12).\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The year to display.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Path to the content objects' date value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The locale string to use for ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("em");
          var el2 = dom.createTextNode("moment");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" date formats.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 70,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the view is locked in the initial mode, and forward and back buttons are disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-calendar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The view to display the calendar in; \"days\", \"months\", or \"years\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 76,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-calendar.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-calendar");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A standalone calendar to display date values from an array of objects.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-calendar action=\"logLabel\" content=content}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Route/Controller");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("model: [\n    {\n        date: new Date(),\n        label: 'Today!'\n    }\n]");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-calendar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-calendar.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [20]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        morphs[4] = dom.createMorphAt(element0,7,7);
        morphs[5] = dom.createMorphAt(element0,9,9);
        morphs[6] = dom.createMorphAt(element0,11,11);
        morphs[7] = dom.createMorphAt(element0,13,13);
        morphs[8] = dom.createMorphAt(element0,15,15);
        return morphs;
      },
      statements: [
        ["inline","sl-calendar",[],["action","logLabel","class","col-sm-6","content",["subexpr","@mut",[["get","content",["loc",[null,[24,65],[24,72]]]]],[],[]]],["loc",[null,[24,8],[24,74]]]],
        ["block","property-text",[],["name","action","type","Function"],0,null,["loc",[null,[44,4],[46,22]]]],
        ["block","property-text",[],["name","content","type","Object[]"],1,null,["loc",[null,[48,4],[50,22]]]],
        ["block","property-text",[],["name","currentMonth","type","Number","default","current month"],2,null,["loc",[null,[52,4],[54,22]]]],
        ["block","property-text",[],["name","currentYear","type","Number","default","current year"],3,null,["loc",[null,[56,4],[58,22]]]],
        ["block","property-text",[],["name","dateValuePath","type","String","default","\"date\""],4,null,["loc",[null,[60,4],[62,22]]]],
        ["block","property-text",[],["name","locale","type","String","default","\"en\""],5,null,["loc",[null,[64,4],[66,22]]]],
        ["block","property-text",[],["name","locked","type","Boolean","default","false"],6,null,["loc",[null,[68,4],[70,22]]]],
        ["block","property-text",[],["name","viewMode","type","String","default","\"days\""],7,null,["loc",[null,[72,4],[74,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('dummy/templates/demos/sl-chart', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-chart.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An object of options passed directly to Highcharts initialization.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-chart.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Array of series data to bind to the component.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-chart.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        CSS string for the height inline style value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-chart.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the chart is masked and a loading icon appears.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-chart.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The title of the chart's panel.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-chart.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        CSS string for the width inline style value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 94,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-chart.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-chart");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A wrapper component for ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://www.highcharts.com");
        var el3 = dom.createTextNode("Highcharts");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("Highcharts is only free for non-commercial use and requires a license for any other use. See\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://shop.highsoft.com/faq/non-commercial#what-is-commercial-website");
        var el3 = dom.createTextNode("this FAQ page");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" for more information.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-chart\n    options=chartOptions\n    series=content\n    title=\"Fruit Consumption\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Controller");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("chartOptions: {\n    chart: {\n        type: 'bar'\n    },\n\n    xAxis: {\n        categories: [ 'Apples', 'Bananas', 'Oranges' ]\n    },\n\n    yAxis: {\n        title: {\n            text: 'Fruit Eaten'\n        }\n    }\n}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Route");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("content = [\n    {\n        name: 'Jane',\n        data: [ 1, 0, 4 ]\n    }, {\n        name: 'John',\n        data: [ 5, 7, 3 ]\n    }\n]");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-chart");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-chart.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [22]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        morphs[4] = dom.createMorphAt(element0,7,7);
        morphs[5] = dom.createMorphAt(element0,9,9);
        morphs[6] = dom.createMorphAt(element0,11,11);
        return morphs;
      },
      statements: [
        ["inline","sl-chart",[],["options",["subexpr","@mut",[["get","chartOptions",["loc",[null,[50,27],[50,39]]]]],[],[]],"series",["subexpr","@mut",[["get","content",["loc",[null,[50,47],[50,54]]]]],[],[]],"title","Fruit Consumption"],["loc",[null,[50,8],[50,82]]]],
        ["block","property-text",[],["name","options","required",true,"type","Object"],0,null,["loc",[null,[70,4],[72,22]]]],
        ["block","property-text",[],["name","series","required",true,"type","Array"],1,null,["loc",[null,[74,4],[76,22]]]],
        ["block","property-text",[],["name","height","type","String"],2,null,["loc",[null,[78,4],[80,22]]]],
        ["block","property-text",[],["name","loading","type","Boolean","default","false"],3,null,["loc",[null,[82,4],[84,22]]]],
        ["block","property-text",[],["name","title","type","String"],4,null,["loc",[null,[86,4],[88,22]]]],
        ["block","property-text",[],["name","width","type","String"],5,null,["loc",[null,[90,4],[92,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('dummy/templates/demos/sl-checkbox', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 8
            },
            "end": {
              "line": 25,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","label label-success");
          var el2 = dom.createTextNode("Checked!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The bound value indicating if the checkbox is checked or not.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the checkbox is disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Display the checkbox inline with others.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Label text to display beside the checkbox.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 101,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-checkbox.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-checkbox");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("An improved substitute for the default <input type=\"checkbox\"> element. See ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/css/#forms-controls");
        var el3 = dom.createTextNode("Bootstrap - Supported controls");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" for details.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-checkbox\n    checked=checkboxValue\n    label=\"Checkbox\"\n    name=\"checkbox\"\n    inline=true\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-checkbox\n    disabled=true\n    label=\"Disabled checkbox\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-input-based");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-checkbox");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-checkbox.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8, 3]);
        var element1 = dom.childAt(fragment, [28]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(element0,3,3);
        morphs[1] = dom.createMorphAt(element0,5,5);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[3] = dom.createMorphAt(element1,1,1);
        morphs[4] = dom.createMorphAt(element1,3,3);
        morphs[5] = dom.createMorphAt(element1,5,5);
        morphs[6] = dom.createMorphAt(element1,7,7);
        morphs[7] = dom.createMorphAt(element1,9,9);
        morphs[8] = dom.createMorphAt(element1,11,11);
        morphs[9] = dom.createMorphAt(element1,13,13);
        return morphs;
      },
      statements: [
        ["inline","sl-checkbox",[],["checked",["subexpr","@mut",[["get","checkboxValue",["loc",[null,[21,30],[21,43]]]]],[],[]],"label","Checkbox","name","checkbox","inline",true],["loc",[null,[21,8],[21,90]]]],
        ["block","if",[["get","checkboxValue",["loc",[null,[23,14],[23,27]]]]],[],0,null,["loc",[null,[23,8],[25,15]]]],
        ["inline","sl-checkbox",[],["disabled",true,"label","Disabled checkbox"],["loc",[null,[40,8],[40,63]]]],
        ["block","property-text",[],["name","checked","type","Boolean","default","false"],1,null,["loc",[null,[73,4],[75,22]]]],
        ["block","property-text",[],["name","disabled","type","Boolean","default","false"],2,null,["loc",[null,[77,4],[79,22]]]],
        ["block","property-text",[],["name","inline","type","Boolean","default","false"],3,null,["loc",[null,[81,4],[83,22]]]],
        ["block","property-text",[],["name","label","type","String"],4,null,["loc",[null,[85,4],[87,22]]]],
        ["block","property-text",[],["name","name","type","String"],5,null,["loc",[null,[89,4],[91,22]]]],
        ["block","property-text",[],["name","popover","type","String"],6,null,["loc",[null,[93,4],[95,22]]]],
        ["block","property-text",[],["name","title","type","String"],7,null,["loc",[null,[97,4],[99,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('dummy/templates/demos/sl-date-picker', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Action to call when the date is changed.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Whether or not to close the datepicker immediately when a date is selected.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, show week numbers to the left of the week rows.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, displays a \"Clear\" button at the bottom of the datepicker to clear the input value. If ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("autoclose");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" is also set to true, this button will also close the datepicker.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Days of the week that should be disabled. Values are 0 (Sunday) to 6 (Saturday). Multiple values should be comma-separated.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the input field is disabled and the datepicker will never display.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The latest date that may be selected. All later dates will be disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, forces parsing of the input value when the picker is close. That is, when an invalid date is left in the input field by the user, the picker will forcibly parse that value, and set the input's value to the new, valid date, conforming to the given ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("format");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The date format; combination of d, dd, D, DD, m, mm, M, MM, yy, yyyy\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("d, dd : Numeric date, no leading zero and leading zero, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("D, DD : Abbreviated and full weekday names, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("m, mm : Numeric month, no leading zero and leading zero, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("M, MM : Abbreviated and full month names, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("yy, yyyy : 2- and 4-digit years, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The help text below the datepicker's input field.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        A list of inputs to be used in a range picker, which will be attached to the selected element. Allows for explicitly creating a range picker on a non-standard element.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Whether or not to allow date navigation by arrow keys.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The label text above the datepicker's input field.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The IETF code of the language to use for month and day names.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Set a limit for the view mode. Accepts \"days\", \"months\", or \"years\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 116,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Enable multidate picking. Each date in month view acts as a toggle button, keeping track of which dates the user has selected in order. If a number is given, the picker will limit how many dates can be selected to that number, dropping the oldest dates from the list when the number is exceeded. true equates to no limit. The input’s value (if present) is set to a string generated by joining the dates, formatted, with multidateSeparator.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        A space-separated string consisting of one or two of \"left\" or \"right\", \"top\" or \"bottom\", and \"auto\" (may be omitted). Refers to the location of the picker popup's \"anchor\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("placeholder");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute text for the date input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child18 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child19 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 132,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The earliest date that may be selected. All earlier dates will be disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child20 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The view that the calendar's datepicker should show when created.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child21 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 142,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child22 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 144,
              "column": 4
            },
            "end": {
              "line": 146,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Displays a \"Today\" button at the bottom of the datepicker to select the current date. If true, the \"Today\" button will only move the current date into view. If \"linked\", the current date will also be selected.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child23 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 148,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, highlight the current date.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child24 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 152,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The date either selected by the datepicker or entered by the user.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child25 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 156,
              "column": 4
            },
            "end": {
              "line": 158,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Day of the week to start on. 0 (Sunday) to 6 (Saturday).\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 160,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-date-picker.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-date-picker");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("An input component to select date values. Based on ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://bootstrap-datepicker.readthedocs.org/en/release/index.html");
        var el3 = dom.createTextNode("bootstrap-datepicker");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-date-picker label=\"Date picker\"}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-component-input-id");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-date-picker");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-date-picker.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [26]);
        var morphs = new Array(27);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        morphs[4] = dom.createMorphAt(element0,7,7);
        morphs[5] = dom.createMorphAt(element0,9,9);
        morphs[6] = dom.createMorphAt(element0,11,11);
        morphs[7] = dom.createMorphAt(element0,13,13);
        morphs[8] = dom.createMorphAt(element0,15,15);
        morphs[9] = dom.createMorphAt(element0,17,17);
        morphs[10] = dom.createMorphAt(element0,19,19);
        morphs[11] = dom.createMorphAt(element0,21,21);
        morphs[12] = dom.createMorphAt(element0,23,23);
        morphs[13] = dom.createMorphAt(element0,25,25);
        morphs[14] = dom.createMorphAt(element0,27,27);
        morphs[15] = dom.createMorphAt(element0,29,29);
        morphs[16] = dom.createMorphAt(element0,31,31);
        morphs[17] = dom.createMorphAt(element0,33,33);
        morphs[18] = dom.createMorphAt(element0,35,35);
        morphs[19] = dom.createMorphAt(element0,37,37);
        morphs[20] = dom.createMorphAt(element0,39,39);
        morphs[21] = dom.createMorphAt(element0,41,41);
        morphs[22] = dom.createMorphAt(element0,43,43);
        morphs[23] = dom.createMorphAt(element0,45,45);
        morphs[24] = dom.createMorphAt(element0,47,47);
        morphs[25] = dom.createMorphAt(element0,49,49);
        morphs[26] = dom.createMorphAt(element0,51,51);
        return morphs;
      },
      statements: [
        ["inline","sl-date-picker",[],["label","Date picker"],["loc",[null,[16,8],[16,46]]]],
        ["block","property-text",[],["name","action","type","Function"],0,null,["loc",[null,[49,4],[51,22]]]],
        ["block","property-text",[],["name","autoclose","type","Boolean","default","true"],1,null,["loc",[null,[53,4],[55,22]]]],
        ["block","property-text",[],["name","calendarWeeks","type","Boolean","default","false"],2,null,["loc",[null,[57,4],[59,22]]]],
        ["block","property-text",[],["name","clearBtn","type","Boolean","default","false"],3,null,["loc",[null,[61,4],[63,22]]]],
        ["block","property-text",[],["name","daysOfWeekDisabled","type","Array"],4,null,["loc",[null,[65,4],[67,22]]]],
        ["block","property-text",[],["name","disabled","type","String","default","false"],5,null,["loc",[null,[69,4],[71,22]]]],
        ["block","property-text",[],["name","endDate","type","Date/String"],6,null,["loc",[null,[73,4],[75,22]]]],
        ["block","property-text",[],["name","forceParse","type","Boolean","default","true"],7,null,["loc",[null,[77,4],[79,22]]]],
        ["block","property-text",[],["name","format","type","String","default","\"mm/dd/yyyy\""],8,null,["loc",[null,[81,4],[90,22]]]],
        ["block","property-text",[],["name","helpText","type","String"],9,null,["loc",[null,[92,4],[94,22]]]],
        ["block","property-text",[],["name","inputs","type","Array"],10,null,["loc",[null,[96,4],[98,22]]]],
        ["block","property-text",[],["name","keyboardNavigation","type","Boolean","default","true"],11,null,["loc",[null,[100,4],[102,22]]]],
        ["block","property-text",[],["name","label","type","String"],12,null,["loc",[null,[104,4],[106,22]]]],
        ["block","property-text",[],["name","language","type","String","default","\"en\""],13,null,["loc",[null,[108,4],[110,22]]]],
        ["block","property-text",[],["name","minViewMode","type","String"],14,null,["loc",[null,[112,4],[114,22]]]],
        ["block","property-text",[],["name","multidate","type","Boolean/Number","default","false"],15,null,["loc",[null,[116,4],[118,22]]]],
        ["block","property-text",[],["name","orientation","type","String","default","\"auto\""],16,null,["loc",[null,[120,4],[122,22]]]],
        ["block","property-text",[],["name","placeholder","type","String"],17,null,["loc",[null,[124,4],[126,22]]]],
        ["block","property-text",[],["name","popover","type","String"],18,null,["loc",[null,[128,4],[130,22]]]],
        ["block","property-text",[],["name","startDate","type","Date/String"],19,null,["loc",[null,[132,4],[134,22]]]],
        ["block","property-text",[],["name","startView","type","String","default","\"month\""],20,null,["loc",[null,[136,4],[138,22]]]],
        ["block","property-text",[],["name","title","type","String"],21,null,["loc",[null,[140,4],[142,22]]]],
        ["block","property-text",[],["name","todayBtn","type","Boolean/String","default","false"],22,null,["loc",[null,[144,4],[146,22]]]],
        ["block","property-text",[],["name","todayHighlight","type","Boolean","default","false"],23,null,["loc",[null,[148,4],[150,22]]]],
        ["block","property-text",[],["name","value","type","String"],24,null,["loc",[null,[152,4],[154,22]]]],
        ["block","property-text",[],["name","weekStart","type","Number/String"],25,null,["loc",[null,[156,4],[158,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19, child20, child21, child22, child23, child24, child25]
    };
  }()));

});
define('dummy/templates/demos/sl-date-range-picker', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 62
            },
            "end": {
              "line": 2,
              "column": 111
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-date-picker");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("placeholder");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute text for the end date input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The binding value for the endDate input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The date format used for both inputs; combination of d, dd, D, DD, m, mm, M, MM, yy, yyyy\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("d, dd : Numeric date, no leading zero and leading zero, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("D, DD : Abbreviated and full weekday names, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("m, mm : Numeric month, no leading zero and leading zero, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("M, MM : Abbreviated and full month names, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("yy, yyyy : 2- and 4-digit years, respectively");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The latest possible date for the range.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The earliest possible date for the range.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("placeholder");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute text for the start date input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The binding value for the startDate input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-date-range-picker.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-date-range-picker");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A component to use for date ranges, using two ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" components.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-date-range-picker\n    label=\"Select date range\"\n    startDatePlaceholder=\"Select start date\"\n    endDatePlaceholder=\"Select end date\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-component-input-id");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-date-range-picker");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-date-range-picker.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [26]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,3,3);
        morphs[4] = dom.createMorphAt(element0,5,5);
        morphs[5] = dom.createMorphAt(element0,7,7);
        morphs[6] = dom.createMorphAt(element0,9,9);
        morphs[7] = dom.createMorphAt(element0,11,11);
        morphs[8] = dom.createMorphAt(element0,13,13);
        return morphs;
      },
      statements: [
        ["block","link-to",["demos.sl-date-picker"],[],0,null,["loc",[null,[2,62],[2,123]]]],
        ["inline","sl-date-range-picker",[],["label","Select date range","startDatePlaceholder","Select start date","endDatePlaceholder","Select end date"],["loc",[null,[20,8],[24,10]]]],
        ["block","property-text",[],["name","endDatePlaceholder","type","String"],1,null,["loc",[null,[54,4],[56,22]]]],
        ["block","property-text",[],["name","endDateValue","type","String","default","null"],2,null,["loc",[null,[58,4],[60,22]]]],
        ["block","property-text",[],["name","format","type","String","default","\"mm/dd/yyyy\""],3,null,["loc",[null,[62,4],[71,22]]]],
        ["block","property-text",[],["name","maxDate","type","Date/String","default","null"],4,null,["loc",[null,[73,4],[75,22]]]],
        ["block","property-text",[],["name","minDate","type","Date/String","default","null"],5,null,["loc",[null,[77,4],[79,22]]]],
        ["block","property-text",[],["name","startDatePlaceholder","type","String"],6,null,["loc",[null,[81,4],[83,22]]]],
        ["block","property-text",[],["name","startDateValue","type","String","default","null"],7,null,["loc",[null,[85,4],[87,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('dummy/templates/demos/sl-date-time', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-time.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The string value for the current moment.js timezone name (i.e., \"America/Chicago\").\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-time.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The string format to show the datetime text in. Can be \"date\", \"datetime\", or \"relative\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-time.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The locale string to use for moment.js date formats.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-time.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-time.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 105,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-date-time.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The bound date value, parseable by moment.js. If not supplied, the current date and time is used.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 109,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-date-time.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-date-time");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A formattable date and time component with included tooltip.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-date-time timezone=\"America/Chicago\"}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-date-time\n    format=\"relative\"\n    timezone=\"America/Chicago\"\n    value=firstDayDate\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-date-time\n    format=\"date\"\n    timezone=\"America/Chicago\"\n    value=threeMonthsAgoDate\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-date-time");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-date-time.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [30]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [12, 3]),3,3);
        morphs[3] = dom.createMorphAt(element0,1,1);
        morphs[4] = dom.createMorphAt(element0,3,3);
        morphs[5] = dom.createMorphAt(element0,5,5);
        morphs[6] = dom.createMorphAt(element0,7,7);
        morphs[7] = dom.createMorphAt(element0,9,9);
        morphs[8] = dom.createMorphAt(element0,11,11);
        return morphs;
      },
      statements: [
        ["inline","sl-date-time",[],["timezone","America/Chicago"],["loc",[null,[16,8],[16,51]]]],
        ["inline","sl-date-time",[],["format","relative","timezone","America/Chicago","value",["subexpr","@mut",[["get","firstDayDate",["loc",[null,[35,18],[35,30]]]]],[],[]]],["loc",[null,[32,8],[36,10]]]],
        ["inline","sl-date-time",[],["format","date","timezone","America/Chicago","value",["subexpr","@mut",[["get","threeMonthsAgoDate",["loc",[null,[55,18],[55,36]]]]],[],[]]],["loc",[null,[52,8],[56,10]]]],
        ["block","property-text",[],["name","timezone","type","String","required",true],0,null,["loc",[null,[85,4],[87,22]]]],
        ["block","property-text",[],["name","format","type","String","default","\"datetime\""],1,null,["loc",[null,[89,4],[91,22]]]],
        ["block","property-text",[],["name","locale","type","String","default","\"en\""],2,null,["loc",[null,[93,4],[95,22]]]],
        ["block","property-text",[],["name","popover","type","String"],3,null,["loc",[null,[97,4],[99,22]]]],
        ["block","property-text",[],["name","title","type","String"],4,null,["loc",[null,[101,4],[103,22]]]],
        ["block","property-text",[],["name","value","type","Array/Date/Moment/Number/Object/String","default","now"],5,null,["loc",[null,[105,4],[107,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('dummy/templates/demos/sl-drop-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 12
              },
              "end": {
                "line": 29,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","fa fa-cubes");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                Green\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","sl-drop-option",[],["action","logRed","label","Red"],["loc",[null,[25,12],[25,58]]]],
          ["block","sl-drop-option",[],["action","logGreen"],0,null,["loc",[null,[26,12],[29,31]]]],
          ["content","sl-drop-option-divider",["loc",[null,[30,12],[30,38]]]],
          ["inline","sl-drop-option",[],["action","logWhite","label","White"],["loc",[null,[31,12],[31,62]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Aligns the dropdown menu \"left\" or \"right\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An array of hash objects containing the same optional properties as the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("{{sl-drop-option}} below. Note that currently, the context is different between these two ways of defining drop-button options.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text label for button text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Suffix string for the Bootstrap button size; \"extra-small\", \"small\", \"medium\" (default), or \"large\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The theme style string to use for the button; \"default\" or \"hover\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Action to fire when the option is clicked.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text label for the option in the menu. If this property is omitted, the option becomes a divider.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 134,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-drop-button.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-drop-button");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A combination of a button with a drop-down menu, with triggered actions. Utilizes ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/javascript/#dropdowns");
        var el3 = dom.createTextNode("Bootstrap - Dropdowns");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-drop-button label=\"Select a color\"}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-drop-option action=\"logRed\" label=\"Red\"}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{#sl-drop-option action=\"logGreen\"}}\n        <i class=\"fa fa-cubes\"></i>\n        Green\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-drop-option}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-drop-option-divider}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-drop-option action=\"logWhite\" label=\"White\"}}\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-drop-button}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-drop-button Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-drop-button");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-drop-button.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-drop-button Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-drop-option Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-drop-option");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-drop-option.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-drop-option Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-drop-option-divider Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-drop-option-divider");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-drop-option-divider.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-drop-option-divider");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Places a divider in the list");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [26]);
        var element1 = dom.childAt(fragment, [38]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        morphs[4] = dom.createMorphAt(element0,7,7);
        morphs[5] = dom.createMorphAt(element0,9,9);
        morphs[6] = dom.createMorphAt(element0,11,11);
        morphs[7] = dom.createMorphAt(element0,13,13);
        morphs[8] = dom.createMorphAt(element1,1,1);
        morphs[9] = dom.createMorphAt(element1,3,3);
        return morphs;
      },
      statements: [
        ["block","sl-drop-button",[],["label","Select a color"],0,null,["loc",[null,[24,8],[32,27]]]],
        ["block","property-text",[],["name","align","type","String","default","\"left\""],1,null,["loc",[null,[62,4],[64,22]]]],
        ["block","property-text",[],["name","content","type","Array"],2,null,["loc",[null,[66,4],[68,22]]]],
        ["block","property-text",[],["name","label","type","String"],3,null,["loc",[null,[70,4],[72,22]]]],
        ["block","property-text",[],["name","popover","type","String"],4,null,["loc",[null,[74,4],[76,22]]]],
        ["block","property-text",[],["name","size","type","String","default","\"medium\""],5,null,["loc",[null,[78,4],[80,22]]]],
        ["block","property-text",[],["name","theme","type","String","default","\"default\""],6,null,["loc",[null,[82,4],[84,22]]]],
        ["block","property-text",[],["name","title","type","String"],7,null,["loc",[null,[86,4],[88,22]]]],
        ["block","property-text",[],["name","action","type","String"],8,null,["loc",[null,[107,4],[109,22]]]],
        ["block","property-text",[],["name","label","type","String"],9,null,["loc",[null,[111,4],[113,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
    };
  }()));

});
define('dummy/templates/demos/sl-grid/detail', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-grid/detail.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" fruit: ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,0,0);
        morphs[1] = dom.createMorphAt(element0,2,2);
        return morphs;
      },
      statements: [
        ["content","model.name",["loc",[null,[1,4],[1,18]]]],
        ["content","model.fruit",["loc",[null,[1,26],[1,41]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/demos/sl-grid/footer', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-grid/footer.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Viewing ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" of ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" Colors\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        return morphs;
      },
      statements: [
        ["content","content.length",["loc",[null,[1,8],[1,26]]]],
        ["content","totalCount",["loc",[null,[1,30],[1,44]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('dummy/templates/demos/sl-grid/header', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid/header.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","sl-drop-option",[],["click",["subexpr","@mut",[["get","sayHello",["loc",[null,[2,27],[2,35]]]]],[],[]],"label","Say Hello","targetObject",["subexpr","@mut",[["get","parentView",["loc",[null,[2,67],[2,77]]]]],[],[]]],["loc",[null,[2,4],[2,79]]]],
          ["inline","sl-drop-option",[],["click",["subexpr","@mut",[["get","sayGoodbye",["loc",[null,[3,27],[3,37]]]]],[],[]],"label","Say Goodbye","targetObject",["subexpr","@mut",[["get","parentView",["loc",[null,[3,71],[3,81]]]]],[],[]]],["loc",[null,[3,4],[3,83]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-grid/header.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","sl-drop-button",[],["label","Do something"],0,null,["loc",[null,[1,0],[4,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('dummy/templates/demos/sl-grid', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createTextNode("Colors");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("An array of column definition objects. Each column definition object can contain the following values:");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("align");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("string");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" that determines which direction to align the column's text (default: \"left\")");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("primary");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("boolean");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" that determines whether the column remains shown when the detail pane is visible (default: ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("false");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(")");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("headerClass");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A class to pass through to the column header.  Allows for CSS control of column widths");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("sortable");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("boolean");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" that determines whether the column is sortable or not (default: ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("false");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(")");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("sorted");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("string");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" that determines which direction the column is sorted (default: ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("null");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(")");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("template");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - The name of a template to use for the cell value, for more complex content; uses the ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("code");
          var el4 = dom.createTextNode("rowController");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" as its controller");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("title");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - The displayed title of the column");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("valuePath");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - The lookup string for the column's basic output; only used if ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("template");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" is omitted");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Array of record objects to display as the rows.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 128,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The text to label the row actions' button with.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When this is true, the grid requests data in a continuous paging manner, without the use of pagination options or data. See ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("requestData");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" for information on how content is handled in a ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("continuous");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" grid.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 134,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name of a component to render in the detail pane. The component is supplied a `model` property representing the record of the row that was clicked on to open the pane. If `detailComponent` is omitted, the detail pane will not be opened when a row in the list pane is clicked.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name of a component to render as the detail-pane footer. The component is supplied a `model` property representing the record of the row that was clicked on to open the pane. If this property is omitted, the detail footer will not be rendered.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name of a component to render as the detail-pane header. The component is supplied a `model` property representing the record of the row that was clicked on to open the pane. If this property is omitted, the detail header will not be rendered.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The string to use for the filter button label text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name of a component to render in the filter pane. If this property is omitted, the filter button and pane will be disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Determines if the table headers should be fixed position when the table is scrolled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 158,
              "column": 4
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The application path to a template to use for list-pane footer. This template is rendered in the context of the sl-grid component. If this property is omitted, the component will look for a file ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("./footer.hbs");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(", and if not found, will not render anything for the footer.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Determines the overall height of the sl-grid component. This can be any CSS sizing value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 170,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createElement("em");
          var el3 = dom.createTextNode("Valid only for non-");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("code");
          var el4 = dom.createTextNode("continuous");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" grids");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(".");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("The number of records shown per page.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 172,
              "column": 4
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("The name of an action to trigger when a data change is requested.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("For a ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("continuous");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" grid, this is triggered when the end of the content data in the grid's table is encountered. The action function is not sent anything, and should handle simply appending data onto the bound ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("content");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" array itself.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("For a non-");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("continuous");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" grid—the default—the action function should accept a page number to load data into ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("content");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" for.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 225,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("An array of objects defining what actions display in the right-most column for each row in the list pane. Each object in this array should contain the following values:");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("action");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("string");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" name of an action to trigger when this action option is selected");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("label");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("string");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" to use for the label of the action option as a dropdown item");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("In order for an action to be handled in the controller and/or routes, the action must be specified when using the grid in a template. When an action menu option is selected, the content object for that row is sent as an argument to that action's handler. The following example illustrates the use of ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("rowActions");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" with action handlers in a controller:");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          var el2 = dom.createTextNode("Controller");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("pre");
          var el2 = dom.createTextNode("actions: {\n    logName( row ) {\n        window.console.log( 'Name:', Ember.get( row, 'name' ) );\n    },\n\n    logFruit( row ) {\n        window.console.log( 'Fruit:', Ember.get( row, 'fruit' ) );\n    }\n},\n\ncolumns: [\n    // some column definitions\n],\n\ncontent: [\n    // some content\n],\n\nrowActions: [\n    {\n        label: 'Log',\n        action: 'sendLog'\n    },\n    {\n        label: 'Another Action',\n        action: 'anotherAction'\n    }\n]");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          var el2 = dom.createTextNode("Template");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("pre");
          var el2 = dom.createTextNode("{{sl-grid\n    columns=columns\n    content=content\n    sendLog=(action \"logName\")\n    anotherAction=(action \"logFruit\")\n}}");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name of an action to trigger when a row on the list-pane is clicked. If this is omitted, then the row will\n        be selected and the detail-pane will open with the model context of the clicked row's record. If no valid\n        detailPath is defined, then nothing will happen when a list-pane row is clicked.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 233,
              "column": 4
            },
            "end": {
              "line": 237,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name of an action to trigger when a sortable column is selected for sorting. This action should accept two\n        arguments: the column definition to sort on, and a boolean for whether the column is sorted ascending (true)\n        or descending (false).\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child18 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 239,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-grid.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The total number of records for the content. This value is used to determine when new pages in a\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("continuous");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" grid should be requested, and the interface text in a non-");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("continuous");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" grid.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 244,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-grid.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-grid");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A dual-pane, master-detail split panel grid.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template: demos/sl-grid.hbs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-grid\n    columns=columns\n    content=sortedModel\n    detailComponent=\"demos/sl-grid-detail\"\n    detailFooterComponent=\"demos/sl-grid-detail-footer\"\n    detailHeaderComponent=\"demos/sl-grid-detail-header\"\n    fixedHeader=true\n    footerPath=\"demos/sl-grid/footer\"\n    height=\"21em\"\n    rowActions=rowActions\n    sendLog=(action \"logName\")\n    sortColumn=\"sortColumn\"\n    totalCount=totalCount\n}}\n    <h3>Colors</h3>\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-grid}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("code");
        var el5 = dom.createTextNode("sendLog");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" action in the above template is not a built-in action of sl-grid, but is defined in the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("code");
        var el5 = dom.createTextNode("rowActions");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" property specifically for this example. See the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("code");
        var el5 = dom.createTextNode("rowActions");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" property documentation for a more in-depth example.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template: components/demos/sl-grid-detail-footer.hbs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{model.hexCode}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template: components/demos/sl-grid-detail-header.hbs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("Color: ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{model.name}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template: components/demos/sl-grid-detail.hbs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("<h3>");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{model.name}} fruit: ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{model.fruit}}</h3>");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template: demos/sl-grid/footer.hbs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("Viewing ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{content.length}} of ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{totalCount}} Colors");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Controller");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("columns: [\n    {\n        title: 'Color',\n        valuePath: 'name'\n    },\n    {\n        headerClass: 'smallWidth',\n        primary: true,\n        sortable: true,\n        sorted: 'asc',\n        title: 'Fruit',\n        valuePath: 'fruit'\n    },\n    {\n        headerClass: 'smallWidth',\n        sortable: true,\n        title: 'Hex Code',\n        valuePath: 'hexCode'\n    }\n],\n\nrowActions: [\n    {\n        action: 'sendLog',\n        label: 'Log'\n    }\n]");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-grid");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-grid.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [20]);
        var morphs = new Array(19);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        morphs[4] = dom.createMorphAt(element0,7,7);
        morphs[5] = dom.createMorphAt(element0,9,9);
        morphs[6] = dom.createMorphAt(element0,11,11);
        morphs[7] = dom.createMorphAt(element0,13,13);
        morphs[8] = dom.createMorphAt(element0,15,15);
        morphs[9] = dom.createMorphAt(element0,17,17);
        morphs[10] = dom.createMorphAt(element0,19,19);
        morphs[11] = dom.createMorphAt(element0,21,21);
        morphs[12] = dom.createMorphAt(element0,23,23);
        morphs[13] = dom.createMorphAt(element0,25,25);
        morphs[14] = dom.createMorphAt(element0,27,27);
        morphs[15] = dom.createMorphAt(element0,29,29);
        morphs[16] = dom.createMorphAt(element0,31,31);
        morphs[17] = dom.createMorphAt(element0,33,33);
        morphs[18] = dom.createMorphAt(element0,35,35);
        return morphs;
      },
      statements: [
        ["block","sl-grid",[],["columns",["subexpr","@mut",[["get","columns",["loc",[null,[74,20],[74,27]]]]],[],[]],"content",["subexpr","@mut",[["get","sortedModel",["loc",[null,[75,20],[75,31]]]]],[],[]],"detailComponent","demos/sl-grid-detail","detailFooterComponent","demos/sl-grid-detail-footer","detailHeaderComponent","demos/sl-grid-detail-header","fixedHeader",true,"footerPath","demos/sl-grid/footer","height","21em","rowActions",["subexpr","@mut",[["get","rowActions",["loc",[null,[82,23],[82,33]]]]],[],[]],"sendLog",["subexpr","action",["logName"],[],["loc",[null,[83,20],[83,38]]]],"sortColumn","sortColumn","totalCount",["subexpr","@mut",[["get","totalCount",["loc",[null,[85,23],[85,33]]]]],[],[]]],0,null,["loc",[null,[73,8],[88,20]]]],
        ["block","property-text",[],["name","columns","type","Array","required",true],1,null,["loc",[null,[108,4],[120,22]]]],
        ["block","property-text",[],["name","content","type","Array","required",true],2,null,["loc",[null,[122,4],[124,22]]]],
        ["block","property-text",[],["name","actionButtonLabel","type","String","default","\"Actions\""],3,null,["loc",[null,[126,4],[128,22]]]],
        ["block","property-text",[],["name","continuous","type","Boolean","default","false"],4,null,["loc",[null,[130,4],[132,22]]]],
        ["block","property-text",[],["name","detailComponent","type","String"],5,null,["loc",[null,[134,4],[136,22]]]],
        ["block","property-text",[],["name","detailFooterComponent","type","String"],6,null,["loc",[null,[138,4],[140,22]]]],
        ["block","property-text",[],["name","detailHeaderComponent","type","String"],7,null,["loc",[null,[142,4],[144,22]]]],
        ["block","property-text",[],["name","filterButtonLabel","type","String","default","Filter"],8,null,["loc",[null,[146,4],[148,22]]]],
        ["block","property-text",[],["name","filterComponent","type","String"],9,null,["loc",[null,[150,4],[152,22]]]],
        ["block","property-text",[],["name","fixedHeader","type","Boolean","default","false"],10,null,["loc",[null,[154,4],[156,22]]]],
        ["block","property-text",[],["name","footerPath","type","String"],11,null,["loc",[null,[158,4],[160,22]]]],
        ["block","property-text",[],["name","height","type","Number/String","default","\"\""],12,null,["loc",[null,[162,4],[164,22]]]],
        ["block","property-text",[],["name","pageSize","type","Number","default","25"],13,null,["loc",[null,[166,4],[170,22]]]],
        ["block","property-text",[],["name","requestData","type","String"],14,null,["loc",[null,[172,4],[178,22]]]],
        ["block","property-text",[],["name","rowActions","type","Array"],15,null,["loc",[null,[180,4],[225,22]]]],
        ["block","property-text",[],["name","rowClick","type","String"],16,null,["loc",[null,[227,4],[231,22]]]],
        ["block","property-text",[],["name","sortColumn","type","String"],17,null,["loc",[null,[233,4],[237,22]]]],
        ["block","property-text",[],["name","totalCount","type","Number"],18,null,["loc",[null,[239,4],[242,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18]
    };
  }()));

});
define('dummy/templates/demos/sl-input', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 227,
              "column": 4
            },
            "end": {
              "line": 229,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An action to trigger when the input loses focus.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 231,
              "column": 4
            },
            "end": {
              "line": 234,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the input field will be styled similarly to inline text, but\n        when clicked will allow editing.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 236,
              "column": 4
            },
            "end": {
              "line": 238,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, input is disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 240,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text to display below the input element.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        String for label text above the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 248,
              "column": 4
            },
            "end": {
              "line": 250,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 252,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect optional status. This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("placeholder");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 260,
              "column": 4
            },
            "end": {
              "line": 262,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 264,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("readonly");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 268,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect required status. This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 272,
              "column": 4
            },
            "end": {
              "line": 274,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The string lookup for each suggestion's \"name\" value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 276,
              "column": 4
            },
            "end": {
              "line": 278,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Array of objects used as typeahead suggestions. Each object must contain a key whose name matches the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("suggestionNamePath");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property value, which is \"name\" by default.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 280,
              "column": 4
            },
            "end": {
              "line": 282,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 284,
              "column": 4
            },
            "end": {
              "line": 286,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("type");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute for the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 288,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-input.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bound value of the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 292,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-input.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-input");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A wrapper component for <input>. See ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/css/#forms");
        var el3 = dom.createTextNode("Bootstrap - Forms");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" for details.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    label=\"Input with label and helpText\"\n    helpText=\"Help text content goes here\"\n    placeholder=\"Enter some text\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    label=\"Input with typeahead suggestions\"\n    placeholder=\"Enter a Name\"\n    suggestions=names\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Controller");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("model: [\n    names: [\n        \"Jeff\",\n        \"Michael\",\n        \"Jeremy\"\n    ]\n]");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    label=\"Input with typeahead suggestions using suggestionNamePath\"\n    placeholder=\"Enter a color\"\n    suggestions=colors\n    suggestionNamePath=\"id\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Controller");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("model: [\n    colors: [\n        { id: 'Black' },\n        { id: 'Blue' },\n        { id: 'Gray' },\n        { id: 'Green' },\n        { id: 'Orange' },\n        { id: 'Purple' },\n        { id: 'Red' },\n        { id: 'White' },\n        { id: \"Yellow\" }\n    ]\n]");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    label=\"Disabled input\"\n    disabled=true\n    placeholder=\"You can't enter anything here\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    label=\"Readonly input\"\n    readonly=true\n    value=\"Look but don't touch!\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    label=\"Required input\"\n    required=true\n    placeholder=\"You'd better enter something here\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    label=\"Optional input\"\n    optional=true\n    placeholder=\"Meh, whatev\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input\n    clickToEdit=true\n    label=\"Click-to-edit input\"\n    placeholder=\"Enter value\"\n    value=\"Initial value\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-component-input-id");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-input-based");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-input");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-input.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [40]);
        var morphs = new Array(24);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [12, 3]),3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [14, 3]),3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [16, 3]),3,3);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [18, 3]),3,3);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [20, 3]),3,3);
        morphs[7] = dom.createMorphAt(dom.childAt(fragment, [22, 3]),3,3);
        morphs[8] = dom.createMorphAt(element0,1,1);
        morphs[9] = dom.createMorphAt(element0,3,3);
        morphs[10] = dom.createMorphAt(element0,5,5);
        morphs[11] = dom.createMorphAt(element0,7,7);
        morphs[12] = dom.createMorphAt(element0,9,9);
        morphs[13] = dom.createMorphAt(element0,11,11);
        morphs[14] = dom.createMorphAt(element0,13,13);
        morphs[15] = dom.createMorphAt(element0,15,15);
        morphs[16] = dom.createMorphAt(element0,17,17);
        morphs[17] = dom.createMorphAt(element0,19,19);
        morphs[18] = dom.createMorphAt(element0,21,21);
        morphs[19] = dom.createMorphAt(element0,23,23);
        morphs[20] = dom.createMorphAt(element0,25,25);
        morphs[21] = dom.createMorphAt(element0,27,27);
        morphs[22] = dom.createMorphAt(element0,29,29);
        morphs[23] = dom.createMorphAt(element0,31,31);
        return morphs;
      },
      statements: [
        ["inline","sl-input",[],["label","Input with label and helpText","helpText","Help text content goes here","placeholder","Enter some text"],["loc",[null,[20,8],[24,10]]]],
        ["inline","sl-input",[],["label","Input with typeahead suggestions","placeholder","Enter a Name","suggestions",["subexpr","@mut",[["get","names",["loc",[null,[51,24],[51,29]]]]],[],[]]],["loc",[null,[48,8],[52,10]]]],
        ["inline","sl-input",[],["label","Input with typeahead suggestions using suggestionNamePath","placeholder","Enter a color","suggestions",["subexpr","@mut",[["get","colors",["loc",[null,[86,24],[86,30]]]]],[],[]],"suggestionNamePath","id","value",["subexpr","@mut",[["get","colorValue",["loc",[null,[88,18],[88,28]]]]],[],[]]],["loc",[null,[83,8],[89,10]]]],
        ["inline","sl-input",[],["label","Disabled input","disabled",true,"placeholder","You can't enter anything here"],["loc",[null,[105,8],[109,10]]]],
        ["inline","sl-input",[],["label","Readonly input","readonly",true,"value","Look but don't touch!"],["loc",[null,[125,8],[129,10]]]],
        ["inline","sl-input",[],["label","Required input","required",true,"placeholder","You'd better enter something here"],["loc",[null,[145,8],[149,10]]]],
        ["inline","sl-input",[],["label","Optional input","optional",true,"placeholder","Meh, whatev"],["loc",[null,[165,8],[169,10]]]],
        ["inline","sl-input",[],["clickToEdit",true,"label","Click-to-edit input","placeholder","Enter value","value","Initial value"],["loc",[null,[186,8],[191,10]]]],
        ["block","property-text",[],["name","blur","type","String"],0,null,["loc",[null,[227,4],[229,22]]]],
        ["block","property-text",[],["name","clickToEdit","type","Boolean","default","false"],1,null,["loc",[null,[231,4],[234,22]]]],
        ["block","property-text",[],["name","disabled","type","Boolean","default","false"],2,null,["loc",[null,[236,4],[238,22]]]],
        ["block","property-text",[],["name","helpText","type","String"],3,null,["loc",[null,[240,4],[242,22]]]],
        ["block","property-text",[],["name","label","type","String"],4,null,["loc",[null,[244,4],[246,22]]]],
        ["block","property-text",[],["name","name","type","String"],5,null,["loc",[null,[248,4],[250,22]]]],
        ["block","property-text",[],["name","optional","type","Boolean","default","false"],6,null,["loc",[null,[252,4],[254,22]]]],
        ["block","property-text",[],["name","placeholder","type","String"],7,null,["loc",[null,[256,4],[258,22]]]],
        ["block","property-text",[],["name","popover","type","String"],8,null,["loc",[null,[260,4],[262,22]]]],
        ["block","property-text",[],["name","readonly","type","Boolean","default","false"],9,null,["loc",[null,[264,4],[266,22]]]],
        ["block","property-text",[],["name","required","type","Boolean","default","false"],10,null,["loc",[null,[268,4],[270,22]]]],
        ["block","property-text",[],["name","suggestionNamePath","type","String","default","\"name\""],11,null,["loc",[null,[272,4],[274,22]]]],
        ["block","property-text",[],["name","suggestions","type","Array"],12,null,["loc",[null,[276,4],[278,22]]]],
        ["block","property-text",[],["name","title","type","String"],13,null,["loc",[null,[280,4],[282,22]]]],
        ["block","property-text",[],["name","type","type","String","default","\"text\""],14,null,["loc",[null,[284,4],[286,22]]]],
        ["block","property-text",[],["name","value","type","String"],15,null,["loc",[null,[288,4],[290,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15]
    };
  }()));

});
define('dummy/templates/demos/sl-menu', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name of an action to trigger whenever a sub-menu item's action is triggered. The action should accept ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("em");
          var el2 = dom.createTextNode("actionName");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" and ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("em");
          var el2 = dom.createTextNode("data");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" from the menu item.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the menu includes a show-all menu item.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("The array of menu items, each object member containing the following properties:");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("action");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - A ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("string");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" name of an action to pass back to the controller using the ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("code");
          var el4 = dom.createTextNode("action");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" component binding");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("data");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - Any value to pass up through the action");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("label");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("String");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" text to display on the menu item link");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("items");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" - An ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("em");
          var el4 = dom.createTextNode("array");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" for sub-menu items on this menu item (recursive structure)");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The name to register a stream with on the streamService. See \"Stream Actions\" below.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 90,
              "column": 0
            },
            "end": {
              "line": 92,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Trigger the currently selected item's ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("action");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(", sending its optional ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("data");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 94,
              "column": 0
            },
            "end": {
              "line": 96,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Trigger hiding all of the sub-menus\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 98,
              "column": 0
            },
            "end": {
              "line": 100,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Select an item by its index ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("em");
          var el2 = dom.createTextNode("{Number}");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" in the current selected context\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 102,
              "column": 0
            },
            "end": {
              "line": 107,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("In the top-level menu, select the first item in the current selection's sub-menu");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("In a sub-menu, select the next sibling item, wrapping around to the top when necessary");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 109,
              "column": 0
            },
            "end": {
              "line": 114,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("In the top-level menu, select the previous sibling item");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("In a sub-menu, select the parent menu");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 116,
              "column": 0
            },
            "end": {
              "line": 118,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Select the next sibling menu item, wrapping around the list when necessary\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 120,
              "column": 0
            },
            "end": {
              "line": 122,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Select the parent menu item\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 124,
              "column": 0
            },
            "end": {
              "line": 126,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Select the previous sibling menu item, wrapping around the list when necessary\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 128,
              "column": 0
            },
            "end": {
              "line": 133,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("In the top-level menu, select the next sibling item");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("In a sub-menu, select the first item in the current item's sub-menu");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 135,
              "column": 0
            },
            "end": {
              "line": 137,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Select the first item in the current item's sub-menu\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 139,
              "column": 0
            },
            "end": {
              "line": 145,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("In the top-level menu, do not select anything different");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("On the first item of the first level of sub-menu, select the parent item");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("On any other sub-menu item, select the previous sibling, wrapping around the list when necessary");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 147,
              "column": 0
            },
            "end": {
              "line": 149,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-menu.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Trigger showing all of the menu items\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 150,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-menu.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-menu");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A component to build complex menu hierarchies.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-menu\n    action=\"doSomething\"\n    allowShowAll=true\n    items=menuItems\n    streamName=menuStreamName\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("This demo app showcases the following keybindings set up to trigger stream actions:");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Escape key: hideAll");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Key 0: showAll");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Keys 1-9: select( 0-8 )");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Tab: selectNext");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Shift+tab: selectPrevious");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Enter: doAction");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Up key: selectUp");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Left key: selectLeft");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Right key: selectRight");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createTextNode("Down key: selectDown");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createElement("strong");
        var el4 = dom.createTextNode("-");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" key: selectSubMenu");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-menu");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-menu.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1,"id","stream-actions");
        var el2 = dom.createTextNode("Stream Actions");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("If the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("streamName");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" property is set on the component, it will register a stream named that value, listen for actions matching the following names, and act accordingly.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [24]);
        var morphs = new Array(17);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        morphs[4] = dom.createMorphAt(element0,7,7);
        morphs[5] = dom.createMorphAt(fragment,32,32,contextualElement);
        morphs[6] = dom.createMorphAt(fragment,34,34,contextualElement);
        morphs[7] = dom.createMorphAt(fragment,36,36,contextualElement);
        morphs[8] = dom.createMorphAt(fragment,38,38,contextualElement);
        morphs[9] = dom.createMorphAt(fragment,40,40,contextualElement);
        morphs[10] = dom.createMorphAt(fragment,42,42,contextualElement);
        morphs[11] = dom.createMorphAt(fragment,44,44,contextualElement);
        morphs[12] = dom.createMorphAt(fragment,46,46,contextualElement);
        morphs[13] = dom.createMorphAt(fragment,48,48,contextualElement);
        morphs[14] = dom.createMorphAt(fragment,50,50,contextualElement);
        morphs[15] = dom.createMorphAt(fragment,52,52,contextualElement);
        morphs[16] = dom.createMorphAt(fragment,54,54,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","sl-menu",[],["action","doSomething","allowShowAll",true,"items",["subexpr","@mut",[["get","menuItems",["loc",[null,[24,18],[24,27]]]]],[],[]],"streamName",["subexpr","@mut",[["get","menuStreamName",["loc",[null,[25,23],[25,37]]]]],[],[]]],["loc",[null,[21,8],[26,10]]]],
        ["block","property-text",[],["name","action","type","String"],0,null,["loc",[null,[61,4],[63,22]]]],
        ["block","property-text",[],["name","allowShowAll","type","Boolean","default","false"],1,null,["loc",[null,[65,4],[67,22]]]],
        ["block","property-text",[],["name","items","type","Array"],2,null,["loc",[null,[69,4],[77,22]]]],
        ["block","property-text",[],["name","streamName","type","String"],3,null,["loc",[null,[79,4],[81,22]]]],
        ["block","property-text",[],["name","doAction"],4,null,["loc",[null,[90,0],[92,18]]]],
        ["block","property-text",[],["name","hideAll"],5,null,["loc",[null,[94,0],[96,18]]]],
        ["block","property-text",[],["name","select"],6,null,["loc",[null,[98,0],[100,18]]]],
        ["block","property-text",[],["name","selectDown"],7,null,["loc",[null,[102,0],[107,18]]]],
        ["block","property-text",[],["name","selectLeft"],8,null,["loc",[null,[109,0],[114,18]]]],
        ["block","property-text",[],["name","selectNext"],9,null,["loc",[null,[116,0],[118,18]]]],
        ["block","property-text",[],["name","selectParent"],10,null,["loc",[null,[120,0],[122,18]]]],
        ["block","property-text",[],["name","selectPrevious"],11,null,["loc",[null,[124,0],[126,18]]]],
        ["block","property-text",[],["name","selectRight"],12,null,["loc",[null,[128,0],[133,18]]]],
        ["block","property-text",[],["name","selectSubMenu"],13,null,["loc",[null,[135,0],[137,18]]]],
        ["block","property-text",[],["name","selectUp"],14,null,["loc",[null,[139,0],[145,18]]]],
        ["block","property-text",[],["name","showAll"],15,null,["loc",[null,[147,0],[149,18]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15]
    };
  }()));

});
define('dummy/templates/demos/sl-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 12
              },
              "end": {
                "line": 28,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/demos/sl-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("A simple modal example");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 8
            },
            "end": {
              "line": 31,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","sl-modal-header",[],["title","Simple Example","ariaLabelledBy",["subexpr","@mut",[["get","modal.ariaLabelledBy",["loc",[null,[23,31],[23,51]]]]],[],[]]],["loc",[null,[21,12],[24,14]]]],
          ["block","sl-modal-body",[],[],0,null,["loc",[null,[26,12],[28,30]]]],
          ["content","sl-modal-footer",["loc",[null,[30,12],[30,31]]]]
        ],
        locals: ["modal"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 4
              },
              "end": {
                "line": 70,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/demos/sl-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","close");
            dom.setAttribute(el1,"data-dismiss","modal");
            dom.setAttribute(el1,"type","button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"aria-hidden","true");
            dom.setAttribute(el2,"class","fa fa-close");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","sr-only");
            var el3 = dom.createTextNode("close");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("custom header");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'id');
            return morphs;
          },
          statements: [
            ["attribute","id",["get","modal.ariaLabelledBy",["loc",[null,[69,39],[69,59]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 72,
                "column": 4
              },
              "end": {
                "line": 74,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/demos/sl-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("modal with a custom header close button");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","sl-modal-header",[],[],0,null,["loc",[null,[64,4],[70,24]]]],
          ["block","sl-modal-body",[],[],1,null,["loc",[null,[72,4],[74,22]]]],
          ["content","sl-modal-footer",["loc",[null,[76,4],[76,23]]]]
        ],
        locals: ["modal"],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 109,
                "column": 16
              },
              "end": {
                "line": 111,
                "column": 16
              }
            },
            "moduleName": "dummy/templates/demos/sl-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("Modal with multiple buttons in the footer");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 113,
                "column": 16
              },
              "end": {
                "line": 116,
                "column": 16
              }
            },
            "moduleName": "dummy/templates/demos/sl-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","button");
            dom.setAttribute(el1,"class","btn btn-default");
            dom.setAttribute(el1,"data-dismiss","modal");
            var el2 = dom.createTextNode("Close");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","button");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Save changes");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 12
            },
            "end": {
              "line": 117,
              "column": 12
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","sl-modal-header",[],["title","Custom Footer"],["loc",[null,[107,16],[107,57]]]],
          ["block","sl-modal-body",[],[],0,null,["loc",[null,[109,16],[111,34]]]],
          ["block","sl-modal-footer",[],[],1,null,["loc",[null,[113,16],[116,36]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 133,
              "column": 41
            },
            "end": {
              "line": 133,
              "column": 80
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-button");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 152,
              "column": 0
            },
            "end": {
              "line": 154,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Action to call after modal is shown.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 156,
              "column": 0
            },
            "end": {
              "line": 158,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Action to call after modal is shown.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 160,
              "column": 0
            },
            "end": {
              "line": 162,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Whether to animate opening and closing of modal.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 164,
              "column": 0
            },
            "end": {
              "line": 166,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Whether to show backdrop.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 168,
              "column": 0
            },
            "end": {
              "line": 170,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Action to call after modal is shown.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 172,
              "column": 0
            },
            "end": {
              "line": 174,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Action to call after modal is shown.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 176,
              "column": 0
            },
            "end": {
              "line": 178,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Bootstrap width size of the modal, designated by a size value; \"small\", \"medium\" (default) or \"large\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 180,
              "column": 0
            },
            "end": {
              "line": 182,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    The name to register a stream with on the streamService. See \"Stream Actions\" below.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 199,
              "column": 0
            },
            "end": {
              "line": 201,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Title of the modal.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 228,
              "column": 0
            },
            "end": {
              "line": 230,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Close button text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 235,
              "column": 0
            },
            "end": {
              "line": 237,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    This attribute is automatically rendered as ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("role=\"dialog\"");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 239,
              "column": 0
            },
            "end": {
              "line": 241,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    This attribute is automatically rendered as ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("aria-hidden=\"true\"");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 243,
              "column": 0
            },
            "end": {
              "line": 266,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode(" This attribute is automatically rendered as ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("aria-labelledby=\"X\"");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(", where X is a string composed of the value modalTitle- followed by a random number.  If you set the context ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("as |modal|");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" in the sl-modal opening handlebar statement and pass in ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("title=\"Simple Example\"");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" and ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("ariaLabelledBy=modal.ariaLabelledBy");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("to the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("sl-modal-header");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" component, the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("aria-labelledby");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" attribute will automatically point to the id of the title element. If you do not pass in a title and are ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("em");
          var el3 = dom.createTextNode("not");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" using a custom header, the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("aria-labelledby");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" attribute will not be present.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("If you would like to use a custom header you will need to identify a section of text that serves as the label for this dialog and give it the same id value assigned to the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("aria-labelledby");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" attribute.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("The example below illustrates how to bind the value of the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("ariaLabelledBy");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" property to the id of a target element using ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("id=");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("{{modal.ariaLabelledBy}}");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(".");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("pre");
          var el2 = dom.createTextNode("{{#sl-modal name=\"labelledbyDemo\" as |modal|}}\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{#sl-modal-header}}\n        <button class=\"close\" data-dismiss=\"modal\" type=\"button\">\n            <span aria-hidden=\"true\" class=\"fa fa-close\"></span>\n            <span class=\"sr-only\">Close</span>\n        </button>\n        <span class=\"modal-title\" id=");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{modal.ariaLabelledBy}}>Custom Header</span>\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{/sl-modal-header}}\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{#sl-modal-body}}\n       <p>Modal with a custom header</p>\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{/sl-modal-body}}\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{sl-modal-footer}}\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{/sl-modal}}\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 268,
              "column": 0
            },
            "end": {
              "line": 283,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("The ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("ariaDescribedBy");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" property can be set on the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("sl-modal");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" component. Once this property is set, you will need to provide an element with a section of text whose ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("id");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" attribute corresponds to the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("ariaDescribedBy");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" property set on the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("sl-modal");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" component, as shown in the code below.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("pre");
          var el2 = dom.createTextNode("{{#sl-modal name=\"describedbyDemo\" ariaDescribedBy=\"modalDescription\"}}\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{#sl-modal-header}}\n       <span id=\"modalDescription\">A description of the modal</span>\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{/sl-modal-header}}\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{#sl-modal-body}}\n       <p>Modal showing describedby usage</p>\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{/sl-modal-body}}\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{sl-modal-footer}}\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("{{/sl-modal}}\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child18 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 291,
              "column": 0
            },
            "end": {
              "line": 293,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Trigger to hide the modal\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child19 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 295,
              "column": 0
            },
            "end": {
              "line": 297,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/demos/sl-modal.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Trigger to show the modal\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 298,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-modal");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A modal component used to wrap content in. Based on ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/javascript/#modals");
        var el3 = dom.createTextNode("Bootstrap - Modals");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"id","simple");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-8");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h6");
        var el5 = dom.createTextNode("Simple usage");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createTextNode("{{#sl-modal streamName=\"demoModal\" size=\"small\" as |modal|}}\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{sl-modal-header title=\"Simple Example\" ariaLabelledBy=modal.ariaLabelledBy}}\n\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{#sl-modal-body}}\n         <p>A simple modal example</p>\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal-body}}\n\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{sl-modal-footer}}\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal}} ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-4");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h6");
        var el5 = dom.createTextNode("Click to Show Component");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-8");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h6");
        var el5 = dom.createTextNode("Custom header");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createTextNode("{{#sl-modal streamName=\"customHeader\" size=\"large\" as |modal|}}\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{#sl-modal-header}}\n        <button class=\"close\" data-dismiss=\"modal\" type=\"button\">\n            <span aria-hidden=\"true\" class=\"fa fa-close\"></span>\n            <span class=\"sr-only\">Close</span>\n        </button>\n        <span class=\"modal-title\" id=");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{modal.ariaLabelledBy}}>Custom Header</span>\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal-header}}\n\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{#sl-modal-body}}\n         <p>A custom header and close button</p>\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal-body}}\n\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{sl-modal-footer}}\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal}}");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-4");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h6");
        var el5 = dom.createTextNode("Click to Show Component");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-8");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h6");
        var el5 = dom.createTextNode("Custom footer with multiple buttons");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createTextNode("{{#sl-modal streamName=\"customFooter\"}}\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{sl-modal-header title=\"Custom Footer\"}}\n\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{#sl-modal-body}}\n         <p>Custom footer with multiple buttons</p>\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal-body}}\n\n    ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{#sl-modal-footer}}\n         <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n         <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n   ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal-footer}}\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("{{/sl-modal}}");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-lg-4");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h6");
        var el5 = dom.createTextNode("Click to Show Component");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        var el3 = dom.createTextNode("Triggering a modal to open using a sl-button");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("The code below shows how to use a ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" to trigger a modal with a name of \"demo\" to open, when clicked.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Pass in the name of the modal as the value to the ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("showModalWithStreamName");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" property.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("pre");
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("{{sl-button showModalWithStreamName=\"demo\" label=\"Open Modal\"}}");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-modal Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-modal");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-modal.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-modal Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode(" sl-modal-header Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-modal-header");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-modal-header.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-modal-header Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-modal-body Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-modal-body");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-modal-body.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-modal-footer Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-modal-footer");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-modal-footer.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-modal-footer Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("ARIA Support");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Stream Actions");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("If the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("streamName");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" property is set on the component, it will register a stream named that value, listen for actions matching the following names, and act accordingly.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [8, 1]);
        var element2 = dom.childAt(fragment, [10, 1]);
        var element3 = dom.childAt(fragment, [12, 1]);
        var morphs = new Array(23);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),5,5);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]),5,5);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]),3,3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]),5,5);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]),3,3);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [16, 3]),1,1);
        morphs[7] = dom.createMorphAt(fragment,28,28,contextualElement);
        morphs[8] = dom.createMorphAt(fragment,30,30,contextualElement);
        morphs[9] = dom.createMorphAt(fragment,32,32,contextualElement);
        morphs[10] = dom.createMorphAt(fragment,34,34,contextualElement);
        morphs[11] = dom.createMorphAt(fragment,36,36,contextualElement);
        morphs[12] = dom.createMorphAt(fragment,38,38,contextualElement);
        morphs[13] = dom.createMorphAt(fragment,40,40,contextualElement);
        morphs[14] = dom.createMorphAt(fragment,42,42,contextualElement);
        morphs[15] = dom.createMorphAt(fragment,54,54,contextualElement);
        morphs[16] = dom.createMorphAt(fragment,72,72,contextualElement);
        morphs[17] = dom.createMorphAt(fragment,78,78,contextualElement);
        morphs[18] = dom.createMorphAt(fragment,80,80,contextualElement);
        morphs[19] = dom.createMorphAt(fragment,82,82,contextualElement);
        morphs[20] = dom.createMorphAt(fragment,84,84,contextualElement);
        morphs[21] = dom.createMorphAt(fragment,92,92,contextualElement);
        morphs[22] = dom.createMorphAt(fragment,94,94,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","sl-modal",[],["streamName","demoModal","size","small"],0,null,["loc",[null,[20,8],[31,21]]]],
        ["inline","sl-button",[],["label","Open Modal","showModalWithStreamName","demoModal"],["loc",[null,[35,12],[38,14]]]],
        ["block","sl-modal",[],["streamName","customHeader","size","large"],1,null,["loc",[null,[63,0],[77,13]]]],
        ["inline","sl-button",[],["label","Open Modal","showModalWithStreamName","customHeader"],["loc",[null,[81,12],[84,14]]]],
        ["block","sl-modal",[],["streamName","customFooter"],2,null,["loc",[null,[106,12],[117,25]]]],
        ["inline","sl-button",[],["label","Open Modal","showModalWithStreamName","customFooter"],["loc",[null,[121,12],[124,14]]]],
        ["block","link-to",["demos.sl-button"],[],3,null,["loc",[null,[133,41],[133,92]]]],
        ["block","property-text",[],["name","afterHide","type","Function"],4,null,["loc",[null,[152,0],[154,18]]]],
        ["block","property-text",[],["name","afterShow","type","Function"],5,null,["loc",[null,[156,0],[158,18]]]],
        ["block","property-text",[],["name","animated","type","Boolean","default","true"],6,null,["loc",[null,[160,0],[162,18]]]],
        ["block","property-text",[],["name","backdrop","type","Boolean","default","true"],7,null,["loc",[null,[164,0],[166,18]]]],
        ["block","property-text",[],["name","beforeHide","type","Function"],8,null,["loc",[null,[168,0],[170,18]]]],
        ["block","property-text",[],["name","beforeShow","type","Function"],9,null,["loc",[null,[172,0],[174,18]]]],
        ["block","property-text",[],["name","size","type","String","default","\"medium\""],10,null,["loc",[null,[176,0],[178,18]]]],
        ["block","property-text",[],["name","streamName","type","String"],11,null,["loc",[null,[180,0],[182,18]]]],
        ["block","property-text",[],["name","title","type","String"],12,null,["loc",[null,[199,0],[201,18]]]],
        ["block","property-text",[],["name","buttonText","type","String","default","Close"],13,null,["loc",[null,[228,0],[230,18]]]],
        ["block","property-text",[],["name","role"],14,null,["loc",[null,[235,0],[237,18]]]],
        ["block","property-text",[],["name","aria-hidden"],15,null,["loc",[null,[239,0],[241,18]]]],
        ["block","property-text",[],["name","aria-labelledby"],16,null,["loc",[null,[243,0],[266,18]]]],
        ["block","property-text",[],["name","aria-describedby"],17,null,["loc",[null,[268,0],[283,18]]]],
        ["block","property-text",[],["name","hide"],18,null,["loc",[null,[291,0],[293,18]]]],
        ["block","property-text",[],["name","show"],19,null,["loc",[null,[295,0],[297,18]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19]
    };
  }()));

});
define('dummy/templates/demos/sl-pagination', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-pagination.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The total number of pages.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-pagination.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the state of the pagination component will not change.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-pagination.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An action triggered when the currentPage value is changed. The page number changed to is sent to the action.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-pagination.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The current page bound value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-pagination.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Whether to use the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","https://github.com/SpikedKira/jQuery.fn.twbsResponsivePagination");
          var el2 = dom.createTextNode("responsive jQuery plugin");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 57,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-pagination.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An action triggered when the page is incremented successfully. The action is passed the new page number.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 4
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-pagination.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        An action triggered when the page is decremented successfully. The action is passed the new page number.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 63,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-pagination.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-pagination");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A component used for displaying and controlling pages of content.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-pagination changePage=\"changePage\" totalPages=20}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-pagination");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-pagination.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [20]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        morphs[4] = dom.createMorphAt(element0,7,7);
        morphs[5] = dom.createMorphAt(element0,9,9);
        morphs[6] = dom.createMorphAt(element0,11,11);
        morphs[7] = dom.createMorphAt(element0,13,13);
        return morphs;
      },
      statements: [
        ["inline","sl-pagination",[],["changePage","changePage","totalPages",20],["loc",[null,[15,8],[15,63]]]],
        ["block","property-text",[],["name","totalPages","required",true,"type","Number"],0,null,["loc",[null,[35,4],[37,22]]]],
        ["block","property-text",[],["name","busy","type","Boolean","default","false"],1,null,["loc",[null,[39,4],[41,22]]]],
        ["block","property-text",[],["name","changePage","type","String"],2,null,["loc",[null,[43,4],[45,22]]]],
        ["block","property-text",[],["name","currentPage","type","Number","default","1"],3,null,["loc",[null,[47,4],[49,22]]]],
        ["block","property-text",[],["name","isResponsive","type","Boolean","default","true"],4,null,["loc",[null,[51,4],[53,22]]]],
        ["block","property-text",[],["name","nextPage","type","String"],5,null,["loc",[null,[55,4],[57,22]]]],
        ["block","property-text",[],["name","previousPage","type","String"],6,null,["loc",[null,[59,4],[61,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('dummy/templates/demos/sl-panel', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 8
            },
            "end": {
              "line": 20,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Hello world!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Hello world!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Hello world!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text for the panel footer.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 78,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text for the panel heading.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the panel body becomes masked and a loading icon appears.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The Bootstrap contextual theme string to style the panel with.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 88,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-panel.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-panel");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A basic content wrapper for ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/components/#panels");
        var el3 = dom.createTextNode("Bootstrap - Panels");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-panel heading=\"Test Panel\" theme=\"primary\"}}\n    <p>Hello world!</p>\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-panel}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-panel footer=\"Test Panel\"}}\n    <p>Hello world!</p>\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-panel}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-panel heading=\"Test Panel\" loading=true}}\n    <p>Hello world!</p>\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-panel}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-panel");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-panel.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [24]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [12, 3]),3,3);
        morphs[3] = dom.createMorphAt(element0,1,1);
        morphs[4] = dom.createMorphAt(element0,3,3);
        morphs[5] = dom.createMorphAt(element0,5,5);
        morphs[6] = dom.createMorphAt(element0,7,7);
        return morphs;
      },
      statements: [
        ["block","sl-panel",[],["heading","Test Panel","theme","primary"],0,null,["loc",[null,[18,8],[20,21]]]],
        ["block","sl-panel",[],["footer","Test Panel"],1,null,["loc",[null,[34,8],[36,21]]]],
        ["block","sl-panel",[],["heading","Test Panel","loading",true],2,null,["loc",[null,[50,8],[52,21]]]],
        ["block","property-text",[],["name","footer","type","String"],3,null,["loc",[null,[72,4],[74,22]]]],
        ["block","property-text",[],["name","heading","type","String"],4,null,["loc",[null,[76,4],[78,22]]]],
        ["block","property-text",[],["name","loading","type","Boolean","default","false"],5,null,["loc",[null,[80,4],[82,22]]]],
        ["block","property-text",[],["name","theme","type","String","default","\"default\""],6,null,["loc",[null,[84,4],[86,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('dummy/templates/demos/sl-progress-bar', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the striped progress bar will be animated.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, label text is shown over the bar.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the progress bar will be striped.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 123,
              "column": 4
            },
            "end": {
              "line": 125,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The Bootstrap contextual theme string to style the progress bar with.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 127,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip content text, or popover title text when ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("popover");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property is set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 131,
              "column": 4
            },
            "end": {
              "line": 133,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The bound integer value for the progress (1-100).\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 135,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-progress-bar.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-progress-bar");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("Component for integer-based progress bar.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-progress-bar label=true value=60}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-progress-bar label=true theme=\"success\" value=40}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-progress-bar striped=true theme=\"warning\" value=70}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-progress-bar\n    animated=true\n    label=true\n    striped=true\n    theme=\"danger\"\n    value=90\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-input type=\"Number\" value=dynamicValue}}\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-progress-bar label=true value=dynamicValue}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        Dynamic value input: ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        sl-tooltip-enabled\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-progress-bar");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-progress-bar.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","group-list");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [16, 3]);
        var element1 = dom.childAt(fragment, [34]);
        var morphs = new Array(13);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [12, 3]),3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [14, 3]),3,3);
        morphs[4] = dom.createMorphAt(element0,3,3);
        morphs[5] = dom.createMorphAt(element0,5,5);
        morphs[6] = dom.createMorphAt(element1,1,1);
        morphs[7] = dom.createMorphAt(element1,3,3);
        morphs[8] = dom.createMorphAt(element1,5,5);
        morphs[9] = dom.createMorphAt(element1,7,7);
        morphs[10] = dom.createMorphAt(element1,9,9);
        morphs[11] = dom.createMorphAt(element1,11,11);
        morphs[12] = dom.createMorphAt(element1,13,13);
        return morphs;
      },
      statements: [
        ["inline","sl-progress-bar",[],["label",true,"value",60],["loc",[null,[16,8],[16,47]]]],
        ["inline","sl-progress-bar",[],["label",true,"theme","success","value",40],["loc",[null,[28,8],[28,63]]]],
        ["inline","sl-progress-bar",[],["striped",true,"theme","warning","value",70],["loc",[null,[40,8],[40,65]]]],
        ["inline","sl-progress-bar",[],["animated",true,"label",true,"striped",true,"theme","danger","value",90],["loc",[null,[57,8],[63,10]]]],
        ["inline","sl-input",[],["type","Number","value",["subexpr","@mut",[["get","dynamicValue",["loc",[null,[76,60],[76,72]]]]],[],[]]],["loc",[null,[76,29],[76,74]]]],
        ["inline","sl-progress-bar",[],["label",true,"value",["subexpr","@mut",[["get","dynamicValue",["loc",[null,[77,43],[77,55]]]]],[],[]]],["loc",[null,[77,8],[77,57]]]],
        ["block","property-text",[],["name","animated","type","Boolean","default","false","requires","striped=true"],0,null,["loc",[null,[107,4],[109,22]]]],
        ["block","property-text",[],["name","label","type","Boolean","default","false"],1,null,["loc",[null,[111,4],[113,22]]]],
        ["block","property-text",[],["name","popover","type","String"],2,null,["loc",[null,[115,4],[117,22]]]],
        ["block","property-text",[],["name","striped","type","Boolean","default","false"],3,null,["loc",[null,[119,4],[121,22]]]],
        ["block","property-text",[],["name","theme","type","String","default","\"default\""],4,null,["loc",[null,[123,4],[125,22]]]],
        ["block","property-text",[],["name","title","type","String"],5,null,["loc",[null,[127,4],[129,22]]]],
        ["block","property-text",[],["name","value","type","Number"],6,null,["loc",[null,[131,4],[133,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('dummy/templates/demos/sl-radio-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 93
            },
            "end": {
              "line": 4,
              "column": 130
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("sl-radio");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","sl-radio",[],["label","Red","value","red"],["loc",[null,[32,12],[32,48]]]],
          ["inline","sl-radio",[],["label","Green","value","green"],["loc",[null,[33,12],[33,52]]]],
          ["inline","sl-radio",[],["label","Blue","value","blue"],["loc",[null,[34,12],[34,50]]]],
          ["inline","sl-radio",[],["label","Splorge","disabled",true],["loc",[null,[35,12],[35,54]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Shared ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("name");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" attribute for the radio inputs.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("NOTE: This property will overwrite all child ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("em");
          var el3 = dom.createTextNode("sl-radio");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("s' ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("name");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" values.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("When true, all child radio inputs will be disabled.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("NOTE: When true, this property overrides all child ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("em");
          var el3 = dom.createTextNode("sl-radio");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("s' ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("disabled");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" values.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("When true, all child radio inputs will be displayed inline.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("When false, all child radio inputs will not be displayed inline.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("NOTE: When true or false, this property will overwrite all child ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("em");
          var el3 = dom.createTextNode("sl-radio");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("s' ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("inline");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" values.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text label for radio group as a whole.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect optional status.  This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect required status.  This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bound value for the radiogroup component.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 112,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-radio-group.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-radio-group");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A component that contains a group of \"radio\" type inputs. See ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/css/#forms-controls");
        var el3 = dom.createTextNode("Bootstrap - Supported controls");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("The ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("em");
        var el3 = dom.createTextNode("sl-radio-group");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" component wraps a number of ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("em");
        var el3 = dom.createTextNode("sl-radio");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" components. See ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" for radio-specific options.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-radio-group\n    label=\"Color selection\"\n    name=\"colorRadio\"\n    value=currentColor\n}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-radio label=\"Red\" value=\"red\"}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-radio label=\"Green\" value=\"green\"}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-radio label=\"Blue\" value=\"blue\"}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-radio label=\"Splorge\" disabled=true}}\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-radio-group}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Current color: ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-input-based");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-radio-group");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-radio-group.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-radio-group Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [10, 3]);
        var element1 = dom.childAt(fragment, [28]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [4]),5,5);
        morphs[1] = dom.createMorphAt(element0,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        morphs[3] = dom.createMorphAt(element1,1,1);
        morphs[4] = dom.createMorphAt(element1,3,3);
        morphs[5] = dom.createMorphAt(element1,5,5);
        morphs[6] = dom.createMorphAt(element1,7,7);
        morphs[7] = dom.createMorphAt(element1,9,9);
        morphs[8] = dom.createMorphAt(element1,11,11);
        morphs[9] = dom.createMorphAt(element1,13,13);
        morphs[10] = dom.createMorphAt(element1,15,15);
        morphs[11] = dom.createMorphAt(element1,17,17);
        return morphs;
      },
      statements: [
        ["block","link-to",["demos.sl-radio"],[],0,null,["loc",[null,[4,93],[4,142]]]],
        ["block","sl-radio-group",[],["label","Color selection","name","colorRadio","value",["subexpr","@mut",[["get","currentColor",["loc",[null,[30,18],[30,30]]]]],[],[]]],1,null,["loc",[null,[27,8],[36,27]]]],
        ["content","currentColor",["loc",[null,[38,27],[38,43]]]],
        ["block","property-text",[],["name","name","type","String","required",true],2,null,["loc",[null,[71,4],[74,22]]]],
        ["block","property-text",[],["name","disabled","type","Boolean","default","false"],3,null,["loc",[null,[76,4],[79,22]]]],
        ["block","property-text",[],["name","inline","type","Boolean","default","null"],4,null,["loc",[null,[81,4],[86,22]]]],
        ["block","property-text",[],["name","label","type","String"],5,null,["loc",[null,[88,4],[90,22]]]],
        ["block","property-text",[],["name","optional","type","Boolean","default","false"],6,null,["loc",[null,[92,4],[94,22]]]],
        ["block","property-text",[],["name","popover","type","String"],7,null,["loc",[null,[96,4],[98,22]]]],
        ["block","property-text",[],["name","required","type","Boolean","default","false"],8,null,["loc",[null,[100,4],[102,22]]]],
        ["block","property-text",[],["name","title","type","String"],9,null,["loc",[null,[104,4],[106,22]]]],
        ["block","property-text",[],["name","value","type","String"],10,null,["loc",[null,[108,4],[110,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10]
    };
  }()));

});
define('dummy/templates/demos/sl-radio', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the radio button will be disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Display the radio inputs inline with each other.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text label for the button.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the button.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-radio.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bound value for the radio button.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-radio.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-radio");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("Individual radio button component.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-radio inline=true label=\"Test radio button\"}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-radio disabled=true label=\"Disabled radio button\"}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-input-based");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-radio");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-radio.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [28]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,3,3);
        morphs[4] = dom.createMorphAt(element0,5,5);
        morphs[5] = dom.createMorphAt(element0,7,7);
        morphs[6] = dom.createMorphAt(element0,9,9);
        return morphs;
      },
      statements: [
        ["inline","sl-radio",[],["inline",true,"label","Test radio button"],["loc",[null,[16,8],[16,58]]]],
        ["inline","sl-radio",[],["disabled",true,"label","Disabled radio button"],["loc",[null,[28,8],[28,64]]]],
        ["block","property-text",[],["name","disabled","type","Boolean","default","false"],0,null,["loc",[null,[58,4],[60,22]]]],
        ["block","property-text",[],["name","inline","type","Boolean","default","false"],1,null,["loc",[null,[62,4],[64,22]]]],
        ["block","property-text",[],["name","label","type","String"],2,null,["loc",[null,[66,4],[68,22]]]],
        ["block","property-text",[],["name","name","type","String"],3,null,["loc",[null,[70,4],[72,22]]]],
        ["block","property-text",[],["name","value","type","String"],4,null,["loc",[null,[74,4],[76,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('dummy/templates/demos/sl-select', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bound content for the select's options. Each item can be one of the following:\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("A native value (number, string, etc.) which becomes the option's label and value");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("An object containing values for the option's label, value, and (optional) description. The lookup keys for these values are defined by ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("code");
          var el4 = dom.createTextNode("optionDescriptionPath");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(", ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("code");
          var el4 = dom.createTextNode("optionLabelPath");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(", and ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("code");
          var el4 = dom.createTextNode("optionValuePath");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(".");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Disables the search filter.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 93,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, input is disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 99,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Help text to display below the select input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text label for the select input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 105,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The maximum number of selections allowed when ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("multiple=true");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(".  By default there is no maximum value enforced.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Enables multiple selections.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Option's description field path.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Option's label field path.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 125,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Option's value field path.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect optional status.  This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 133,
              "column": 4
            },
            "end": {
              "line": 135,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("placeholder");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the select.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 137,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("readonly");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 145,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect required status.  This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 149,
              "column": 4
            },
            "end": {
              "line": 151,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-select.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Bound value to the selected value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 157,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-select.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-select");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A full-featured select input component. Based on ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://ivaynberg.github.io/select2/");
        var el3 = dom.createTextNode("Select2");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-select\n    content=content\n    label=\"Single item select\"\n    placeholder=\"Select a color\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-select\n    content=numbers\n    disableSearch=true\n    label=\"Multiple number select, no search\"\n    multiple=true\n    placeholder=\"Select number(s)\"\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-input-based");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-select");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-select.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [28]);
        var morphs = new Array(20);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,3,3);
        morphs[4] = dom.createMorphAt(element0,5,5);
        morphs[5] = dom.createMorphAt(element0,7,7);
        morphs[6] = dom.createMorphAt(element0,9,9);
        morphs[7] = dom.createMorphAt(element0,11,11);
        morphs[8] = dom.createMorphAt(element0,13,13);
        morphs[9] = dom.createMorphAt(element0,15,15);
        morphs[10] = dom.createMorphAt(element0,17,17);
        morphs[11] = dom.createMorphAt(element0,19,19);
        morphs[12] = dom.createMorphAt(element0,21,21);
        morphs[13] = dom.createMorphAt(element0,23,23);
        morphs[14] = dom.createMorphAt(element0,25,25);
        morphs[15] = dom.createMorphAt(element0,27,27);
        morphs[16] = dom.createMorphAt(element0,29,29);
        morphs[17] = dom.createMorphAt(element0,31,31);
        morphs[18] = dom.createMorphAt(element0,33,33);
        morphs[19] = dom.createMorphAt(element0,35,35);
        return morphs;
      },
      statements: [
        ["inline","sl-select",[],["content",["subexpr","@mut",[["get","content",["loc",[null,[21,20],[21,27]]]]],[],[]],"label","Single item select","placeholder","Select a color"],["loc",[null,[20,8],[24,10]]]],
        ["inline","sl-select",[],["content",["subexpr","@mut",[["get","numbers",["loc",[null,[43,20],[43,27]]]]],[],[]],"disableSearch",true,"label","Multiple number select, no search","multiple",true,"placeholder","Select number(s)"],["loc",[null,[42,8],[48,10]]]],
        ["block","property-text",[],["name","content","required",true,"type","Array"],0,null,["loc",[null,[81,4],[87,22]]]],
        ["block","property-text",[],["name","disableSearch","type","Boolean","default","false"],1,null,["loc",[null,[89,4],[91,22]]]],
        ["block","property-text",[],["name","disabled","type","Boolean","default","false"],2,null,["loc",[null,[93,4],[95,22]]]],
        ["block","property-text",[],["name","helpText","type","String"],3,null,["loc",[null,[97,4],[99,22]]]],
        ["block","property-text",[],["name","label","type","String"],4,null,["loc",[null,[101,4],[103,22]]]],
        ["block","property-text",[],["name","maximumSelectionSize","type","Number","default","null"],5,null,["loc",[null,[105,4],[107,22]]]],
        ["block","property-text",[],["name","multiple","type","Boolean","default","false"],6,null,["loc",[null,[109,4],[111,22]]]],
        ["block","property-text",[],["name","name","type","String"],7,null,["loc",[null,[113,4],[115,22]]]],
        ["block","property-text",[],["name","optionDescriptionPath","type","String","default","\"description\""],8,null,["loc",[null,[117,4],[119,22]]]],
        ["block","property-text",[],["name","optionLabelPath","type","String","default","\"label\""],9,null,["loc",[null,[121,4],[123,22]]]],
        ["block","property-text",[],["name","optionValuePath","type","String","default","\"value\""],10,null,["loc",[null,[125,4],[127,22]]]],
        ["block","property-text",[],["name","optional","type","Boolean","default","false"],11,null,["loc",[null,[129,4],[131,22]]]],
        ["block","property-text",[],["name","placeholder","type","String"],12,null,["loc",[null,[133,4],[135,22]]]],
        ["block","property-text",[],["name","popover","type","String"],13,null,["loc",[null,[137,4],[139,22]]]],
        ["block","property-text",[],["name","readonly","type","Boolean","default","false"],14,null,["loc",[null,[141,4],[143,22]]]],
        ["block","property-text",[],["name","required","type","Boolean","default","false"],15,null,["loc",[null,[145,4],[147,22]]]],
        ["block","property-text",[],["name","title","type","String"],16,null,["loc",[null,[149,4],[151,22]]]],
        ["block","property-text",[],["name","value","type","Array/String"],17,null,["loc",[null,[153,4],[155,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17]
    };
  }()));

});
define('dummy/templates/demos/sl-span', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-span.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("class");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute to apply to the span.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-span.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, a loading icon will be displayed in place of content.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-span.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The value to display once loaded/ready.  This property will override the yielded content.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-span.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-span");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A wrapper to intelligently represent state for inline content.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Example");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("<p>\n    Loads in 5 seconds:&emsp;");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{sl-span\n        class=\"text-success\"\n        loading=isLoading\n        value=\"Done!\"\n    }}\n</p>");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Note: This component does not provide a time-delay mechanism.  The 5 second time delay represented in the example is implemented in the demonstration controller and is employed to emulate the waiting for a promise to be resolved in order to demonstrate the loading state of this component and the final display of the resolved data value.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("Loads in 5 seconds: ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-span");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-span.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [20]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3, 3]),1,1);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        return morphs;
      },
      statements: [
        ["inline","sl-span",[],["class","text-success","loading",["subexpr","@mut",[["get","isLoading",["loc",[null,[24,75],[24,84]]]]],[],[]],"value","Done!"],["loc",[null,[24,36],[24,100]]]],
        ["block","property-text",[],["name","class","type","String"],0,null,["loc",[null,[44,4],[46,22]]]],
        ["block","property-text",[],["name","loading","type","Boolean","default","false"],1,null,["loc",[null,[48,4],[50,22]]]],
        ["block","property-text",[],["name","value","type","String"],2,null,["loc",[null,[52,4],[54,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('dummy/templates/demos/sl-tab-panel', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 12
              },
              "end": {
                "line": 31,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","demos/tabs/tab-one",["loc",[null,[30,16],[30,38]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 12
              },
              "end": {
                "line": 35,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","demos/tabs/tab-two",["loc",[null,[34,16],[34,38]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 12
              },
              "end": {
                "line": 39,
                "column": 12
              }
            },
            "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("Content for tab three!");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","sl-tab-pane",[],["label","One","name","one"],0,null,["loc",[null,[29,12],[31,28]]]],
          ["block","sl-tab-pane",[],["label","Two","name","two"],1,null,["loc",[null,[33,12],[35,28]]]],
          ["block","sl-tab-pane",[],["label","Three","name","three"],2,null,["loc",[null,[37,12],[39,28]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        How to align the tabs, \"left\" or \"right\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Name of the initial active tab. This value corresponds to the value set on the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property of the sl-tab-pane component. If omitted, the first tab pane will be open on initialization.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The text label for the tab pane's tab.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("This value is never displayed in the tabs.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Used to set the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("data-tab-name");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" attribute on the tab and used internally by the component to manage tab selection.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("The name provided can be specified in the ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("code");
          var el3 = dom.createTextNode("initialTabName");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" property of the sl-tab-panel component to indicate which tab should be active when initially displayed.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 84,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-tab-panel.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-tab-panel");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A component with selectable tabs and related tab panes. Based on ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/javascript/#tabs");
        var el3 = dom.createTextNode("Bootstrap - Togglable tabs");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-tab-panel}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{#sl-tab-pane label=\"One\" name=\"one\"}}\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{demos/tabs/tab-one}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-tab-pane}}\n\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{#sl-tab-pane label=\"Two\" name=\"two\"}}\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{demos/tabs/tab-two}}\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-tab-pane}}\n\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{#sl-tab-pane label=\"Three\" name=\"three\"}}\n        <p>Content for tab three!</p>\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-tab-pane}}\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-tab-panel}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-tab-panel");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-tab-panel.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-tab-panel Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("sl-tab-pane Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [20]);
        var element1 = dom.childAt(fragment, [26]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element1,1,1);
        morphs[4] = dom.createMorphAt(element1,3,3);
        return morphs;
      },
      statements: [
        ["block","sl-tab-panel",[],[],0,null,["loc",[null,[28,8],[40,25]]]],
        ["block","property-text",[],["name","alignTabs","type","String","default","\"left\""],1,null,["loc",[null,[60,4],[62,22]]]],
        ["block","property-text",[],["name","initialTabName","type","String"],2,null,["loc",[null,[64,4],[66,22]]]],
        ["block","property-text",[],["name","label","type","String","required",true],3,null,["loc",[null,[74,4],[76,22]]]],
        ["block","property-text",[],["name","name","type","String","required",true],4,null,["loc",[null,[78,4],[82,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('dummy/templates/demos/sl-textarea', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("autofocus");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" HTML attribute value, passed directly to the underlying <textarea>.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("cols");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the textarea is disabled.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Text to display below the textarea.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        String for label text above the input.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("maxlength");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 108,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the textarea.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect optional status. This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("placeholder");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the textarea.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 118,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child10 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("readonly");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value for the textarea.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child11 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 128,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        When true, the component is styled to reflect required status. This styling will only be in effect if the ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("label");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property has also been set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child12 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("rows");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child13 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 134,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("selectionDirection");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" HTML attribute value, passed directly to the underlying <textarea>. Can be \"forward\", \"backward\", or \"none\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child14 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("selectionEnd");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" HTML attribute value, passed directly to the underlying <textarea>.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child15 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("selectionStart");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" HTML attribute value, passed directly to the underlying <textarea>.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child16 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("spellcheck");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" HTML attribute value, passed directly to the underlying <textarea>.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child17 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("tabindex");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" attribute value.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child18 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 154,
              "column": 4
            },
            "end": {
              "line": 156,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip text string, or becomes popover title with supplied popover property.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child19 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 158,
              "column": 4
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("wrap");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" HTML attribute value, passed directly to the underlying <textarea>. Can be \"hard\" or \"soft\".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child20 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 162,
              "column": 4
            },
            "end": {
              "line": 164,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-textarea.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        The bound value of the textarea.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 166,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-textarea.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-textarea");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A Bootstrap-wrapped component based on Ember's textarea helper.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-textarea\n    label=\"First textarea\"\n    placeholder=\"Enter some text!\"\n    rows=6\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{sl-textarea\n    disabled=true\n    label=\"Second textarea\"\n    placeholder=\"You can't enter anything...\"\n    rows=4\n}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-component-input-id");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-input-based");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-textarea");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-textarea.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [28]);
        var morphs = new Array(23);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3]),3,3);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,3,3);
        morphs[4] = dom.createMorphAt(element0,5,5);
        morphs[5] = dom.createMorphAt(element0,7,7);
        morphs[6] = dom.createMorphAt(element0,9,9);
        morphs[7] = dom.createMorphAt(element0,11,11);
        morphs[8] = dom.createMorphAt(element0,13,13);
        morphs[9] = dom.createMorphAt(element0,15,15);
        morphs[10] = dom.createMorphAt(element0,17,17);
        morphs[11] = dom.createMorphAt(element0,19,19);
        morphs[12] = dom.createMorphAt(element0,21,21);
        morphs[13] = dom.createMorphAt(element0,23,23);
        morphs[14] = dom.createMorphAt(element0,25,25);
        morphs[15] = dom.createMorphAt(element0,27,27);
        morphs[16] = dom.createMorphAt(element0,29,29);
        morphs[17] = dom.createMorphAt(element0,31,31);
        morphs[18] = dom.createMorphAt(element0,33,33);
        morphs[19] = dom.createMorphAt(element0,35,35);
        morphs[20] = dom.createMorphAt(element0,37,37);
        morphs[21] = dom.createMorphAt(element0,39,39);
        morphs[22] = dom.createMorphAt(element0,41,41);
        return morphs;
      },
      statements: [
        ["inline","sl-textarea",[],["label","First textarea","placeholder","Enter some text!","rows",6],["loc",[null,[20,8],[24,10]]]],
        ["inline","sl-textarea",[],["disabled",true,"label","Second textarea","placeholder","You can't enter anything...","rows",4],["loc",[null,[41,8],[46,10]]]],
        ["block","property-text",[],["name","autofocus","type","Number","default","false"],0,null,["loc",[null,[82,4],[84,22]]]],
        ["block","property-text",[],["name","cols","type","Number/String"],1,null,["loc",[null,[86,4],[88,22]]]],
        ["block","property-text",[],["name","disabled","type","Boolean","default","false"],2,null,["loc",[null,[90,4],[92,22]]]],
        ["block","property-text",[],["name","helpText","type","String"],3,null,["loc",[null,[94,4],[96,22]]]],
        ["block","property-text",[],["name","label","type","String"],4,null,["loc",[null,[98,4],[100,22]]]],
        ["block","property-text",[],["name","maxlength","type","Number/String"],5,null,["loc",[null,[102,4],[104,22]]]],
        ["block","property-text",[],["name","name","type","String"],6,null,["loc",[null,[106,4],[108,22]]]],
        ["block","property-text",[],["name","optional","type","Boolean","default","false"],7,null,["loc",[null,[110,4],[112,22]]]],
        ["block","property-text",[],["name","placeholder","type","String"],8,null,["loc",[null,[114,4],[116,22]]]],
        ["block","property-text",[],["name","popover","type","String"],9,null,["loc",[null,[118,4],[120,22]]]],
        ["block","property-text",[],["name","readonly","type","Boolean","default","false"],10,null,["loc",[null,[122,4],[124,22]]]],
        ["block","property-text",[],["name","required","type","Boolean","default","false"],11,null,["loc",[null,[126,4],[128,22]]]],
        ["block","property-text",[],["name","rows","type","Number/String"],12,null,["loc",[null,[130,4],[132,22]]]],
        ["block","property-text",[],["name","selectionDirection","type","String","default","\"forward\""],13,null,["loc",[null,[134,4],[136,22]]]],
        ["block","property-text",[],["name","selectionEnd","type","Number/String"],14,null,["loc",[null,[138,4],[140,22]]]],
        ["block","property-text",[],["name","selectionStart","type","Number/String"],15,null,["loc",[null,[142,4],[144,22]]]],
        ["block","property-text",[],["name","spellcheck","type","Boolean","default","false"],16,null,["loc",[null,[146,4],[148,22]]]],
        ["block","property-text",[],["name","tabindex","type","String"],17,null,["loc",[null,[150,4],[152,22]]]],
        ["block","property-text",[],["name","title","type","String"],18,null,["loc",[null,[154,4],[156,22]]]],
        ["block","property-text",[],["name","wrap","type","String","default","\"soft\""],19,null,["loc",[null,[158,4],[160,22]]]],
        ["block","property-text",[],["name","value","type","String"],20,null,["loc",[null,[162,4],[164,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15, child16, child17, child18, child19, child20]
    };
  }()));

});
define('dummy/templates/demos/sl-tooltip', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 11
            },
            "end": {
              "line": 21,
              "column": 75
            }
          },
          "moduleName": "dummy/templates/demos/sl-tooltip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Tooltip example");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 44,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/demos/sl-tooltip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            Popover example\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-tooltip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Tooltip content text, or popover title text when ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("code");
          var el2 = dom.createTextNode("popover");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" property is set.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/demos/sl-tooltip.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Popover content text.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 82,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/demos/sl-tooltip.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("sl-tooltip");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1,"class","lead");
        var el2 = dom.createTextNode("A simple component that surrounds content to enable Bootstrap's ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/javascript/#tooltips");
        var el3 = dom.createTextNode("tooltip");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" and ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2,"href","http://getbootstrap.com/javascript/#popovers");
        var el3 = dom.createTextNode("popover");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" behavior.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Examples");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-tooltip\n    tagName=\"u\"\n    title=\"Tooltip text!\"\n}}\n    Tooltip example\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-tooltip}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Template");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("pre");
        var el4 = dom.createTextNode("{{#sl-tooltip\n    popover=\"Popover content!\"\n    tagName=\"u\"\n    title=\"Popover title\"\n}}\n    Popover example\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("{{/sl-tooltip}}");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-lg-6");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Rendered Component");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Mixins used");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        sl-tooltip-enabled\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Custom CSS styling");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","list-group-item");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("sl-ember-components-tooltip");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("The default class prefix is \"sl-ember-components\" unless the consuming application passes in a custom prefix. In which case, the CSS class would be [customprefix]-tooltip.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Properties");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","list-group");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [28]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [8, 3, 3]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [10, 3]),3,3);
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["block","sl-tooltip",[],["tagName","u","title","Tooltip text!"],0,null,["loc",[null,[21,11],[21,90]]]],
        ["block","sl-tooltip",[],["popover","Popover content!","tagName","u","title","Popover title"],1,null,["loc",[null,[39,8],[44,23]]]],
        ["block","property-text",[],["name","title","type","String","required",true],2,null,["loc",[null,[74,4],[76,22]]]],
        ["block","property-text",[],["name","popover","type","String"],3,null,["loc",[null,[78,4],[80,22]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('dummy/templates/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 8
            },
            "end": {
              "line": 70,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-cubes fa-4x");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createElement("b");
          var el3 = dom.createTextNode("Demo");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 75,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/index.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-plug fa-4x");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createElement("b");
          var el3 = dom.createTextNode("Supported Browsers");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/index.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12 text-center");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("sl-ember-components 0.11.0");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","lead");
        var el4 = dom.createTextNode("An Ember CLI Addon that provides a variety of UI components.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","col-md-3");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Components");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-alert");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-button");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-calendar");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-chart");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-checkbox");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-date-picker");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-date-range-picker");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-date-time");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-drop-button");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-grid");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-input");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-menu");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-modal");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-pagination");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-panel");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-progress-bar");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-radio");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-radio-group");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-select");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-span");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-tab-panel");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-textarea");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-tooltip");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","col-md-3");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Mixins");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-component-input-id");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-input-based");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-namespace");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-tooltip-enabled");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","col-md-3");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Utility Classes");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("containsValue");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("error");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("warn");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","col-md-3");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("CSS Classes");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("sl-loading");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","col-md-3 text-center");
        dom.setAttribute(el3,"href","http://softlayer.github.io/sl-ember-components/docs");
        dom.setAttribute(el3,"target","new");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-book fa-4x");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createElement("b");
        var el6 = dom.createTextNode("Documentation");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","col-md-3 text-center");
        dom.setAttribute(el3,"href","https://github.com/softlayer/sl-ember-components");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-github fa-4x");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createElement("b");
        var el6 = dom.createTextNode("Available on GitHub");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,5,5);
        return morphs;
      },
      statements: [
        ["block","link-to",["demos"],["class","col-md-3 text-center"],0,null,["loc",[null,[67,8],[70,20]]]],
        ["block","link-to",["browsers"],["class","col-md-3 text-center"],1,null,["loc",[null,[75,8],[78,20]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('app.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/blanket-options', function () {

    'use strict';

    /* globals blanket, module */

    var options = {
        modulePrefix: 'sl-ember-components',
        filter: '//.*sl-ember-components/.*/',
        antifilter: '//.*(tests|template).*/',
        loaderExclusions: [],
        enableCoverage: true,
        modulePattern: '\/(\\w+)',
        branchTracking: true,
        cliOptions: {
            reporters: ['json'],
            autostart: true
        }
    };

    if ('undefined' === typeof exports) {
        blanket.options(options);
    } else {
        module.exports = options;
    }

});
define('dummy/tests/blanket-options.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('blanket-options.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'blanket-options.js should pass jshint.'); 
  });

});
define('dummy/tests/components/demos/sl-grid-detail.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/demos');
  QUnit.test('components/demos/sl-grid-detail.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'components/demos/sl-grid-detail.js should pass jshint.'); 
  });

});
define('dummy/tests/components/demos/tabs/tab-one.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components/demos/tabs');
  QUnit.test('components/demos/tabs/tab-one.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'components/demos/tabs/tab-one.js should pass jshint.'); 
  });

});
define('dummy/tests/components/property-text.jshint', function () {

  'use strict';

  QUnit.module('JSHint - components');
  QUnit.test('components/property-text.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'components/property-text.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/browsers.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers');
  QUnit.test('controllers/browsers.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/browsers.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-calendar.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-calendar.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-calendar.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-chart.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-chart.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-chart.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-date-time.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-date-time.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-date-time.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-drop-button.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-drop-button.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-drop-button.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-grid.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-grid.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-grid.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-input.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-input.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-input.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-menu.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-menu.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-menu.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-pagination.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-pagination.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-pagination.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-progress-bar.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-progress-bar.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-progress-bar.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-radio-group.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-radio-group.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-radio-group.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-select.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-select.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-select.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/sl-span.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos');
  QUnit.test('controllers/demos/sl-span.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/sl-span.js should pass jshint.'); 
  });

});
define('dummy/tests/controllers/demos/tabs/home.jshint', function () {

  'use strict';

  QUnit.module('JSHint - controllers/demos/tabs');
  QUnit.test('controllers/demos/tabs/home.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'controllers/demos/tabs/home.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

    'use strict';

    var resolver = Resolver['default'].create();

    resolver.namespace = {
        modulePrefix: config['default'].modulePrefix,
        podModulePrefix: config['default'].podModulePrefix
    };

    exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/resolver.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/sl/register-test-helpers', ['exports', 'ember', 'dummy/tests/helpers/sl/synchronous'], function (exports, Ember, synchronous) {

    'use strict';

    exports['default'] = function () {
        Ember['default'].Test.registerHelper('contains', synchronous.contains);
        Ember['default'].Test.registerHelper('Ajax', synchronous.AjaxHelper);
        Ember['default'].Test.registerHelper('requires', synchronous.requires);
        Ember['default'].Test.registerHelper('globalLibraries', synchronous.globalLibraries);
    }

});
define('dummy/tests/helpers/sl/synchronous/ajax', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var AjaxHelper = (function () {
        function AjaxHelper() {
            _classCallCheck(this, AjaxHelper);
        }

        _createClass(AjaxHelper, null, [{
            key: 'begin',

            /**
             * Emulate the beginning of an AJAX request
             *
             * @function
             * @static
             * @param {String} [endpoint]
             * @returns {undefined}
             */
            value: function begin(endpoint) {
                Ember['default'].run(function () {
                    if (endpoint) {
                        Ember['default'].$(document).trigger('ajaxSend', [null, { url: endpoint }]);
                    } else {
                        Ember['default'].$(document).trigger('ajaxStart');
                    }
                });
            }

            /**
             * Emulate the conclusion of an AJAX request
             *
             * @function
             * @static
             * @param {String} [endpoint]
             * @returns {undefined}
             */
        }, {
            key: 'end',
            value: function end(endpoint) {
                Ember['default'].run(function () {
                    if (endpoint) {
                        Ember['default'].$(document).trigger('ajaxComplete', [null, { url: endpoint }]);
                    } else {
                        Ember['default'].$(document).trigger('ajaxStop');
                    }
                });
            }
        }]);

        return AjaxHelper;
    })();

    exports['default'] = AjaxHelper;

});
define('dummy/tests/helpers/sl/synchronous/contains', ['exports', 'ember', 'dummy/tests/helpers/sl/utils/utils'], function (exports, Ember, utils) {

    'use strict';

    exports['default'] = function () {
        var index = 3 === arguments.length ? 1 : 0;
        var underTest = arguments[index];
        var testFor = arguments[index + 1];

        /* jshint ignore:start */
        Ember['default'].assert('First non-optional argument must be an array, string or object', ('object' === Ember['default'].typeOf(underTest) || 'string' === Ember['default'].typeOf(underTest) || 'array' === Ember['default'].typeOf(underTest)) && 'symbol' !== typeof underTest);

        Ember['default'].assert('Second non-optional argument must be an array, string or object', ('object' === Ember['default'].typeOf(testFor) || 'string' === Ember['default'].typeOf(testFor) || 'array' === Ember['default'].typeOf(testFor)) && 'symbol' !== typeof testFor);
        /* jshint ignore:end */

        return utils.doArraysIntersect(utils.convertToArray(underTest), utils.convertToArray(testFor));
    }

});
define('dummy/tests/helpers/sl/synchronous/global-libraries', ['exports', 'ember', 'sinon'], function (exports, Ember, sinon) {

    'use strict';

    exports.setupSpies = setupSpies;
    exports.triggerEvents = triggerEvents;
    exports.called = called;
    exports.restoreSpies = restoreSpies;
    exports.resetSpies = resetSpies;

    var called = undefined;
    var jqueryAliasSpy = undefined;
    var jquerySpy = undefined;
    var emberJquerySpy = undefined;

    function setupSpies() {
        exports.jqueryAliasSpy = jqueryAliasSpy = sinon['default'].spy(window, '$');
        exports.jquerySpy = jquerySpy = sinon['default'].spy(window, 'jQuery');
        exports.emberJquerySpy = emberJquerySpy = sinon['default'].spy(Ember['default'], '$');
    }

    function triggerEvents(component) {
        Ember['default'].run(function () {
            ['willInsertElement', 'didInsertElement', 'willClearRender', 'willDestroyElement'].map(function (event) {
                component.trigger(event);
            });
        });
    }

    function called() {
        return jqueryAliasSpy.called || jquerySpy.called || emberJquerySpy.called;
    }

    function restoreSpies() {
        window.$.restore();
        window.jQuery.restore();
        Ember['default'].$.restore();
    }

    function resetSpies() {
        jqueryAliasSpy.reset();
        jquerySpy.reset();
        emberJquerySpy.reset();
    }

    exports.jqueryAliasSpy = jqueryAliasSpy;
    exports.jquerySpy = jquerySpy;
    exports.emberJquerySpy = emberJquerySpy;

});
define('dummy/tests/helpers/sl/synchronous/requires', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var requiresHelper = function requiresHelper(methodUnderTest, requiredTypes) {
        var typesToTest = {
            'number': {
                required: false,
                testValue: 123987465,
                message: 'Parameter was a number'
            },
            'string': {
                required: false,
                testValue: 'testString',
                message: 'Parameter was a string'
            },
            'array': {
                required: false,
                testValue: [],
                message: 'Parameter was an array'
            },
            'object': {
                required: false,
                testValue: {},
                message: 'Parameter was an object'
            },
            'function': {
                required: false,
                testValue: function testValue() {},
                message: 'Parameter was a function'
            },
            'undefined': {
                required: false,
                testValue: undefined,
                message: 'Parameter was undefined'
            },
            'boolean': {
                required: false,
                testValue: true,
                message: 'Parameter was a boolean'
            },
            'null': {
                required: false,
                testValue: null,
                message: 'Parameter was null'
            }
        };

        Ember['default'].assert('First argument must be a function', 'function' === Ember['default'].typeOf(methodUnderTest));
        Ember['default'].assert('Second argument must be an array', 'array' === Ember['default'].typeOf(requiredTypes));

        // Set required parameter types
        requiredTypes.forEach(function (item) {
            typesToTest[item]['required'] = true;
        });

        var testsThatHaveFailed = [];
        var property = undefined;

        // Test each parameter type
        for (property in typesToTest) {
            if (typesToTest.hasOwnProperty(property)) {
                // Reset flag
                var assertionThrown = undefined;
                assertionThrown = false;

                // Assign cleaner object reference
                var parameter = typesToTest[property];

                // Test parameter
                try {
                    methodUnderTest(parameter['testValue']);
                } catch (error) {
                    assertionThrown = true;
                }

                var assertionPassed = undefined;
                assertionPassed = parameter['required'] ? !assertionThrown : assertionThrown;

                if (!assertionPassed) {
                    testsThatHaveFailed.push(parameter['message']);
                }
            }
        }

        return {
            requires: 0 === testsThatHaveFailed.length,
            messages: testsThatHaveFailed.join('; ')
        };
    };

    exports['default'] = requiresHelper;

});
define('dummy/tests/helpers/sl/synchronous', ['exports', 'dummy/tests/helpers/sl/synchronous/ajax', 'dummy/tests/helpers/sl/synchronous/contains', 'dummy/tests/helpers/sl/synchronous/requires', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (exports, AjaxHelper, contains, requires, globalLibraries) {

	'use strict';



	exports.AjaxHelper = AjaxHelper['default'];
	exports.contains = contains['default'];
	exports.requires = requires['default'];
	exports.globalLibraries = globalLibraries;

});
define('dummy/tests/helpers/sl/utils/utils', ['exports', 'ember'], function (exports, Ember) {

    'use strict';

    var convertToArray = function convertToArray(underTest) {

        /* jshint ignore:start */
        Ember['default'].assert('Array, String, or Object must be supplied', ('array' === Ember['default'].typeOf(underTest) || 'string' === Ember['default'].typeOf(underTest) || 'object' === Ember['default'].typeOf(underTest)) && 'symbol' !== typeof underTest);
        /* jshint ignore:end */

        var returnArray = underTest;

        switch (Ember['default'].typeOf(underTest)) {
            case 'array':
                returnArray = underTest;
                break;

            case 'string':
                returnArray = convertStringToArray(underTest);
                break;

            case 'object':
                returnArray = convertObjectKeysToArray(underTest);
                break;
        }

        return returnArray;
    };

    /**
     * Splits a string into an array of individual "words" as delineated by spaces
     *
     * Primarily exists to convert format of call to .prop( 'class' )
     *
     * @function
     * @param {String} underTest
     * @throws {ember.assert} If argument is not provided or is not a string
     * @returns {Array}
     */
    var convertStringToArray = function convertStringToArray(underTest) {

        Ember['default'].assert('String must be supplied', 'string' === Ember['default'].typeOf(underTest));

        return underTest.split(' ');
    };

    /**
     * Returns an array containing all of the property names of an object
     *
     * Property names are only extracted from the object provided.  No recursion into nested objects occurs.
     *
     * @function
     * @param {Object} underTest
     * @throws {ember.assert} If argument is not provided or is not an object
     * @returns {Array}
     */
    var convertObjectKeysToArray = function convertObjectKeysToArray(underTest) {

        /* jshint ignore:start */
        Ember['default'].assert('Object must be supplied', 'object' === Ember['default'].typeOf(underTest) && 'array' !== Ember['default'].typeOf(underTest) && 'symbol' !== typeof underTest);
        /* jshint ignore:end */

        return Object.keys(underTest);
    };

    /**
     * Whether at least one element of the array exists in the other
     *
     * @function
     * @param {Array} underTest
     * @param {Array} testFor
     * @returns {Boolean}
     */
    var doArraysIntersect = function doArraysIntersect(underTest, testFor) {

        Ember['default'].assert('Parameters must be Arrays', 'array' === Ember['default'].typeOf(underTest) && 'array' === Ember['default'].typeOf(testFor));

        return testFor.some(function (v) {
            return underTest.indexOf(v) >= 0;
        });
    };

    exports.convertToArray = convertToArray;
    exports.convertStringToArray = convertStringToArray;
    exports.convertObjectKeysToArray = convertObjectKeysToArray;
    exports.doArraysIntersect = doArraysIntersect;

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/tests/helpers/sl/register-test-helpers', 'dummy/app', 'dummy/config/environment'], function (exports, Ember, slRegisterTestHelpers, Application, config) {

    'use strict';



    exports['default'] = startApp;
    function startApp(attrs) {
        var attributes = Ember['default'].merge({}, config['default'].APP);
        attributes = Ember['default'].merge(attributes, attrs);

        var application = undefined;
        Ember['default'].run(function () {
            application = Application['default'].create(attributes);
            application.setupForTesting();
            slRegisterTestHelpers['default']();
            application.injectTestHelpers();
        });

        return application;
    }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  QUnit.module('JSHint - helpers');
  QUnit.test('helpers/start-app.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-alert-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-alert', 'Integration | Component | sl alert', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], [], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-alert'), 'Has class "sl-ember-components-alert"');

        assert.ok(this.$('>:first-child').hasClass('alert'), 'Has class "alert"');

        assert.ok(this.$('>:first-child').hasClass('alert-info'), 'Default theme class is applied');

        assert.strictEqual(this.$('>:first-child').attr('role'), 'alert', 'ARIA role is applied');
    });

    ember_qunit.test('Theme property is supported', function (assert) {

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Warning alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['theme', 'warning'], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('alert-warning'), 'Warning theme class is applied');
    });

    ember_qunit.test('"dismissable" set to true', function (assert) {

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert with dismissable\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['dismissable', true], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').hasClass('alert-dismissable'), true, 'Component has alert-dismissable class');

        assert.strictEqual(this.$('>:first-child').find('button').length, 1, 'Dismissable button was rendered');
    });

    ember_qunit.test('Dismiss Action is called on button click', function (assert) {

        var dismissAction = function dismissAction() {
            assert.ok(true, 'A dismiss action was called');
        };

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Dismissable is true with dismiss action\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['dismissable', true, 'dismiss', 'dismissAction'], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        this.on('dismissAction', dismissAction);
        this.$('>:first-child').find('button').click();
    });

    ember_qunit.test('Dismiss Action is not possible when dismissable is false', function (assert) {

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Dismissable is false with dismiss action\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['dismiss', 'dismissAction'], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('button').length, 0, 'Dismissable button was not rendered');

        assert.strictEqual(this.$('>:first-child').hasClass('alert-dismissable'), false, 'Component does not indicate dismissable');
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 28], [2, 35]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 40], [2, 47]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-alert-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-alert-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-alert-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-button-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-button', 'Integration | Component | sl button', {
        integration: true
    });

    var template = Ember.HTMLBars.template((function () {
        var child0 = (function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 2,
                            'column': 4
                        },
                        'end': {
                            'line': 4,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('        Default Text\n');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                    return [];
                },
                statements: [],
                locals: [],
                templates: []
            };
        })();

        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 5,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
            },
            statements: [['block', 'sl-button', [], [], 0, null, ['loc', [null, [2, 4], [4, 18]]]]],
            locals: [],
            templates: [child0]
        };
    })());

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(template);

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-button'), 'Has class "sl-ember-components-button"');

        assert.ok(this.$('>:first-child').hasClass('btn'), 'Has class "btn"');

        assert.ok(this.$('>:first-child').hasClass('btn-default'), 'Has default theme class');
    });

    ember_qunit.test('Default action is triggered when element is clicked', function (assert) {
        assert.expect(1);

        var done = assert.async();

        this.on('externalAction', function () {
            assert.ok(true, 'External action was called');

            done();
        });

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default Text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['action', 'externalAction'], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        this.$('>:first-child').click();
    });

    ember_qunit.test('Button is disabled when disabled is set to true', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default Text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['disabled', true], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').is(':disabled'), true, 'Component becomes disabled');
    });

    ember_qunit.test('Class property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('           Test Button\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['class', 'testClass'], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('testClass'));
    });

    ember_qunit.test('Labels are correctly initialized', function (assert) {
        var labelText = 'Test';

        this.set('label', labelText);
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default Text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['label', ['subexpr', '@mut', [['get', 'label', ['loc', [null, [2, 27], [2, 32]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), labelText, 'Expected label text is present');
    });

    ember_qunit.test('Correct size class is applied', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default Text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['size', 'large'], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('btn-lg'), 'Has expected class "btn-lg"');
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Some yielded text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], [], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'Some yielded text', 'Content yields successfully');
    });

    ember_qunit.test('Theme class is applied correctly', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default Text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['theme', 'success'], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('btn-success'), 'Has expected class "btn-success"');
    });

    ember_qunit.test('Label is correct for pending state', function (assert) {
        var pendingLabelText = 'Pending';
        var changedPendingLabelText = 'Changed pending label text';
        var staticText = 'Static';

        this.set('staticText', staticText);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                    },
                    statements: [['content', 'staticText', ['loc', [null, [3, 12], [3, 26]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], [], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), staticText, 'Static text is set initially');

        this.set('pendingLabel', pendingLabelText);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 5,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default Text\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                    },
                    statements: [['content', 'staticText', ['loc', [null, [4, 12], [4, 26]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['pendingLabel', ['subexpr', '@mut', [['get', 'pendingLabel', ['loc', [null, [2, 34], [2, 46]]]]], [], []], 'pending', true], 0, null, ['loc', [null, [2, 8], [5, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), pendingLabelText, 'Pending text is set while pending');

        this.set('pendingLabel', changedPendingLabelText);

        assert.strictEqual(this.$('>:first-child').text().trim(), changedPendingLabelText, 'Pending label text is set correctly when updated dynamically');
    });

    ember_qunit.test('Pending class is present when in pending state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default Text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['pendingLabel', 'pending', 'pending', true], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('pending'), 'Pending class is present in pending state');
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            default text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 27], [2, 32]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            default text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 29], [2, 36]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            default text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-button', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 27], [2, 32]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 41], [2, 48]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-button-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-button-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-button-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-calendar-test', ['ember', 'ember-qunit', 'qunit', 'sinon'], function (Ember, ember_qunit, qunit, sinon) {

    'use strict';

    var testContent = Ember['default'].A([{
        date: new Date(2022, 8, 17),
        label: 'Today!'
    }]);

    var multipleTestContent = Ember['default'].A([{
        date: new Date(2022, 8, 17),
        label: 'Event 1 Today!'
    }, {
        date: new Date(2022, 8, 17),
        label: 'Event 2 Today!'
    }, {
        date: new Date(2022, 8, 17),
        label: 'Event 3 Today!'
    }, {
        date: new Date(2022, 8, 20),
        label: 'Event 1 Another Day!'
    }]);

    ember_qunit.moduleForComponent('sl-calendar', 'Integration | Component | sl calendar', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-calendar', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-calendar'), 'Has class "sl-ember-components-calendar"');

        assert.ok(this.$('>:first-child').find('> div:first-child').hasClass('datepicker'), 'First child of component has class "datepicker"');

        assert.ok(this.$('>:first-child').find('> div:first-child').hasClass('datepicker-inline'), 'First child of component has class "datepicker-inline"');

        assert.ok(this.$('>:first-child').find('> .datepicker > div:first-child').hasClass('datepicker-days'), 'Day view is visible');
    });

    ember_qunit.test('Next and Previous buttons have appropriate classes', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-calendar', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('.table-condensed > thead > tr > th:first-child span').hasClass('sl-icon-previous'), 'day view has previous button class');

        assert.ok(this.$('.table-condensed > thead > tr > th:last-child span').hasClass('sl-icon-next'), 'day view has next button class');

        this.$('.datepicker-switch').click();

        assert.ok(this.$('.table-condensed > thead > tr > th:first-child span').hasClass('sl-icon-previous'), 'month view has previous button class');

        assert.ok(this.$('.table-condensed > thead > tr > th:last-child span').hasClass('sl-icon-next'), 'month view has next button class');

        this.$('.datepicker-switch').click();

        assert.ok(this.$('.table-condensed > thead > tr > th:first-child span').hasClass('sl-icon-previous'), 'year view has previous button class');

        assert.ok(this.$('.table-condensed > thead > tr > th:last-child span').hasClass('sl-icon-next'), 'year view has next button class');
    });

    ember_qunit.test('Check for classes set on items outside of range in picker', function (assert) {
        this.set('currentYear', 2015);
        this.set('currentMonth', 1);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [4, 25], [4, 37]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var missingOld = false;
        var missingNew = false;

        // test the days

        var days = this.$('>:first-child').find('.datepicker-days .day');

        var firstReached = false;
        var lastReached = false;

        days.each(function () {
            var testDay = parseInt($(this).text());

            if (1 === testDay) {
                firstReached = true;
            }

            if (!firstReached) {
                if (!$(this).hasClass('old')) {
                    missingOld = true;
                }
            }

            if (lastReached) {
                if (!$(this).hasClass('new')) {
                    missingNew = true;
                }
            }

            if (31 === testDay && firstReached) {
                lastReached = true;
            }
        });

        assert.notOk(missingOld, 'All days prior to the first have class "old"');

        assert.notOk(missingNew, 'All days after the 31st have class "new"');

        // test the years

        this.$('>:first-child').find('.datepicker-switch').trigger('click'); // open month picker
        this.$('>:first-child').find('.datepicker-switch').trigger('click'); // open year picker
        var yearSpan = this.$('>:first-child').find('.datepicker-switch').text().trim().split('-');

        var years = this.$('>:first-child').find('.datepicker-years > table > tbody > tr > td > *');

        missingOld = false;
        missingNew = false;

        years.each(function () {
            var testYear = parseInt($(this).text());

            if (testYear > parseInt(yearSpan[1])) {
                if (!$(this).hasClass('new')) {
                    missingNew = true;
                }
            }

            if (testYear < parseInt(yearSpan[0])) {
                if (!$(this).hasClass('old')) {
                    missingOld = true;
                }
            }
        });

        assert.notOk(missingOld, 'Years prior to range have class "old"');

        assert.notOk(missingNew, 'Years after selected ranged have class "new"');
    });

    ember_qunit.test('Setting currentYear and currentMonth modifies the view correctly', function (assert) {

        var currentYear = 2025;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 1);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [4, 25], [4, 37]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'January ' + currentYear, 'Current month and year are set correctly in the view');
    });

    qunit.skip('Setting dateValuePath modifies the view correctly', function (assert) {

        var modifiedValuePath = Ember['default'].A([{
            modifiedDatePath: new Date(2022, 8, 17),
            label: 'Today!'
        }]);

        this.set('currentYear', 2022);

        this.set('currentMonth', 9);

        this.set('content', modifiedValuePath);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'dateValuePath', 'modifiedDatePath', 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [5, 24], [5, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [6, 25], [6, 37]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.active').text().trim(), 17, 'Active day is set correctly');
    });

    qunit.skip('Active day is set correctly', function (assert) {

        this.set('currentYear', 2022);

        this.set('currentMonth', 9);

        this.set('content', Ember['default'].A());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []]], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.active').text().trim(), '', 'No active day is set');

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [5, 25], [5, 37]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.active').text().trim(), 17, 'Active day is set correctly');

        this.set('content', multipleTestContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [5, 25], [5, 37]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var active = this.$('>:first-child').find('.active');

        assert.strictEqual(active.length, 2, 'There are two unique dates assigned the .active class');

        assert.strictEqual(active[0].innerHTML, '17', 'First unique date instance is correct');

        assert.strictEqual(active[1].innerHTML, '20', 'Second unique date instance is correct');
    });

    ember_qunit.test('Setting locale to Spanish modifies the view correctly', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 9);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['locale', 'es', 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [5, 25], [5, 37]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'Septiembre ' + currentYear, 'Current month in Spanish is set correctly in the view');
    });

    ember_qunit.test('Action fires when day is clicked', function (assert) {

        assert.expect(1);

        var done = assert.async();

        this.set('currentYear', 2022);

        this.set('currentMonth', 9);

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['action', 'testAction', 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 20], [4, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [5, 24], [5, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [6, 25], [6, 37]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction', function () {
            assert.ok(true, 'The test action was called');

            done();
        });

        this.$('>:first-child').find('.active').click();
    });

    qunit.skip('Action passes through expected objects in content array', function (assert) {

        assert.expect(8);

        var done = assert.async();

        this.set('currentYear', 2022);

        this.set('currentMonth', 9);

        this.set('content', multipleTestContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['action', 'testAction', 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 20], [4, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [5, 24], [5, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [6, 25], [6, 37]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction', function (dateContent) {

            // This group of asserts verifies the multiple events on Sep. 17th
            if ('Event 1 Today!' === dateContent[0].label) {
                assert.strictEqual(dateContent[0].date.toString(), 'Sat Sep 17 2022 00:00:00 GMT-0500 (CDT)', 'The date property was passed through');

                assert.strictEqual(dateContent[0].label, 'Event 1 Today!', 'The label property was passed through');

                assert.strictEqual(dateContent[1].date.toString(), 'Sat Sep 17 2022 00:00:00 GMT-0500 (CDT)', 'The date property was passed through');

                assert.strictEqual(dateContent[1].label, 'Event 2 Today!', 'The label property was passed through');

                assert.strictEqual(dateContent[2].date.toString(), 'Sat Sep 17 2022 00:00:00 GMT-0500 (CDT)', 'The date property was passed through');

                assert.strictEqual(dateContent[2].label, 'Event 3 Today!', 'The label property was passed through');
                // This group of asserts verifies the event on Sep. 20th
            } else {
                    assert.strictEqual(dateContent[0].date.toString(), 'Tue Sep 20 2022 00:00:00 GMT-0500 (CDT)', 'The date property was passed through');

                    assert.strictEqual(dateContent[0].label, 'Event 1 Another Day!', 'The label property was passed through');
                }

            done();
        });

        this.$('>:first-child').find('.active').click();
    });

    qunit.skip('Setting viewMode modifies the view correctly', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 9);

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []]], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child'), '"viewMode" of days renders');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child'), '"viewMode" of months renders');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child'), '"viewMode" of years renders');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [5, 25], [5, 37]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'The current month and year are set correctly');

        assert.strictEqual(this.$('>:first-child').find('.active').text().trim(), 17, 'The current day is set correctly');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'viewMode', 'months', 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [5, 24], [5, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [6, 25], [6, 37]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'The current year is set correctly');

        assert.strictEqual(this.$('>:first-child').find('.active').text().trim(), 'Sep', 'The current month is set correctly');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'viewMode', 'years', 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [5, 24], [5, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [6, 25], [6, 37]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'The year range is set correctly');

        assert.strictEqual(this.$('>:first-child').find('.active').text().trim(), currentYear.toString(), 'The current year is set correctly');
    });

    ember_qunit.test('Navigating Forward by Month', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 9);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [4, 25], [4, 37]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'The current month is set correctly');

        this.$('>:first-child').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'October ' + currentYear, 'The next month is set correctly');
    });

    ember_qunit.test('Navigating Backward by Month', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 9);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [4, 25], [4, 37]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'The current month is set correctly');

        this.$('>:first-child').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'August ' + currentYear, 'The previous month is set correctly');
    });

    ember_qunit.test('Navigating Forward by Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'The current year is set correctly');

        this.$('>:first-child').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), (currentYear + 1).toString(), 'The next year is set correctly');
    });

    ember_qunit.test('Navigating Backward by Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'The current year is set correctly');

        this.$('>:first-child').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), (currentYear - 1).toString(), 'The previous year is set correctly');
    });

    ember_qunit.test('Navigating Forward by Decade', function (assert) {

        this.set('currentYear', 2022);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'The current Decade is set correctly');

        this.$('>:first-child').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2030-2039', 'The next Decade is set correctly');
    });

    ember_qunit.test('Navigating Backward by Decade', function (assert) {

        this.set('currentYear', 2022);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'The current Decade is set correctly');

        this.$('>:first-child').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2010-2019', 'The previous Decade is set correctly');
    });

    ember_qunit.test('When Locked, interacting with the view is not Possible', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 8);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-calendar', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').hasClass('sl-calendar-locked'), false, 'Default rendered component does not have class "sl-calendar-locked"');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['locked', true, 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [5, 25], [5, 37]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-calendar-locked'), 'Locked, rendered component has class "sl-calendar-locked"');

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'August ' + currentYear, 'The current month is set correctly');

        this.$('>:first-child').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'August ' + currentYear, 'The next month is set correctly');

        this.$('>:first-child').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'August ' + currentYear, 'The next month is set correctly');

        this.$('>:first-child').find('.datepicker-switch').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'August ' + currentYear, 'The next month is set correctly');
    });

    ember_qunit.test('Navigating from Month to Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 9);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [4, 25], [4, 37]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'The current month is set correctly');

        this.$('>:first-child').find('.datepicker-switch').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'The current year is set correctly');
    });

    ember_qunit.test('Navigating from Year to Month', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 9);

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [5, 25], [5, 37]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'The current year is set correctly');

        this.$('>:first-child').find('.active').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'The current month is set correctly');
    });

    ember_qunit.test('Navigating from Year to Decade', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'The current year is set correctly');

        this.$('>:first-child').find('.datepicker-switch').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'The current decade is set correctly');
    });

    ember_qunit.test('Navigating from Decade to Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'The current decade is set correctly');

        this.$('>:first-child').find('.active').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'The current year is set correctly');
    });

    ember_qunit.test('Navigating Forward by Month Crosses to Next Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 12);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [4, 25], [4, 37]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'December ' + currentYear, 'The current month is set correctly');

        this.$('>:first-child').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'January ' + (currentYear + 1), 'The next month is in the next year');
    });

    ember_qunit.test('Navigating Backward by Month Crosses to Previous Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear', currentYear);

        this.set('currentMonth', 1);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [3, 24], [3, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [4, 25], [4, 37]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'January ' + currentYear, 'The current month is set correctly');

        this.$('>:first-child').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'December ' + (currentYear - 1), 'The previous month is in the previous year');
    });

    ember_qunit.test('All Days are Displayed in Order', function (assert) {
        this.set('currentYear', 2015);
        this.set('currentMonth', 1);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['viewMode', 'days', 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth', ['loc', [null, [5, 25], [5, 37]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('td').text().trim(), '28293031123456789101112131415161718192021222324252627282930311234567', 'All days listed in order for specified month as expected');
    });

    ember_qunit.test('All Twelve Months are Displayed in Order', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['viewMode', 'months'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('tbody span').text().trim(), 'JanFebMarAprMayJunJulAugSepOctNovDec', 'Twelve months are listed in order');
    });

    ember_qunit.test('Twelve Years are Displayed in Order', function (assert) {

        this.set('currentYear', 2022);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['viewMode', 'years', 'currentYear', ['subexpr', '@mut', [['get', 'currentYear', ['loc', [null, [4, 24], [4, 35]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('tbody span').text().trim(), '201920202021202220232024202520262027202820292030', 'Twelve years are listed in order');
    });

    // -------------------------------------------------------------------------
    // Start of Dual Component Tests

    ember_qunit.test('Dual instance: Action fires when day is clicked', function (assert) {

        var testAction1 = sinon['default'].spy();
        var testAction2 = sinon['default'].spy();

        this.set('currentYear1', 2035);
        this.set('currentMonth1', 1);

        this.set('currentYear2', 2022);
        this.set('currentMonth2', 9);

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 14,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['action', 'testAction1', 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 20], [4, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [5, 24], [5, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth1', ['loc', [null, [6, 25], [6, 38]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]], ['inline', 'sl-calendar', [], ['action', 'testAction2', 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [10, 20], [10, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [11, 24], [11, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth2', ['loc', [null, [12, 25], [12, 38]]]]], [], []]], ['loc', [null, [8, 8], [13, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction1', testAction1);
        this.on('testAction2', testAction2);

        this.$('>:nth-child(2)').find('.active').click();

        assert.notOk(testAction1.called, 'Component instance one: did not fire an action');

        assert.ok(testAction2.called, 'Component instance two: fired an action');
    });

    ember_qunit.test('Dual instance: Navigating Forward by Month', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        var currentMonth = 9;
        this.set('currentMonth1', currentMonth);
        this.set('currentMonth2', currentMonth);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentMonth', ['subexpr', '@mut', [['get', 'currentMonth1', ['loc', [null, [3, 25], [3, 38]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [4, 24], [4, 36]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentMonth', ['subexpr', '@mut', [['get', 'currentMonth2', ['loc', [null, [7, 25], [7, 38]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [8, 24], [8, 36]]]]], [], []]], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'Component instance one: current month has not changed');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), 'October ' + currentYear, 'Component instance two: Current month advances one month');
    });

    ember_qunit.test('Dual instance: Navigating Backward by Month', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        var currentMonth = 9;
        this.set('currentMonth1', currentMonth);
        this.set('currentMonth2', currentMonth);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentMonth', ['subexpr', '@mut', [['get', 'currentMonth1', ['loc', [null, [3, 25], [3, 38]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [4, 24], [4, 36]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentMonth', ['subexpr', '@mut', [['get', 'currentMonth2', ['loc', [null, [7, 25], [7, 38]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [8, 24], [8, 36]]]]], [], []]], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'Component instance one: current month has not changed');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), 'August ' + currentYear, 'Component instance two: Current month adjusts to previous month');
    });

    ember_qunit.test('Dual instance: Navigating Forward by Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'Component instance one: year did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), (currentYear + 1).toString(), 'Component instance two: year advances by one year');
    });

    ember_qunit.test('Dual instance: Navigating Backward by Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'Component instance one: year did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), (currentYear - 1).toString(), 'Component instance two: year adjusts to previous year');
    });

    ember_qunit.test('Dual instance: Navigating Forward by Decade', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'Component instance one: decade did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), '2030-2039', 'Component instance two: next decade is set correctly');
    });

    ember_qunit.test('Dual instance: Navigating Backward by Decade', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'Component instance one: decade did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), '2010-2019', 'Component instance two: decade is set to the previous decade');
    });

    ember_qunit.test('Dual instance: Navigating from Month to Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        var currentMonth = 9;
        this.set('currentMonth1', currentMonth);
        this.set('currentMonth2', currentMonth);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth1', ['loc', [null, [4, 25], [4, 38]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth2', ['loc', [null, [8, 25], [8, 38]]]]], [], []]], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.datepicker-switch').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'Component instance one: current month did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), currentYear.toString(), 'Component instance two: current year is set correctly');
    });

    ember_qunit.test('Dual instance: Navigating from Year to Month', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        var currentMonth = 9;
        this.set('currentMonth1', currentMonth);
        this.set('currentMonth2', currentMonth);

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 14,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [4, 24], [4, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth1', ['loc', [null, [5, 25], [5, 38]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [7, 10]]]], ['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [9, 20], [9, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [10, 24], [10, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth2', ['loc', [null, [11, 25], [11, 38]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [8, 8], [13, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.active').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'Component instance one: current year did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), 'September ' + currentYear, 'Component instance two: current month is set correctly');
    });

    ember_qunit.test('Dual instance: Navigating from Year to Decade', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'viewMode', 'months'], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.datepicker-switch').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), currentYear.toString(), 'Component instance one: current year did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), '2020-2029', 'Component instance two: current decade is set correctly');
    });

    ember_qunit.test('Dual instance: Navigating from Decade to Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        this.set('content', testContent);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 12,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [4, 24], [4, 36]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [2, 8], [6, 10]]]], ['inline', 'sl-calendar', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [8, 20], [8, 27]]]]], [], []], 'currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [9, 24], [9, 36]]]]], [], []], 'viewMode', 'years'], ['loc', [null, [7, 8], [11, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.active').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), '2020-2029', 'Component instance two: current decade did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), currentYear.toString(), 'Component instance two: current year is set correctly');
    });

    ember_qunit.test('Dual instance: Navigating Forward by Month Crosses to Next Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        var currentMonth = 12;
        this.set('currentMonth1', currentMonth);
        this.set('currentMonth2', currentMonth);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth1', ['loc', [null, [4, 25], [4, 38]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth2', ['loc', [null, [8, 25], [8, 38]]]]], [], []]], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-next').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'December ' + currentYear, 'Component instance one: current month did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), 'January ' + (currentYear + 1), 'Component instance two: next month is in the next year');
    });

    ember_qunit.test('Dual instance: Navigating Backward by Month Crosses to Previous Year', function (assert) {

        var currentYear = 2022;
        this.set('currentYear1', currentYear);
        this.set('currentYear2', currentYear);

        var currentMonth = 1;
        this.set('currentMonth1', currentMonth);
        this.set('currentMonth2', currentMonth);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear1', ['loc', [null, [3, 24], [3, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth1', ['loc', [null, [4, 25], [4, 38]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]], ['inline', 'sl-calendar', [], ['currentYear', ['subexpr', '@mut', [['get', 'currentYear2', ['loc', [null, [7, 24], [7, 36]]]]], [], []], 'currentMonth', ['subexpr', '@mut', [['get', 'currentMonth2', ['loc', [null, [8, 25], [8, 38]]]]], [], []]], ['loc', [null, [6, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:nth-child(2)').find('.sl-icon-previous').click();

        assert.strictEqual(this.$('>:first-child').find('.datepicker-switch').text().trim(), 'January ' + currentYear, 'Component instance one: current month did not change');

        assert.strictEqual(this.$('>:nth-child(2)').find('.datepicker-switch').text().trim(), 'December ' + (currentYear - 1), 'Component instance two: previous month is in the previous year');
    });

});
define('dummy/tests/integration/components/sl-calendar-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-calendar-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-calendar-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-chart-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-chart', 'Integration | Component | sl chart', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.set('testseries', []);
        this.set('testoptions', {});

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-chart', [], ['series', ['subexpr', '@mut', [['get', 'testseries', ['loc', [null, [2, 26], [2, 36]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'testoptions', ['loc', [null, [2, 45], [2, 56]]]]], [], []]], ['loc', [null, [2, 8], [2, 58]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-chart'), 'Has class "sl-ember-components-chart"');

        assert.ok(this.$('>:first-child').hasClass('panel'), 'has class "panel"');

        assert.ok(this.$('>:first-child').hasClass('panel-default'), 'has class "panel-default"');
    });

    ember_qunit.test('Loading state adds loading class', function (assert) {
        this.set('testseries', []);
        this.set('testoptions', {});

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-chart', [], ['series', ['subexpr', '@mut', [['get', 'testseries', ['loc', [null, [2, 26], [2, 36]]]]], [], []], 'loading', false, 'options', ['subexpr', '@mut', [['get', 'testoptions', ['loc', [null, [2, 59], [2, 70]]]]], [], []]], ['loc', [null, [2, 8], [2, 72]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').find('> .panel-body').hasClass('sl-loading'), 'Default rendered component does not have "sl-loading" class');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-chart', [], ['series', ['subexpr', '@mut', [['get', 'testseries', ['loc', [null, [2, 26], [2, 36]]]]], [], []], 'loading', true, 'options', ['subexpr', '@mut', [['get', 'testoptions', ['loc', [null, [2, 58], [2, 69]]]]], [], []]], ['loc', [null, [2, 8], [2, 71]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('> .panel-body').hasClass('sl-loading'), 'Default rendered component does have "sl-loading" class');
    });

    ember_qunit.test('Title property is set', function (assert) {
        this.set('testseries', []);
        this.set('testoptions', {});

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-chart', [], ['series', ['subexpr', '@mut', [['get', 'testseries', ['loc', [null, [2, 26], [2, 36]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'testoptions', ['loc', [null, [2, 45], [2, 56]]]]], [], []]], ['loc', [null, [2, 8], [2, 58]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.panel-heading').html(), undefined, 'No chart title is rendered when title is not set');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-chart', [], ['title', 'Peak serve hours', 'series', ['subexpr', '@mut', [['get', 'testseries', ['loc', [null, [2, 51], [2, 61]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'testoptions', ['loc', [null, [2, 70], [2, 81]]]]], [], []]], ['loc', [null, [2, 8], [2, 83]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.panel-heading').html(), 'Peak serve hours', 'Chart title is created with title value');
    });

    ember_qunit.test('Width property is set on the internal chart', function (assert) {
        var width = 100;

        this.set('testseries', []);
        this.set('testoptions', {});
        this.set('width', width);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-chart', [], ['series', ['subexpr', '@mut', [['get', 'testseries', ['loc', [null, [2, 26], [2, 36]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'testoptions', ['loc', [null, [2, 45], [2, 56]]]]], [], []], 'width', ['subexpr', '@mut', [['get', 'width', ['loc', [null, [2, 63], [2, 68]]]]], [], []]], ['loc', [null, [2, 8], [2, 70]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('> .panel-body > div').width(), width, 'Chart div has correct width by default');

        width = 50;
        this.set('width', width);

        assert.strictEqual(this.$('>:first-child').find('> .panel-body > div').width(), width, 'Chart div width updates correctly');
    });

    ember_qunit.test('Height property is set on the internal chart', function (assert) {
        var height = 100;

        this.set('testseries', []);
        this.set('testoptions', {});
        this.set('height', height);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-chart', [], ['series', ['subexpr', '@mut', [['get', 'testseries', ['loc', [null, [2, 26], [2, 36]]]]], [], []], 'options', ['subexpr', '@mut', [['get', 'testoptions', ['loc', [null, [2, 45], [2, 56]]]]], [], []], 'height', ['subexpr', '@mut', [['get', 'height', ['loc', [null, [2, 64], [2, 70]]]]], [], []]], ['loc', [null, [2, 8], [2, 72]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('> .panel-body > div').height(), height, 'Chart div has correct height by default');

        height = 50;
        this.set('height', height);

        assert.strictEqual(this.$('>:first-child').find('> .panel-body > div').height(), height, 'Chart div height updates correctly');
    });

});
define('dummy/tests/integration/components/sl-chart-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-chart-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-chart-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-checkbox-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-checkbox', 'Integration | Component | sl checkbox', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-checkbox', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-checkbox'), 'Has class "sl-ember-components-checkbox"');

        assert.ok(this.$('>:first-child').hasClass('checkbox'), 'Has class "checkbox"');

        assert.ok(this.$('>:first-child').hasClass('form-group'), 'Has class "form-group"');
    });

    ember_qunit.test('Disabled state applies class and disables input', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-checkbox', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').hasClass('disabled'), false, 'Initially does not have class "disabled"');

        assert.strictEqual(this.$('>:first-child').find('input').prop('disabled'), false, 'Rendered input is initially enabled');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-checkbox', [], ['disabled', true], ['loc', [null, [2, 8], [2, 37]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').hasClass('disabled'), true, 'Has class "disabled"');

        assert.strictEqual(this.$('>:first-child').find('input').prop('disabled'), true, 'Rendered input is disabled');
    });

    ember_qunit.test('Checked state applies property to input', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-checkbox', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('checked'), false, 'Rendered input is not checked');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-checkbox', [], ['checked', true], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('checked'), true, 'Rendered input is checked');
    });

    ember_qunit.test('Inline property sets relevant class', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-checkbox', [], ['inline', true], ['loc', [null, [2, 8], [2, 35]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('checkbox-inline'), 'has class "checkbox-inline"');

        assert.notOk(this.$('>:first-child').hasClass('form-group'), 'inline checkbox does not have class "form-group"');
    });

    ember_qunit.test('name applies property to input', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-checkbox', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('name'), '', 'Rendered input has empty name');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-checkbox', [], ['name', 'testname'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('name'), 'testname', 'Rendered input has name set');
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-checkbox', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 28], [2, 33]]]]], [], []]], ['loc', [null, [2, 8], [2, 35]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-checkbox', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 30], [2, 37]]]]], [], []]], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-checkbox', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 42], [2, 49]]]]], [], []]], ['loc', [null, [2, 8], [2, 51]]]]],
                locals: [],
                templates: []
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-checkbox-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-checkbox-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-checkbox-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-date-picker-test', ['ember-qunit', 'ember', 'sinon'], function (ember_qunit, Ember, sinon) {

    'use strict';

    var defaultTemplate = Ember['default'].HTMLBars.template((function () {
        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 3,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n    ');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
            },
            statements: [['content', 'sl-date-picker', ['loc', [null, [2, 4], [2, 22]]]]],
            locals: [],
            templates: []
        };
    })());

    ember_qunit.moduleForComponent('sl-date-picker', 'Integration | Component | sl date picker', {
        integration: true,

        afterEach: function afterEach() {
            Ember['default'].$('.datepicker').remove();
        }
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(defaultTemplate);

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-date-picker'), 'Has class "sl-ember-components-date-picker"');
    });

    ember_qunit.test('disabled is accepted as a parameter', function (assert) {
        this.render(defaultTemplate);

        var input = this.$('>:first-child').find('input');

        assert.notOk(input.prop('disabled'), 'Default rendered date picker is not disabled');

        this.render('\n        {{sl-date-picker disabled=true}}\n    ');

        input = this.$('>:first-child').find('input');

        assert.ok(input.prop('disabled'), 'Date picker is disabled when disabled property is true');
    });

    ember_qunit.test('helpText is accepted as a parameter', function (assert) {
        this.render(defaultTemplate);

        var first = this.$('>:first-child');

        assert.strictEqual(first.find('.help-block').length, 0, 'Default rendered component does not have any help text');

        var helpText = 'Please select a date';

        this.set('helpText', helpText);

        this.render('\n        {{sl-date-picker helpText=helpText}}\n    ');

        first = this.$('>:first-child');

        assert.strictEqual(first.find('.help-block').text().trim(), helpText);
    });

    ember_qunit.test('value is accepted as a parameter', function (assert) {
        this.render(defaultTemplate);

        var input = this.$('>:first-child').find('input');

        assert.strictEqual(input.val().trim(), '', 'Default rendered datepicker has no prefilled value');

        var value = '10/20/2010';

        this.set('value', value);

        this.render('\n        {{sl-date-picker value=value}}\n    ');

        input = this.$('>:first-child').find('input');

        assert.strictEqual(input.val().trim(), value);
    });

    ember_qunit.test('label is accepted as a parameter', function (assert) {
        this.render(defaultTemplate);

        assert.strictEqual(this.$('>:first-child').find('label').length, 0, 'Default rendered date picker does not have a label');

        var labeltext = 'lorem ipsum';

        this.set('label', labeltext);

        this.render('hbs\n        {{sl-date-picker label=label}}\n    ');

        var first = this.$('>:first-child');

        assert.strictEqual(first.find('label').html(), labeltext, 'label element was created with label parameter text');

        assert.strictEqual(first.find('label').prop('for'), first.find('input').prop('id'), 'label is used for date input');
    });

    ember_qunit.test('placeholder is accepted as a parameter', function (assert) {
        this.render(defaultTemplate);

        var input = this.$('>:first-child').find('input');

        assert.notOk(input.prop('placeholder'), 'Default rendered component does not have a placeholder');

        var placeholder = 'Select a date';

        this.set('placeholder', placeholder);

        this.render('hbs\n        {{sl-date-picker placeholder=placeholder}}\n    ');

        input = this.$('>:first-child').find('input');

        assert.strictEqual(input.prop('placeholder'), placeholder);
    });

    ember_qunit.test('action is fired when date changes on datepicker', function (assert) {
        assert.expect(1);

        var done = assert.async();

        this.on('action', function () {
            assert.ok('Action was fired');

            done();
        });

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-picker', [], ['action', 'action'], ['loc', [null, [2, 8], [2, 42]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').find('input.date-picker').triggerHandler('focus');

        Ember['default'].$('.day:first').click();
    });

    ember_qunit.test('updateDateRange() - clears input date when outside of startDate range', function (assert) {
        this.set('startDate');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-picker', [], ['startDate', ['subexpr', '@mut', [['get', 'startDate', ['loc', [null, [2, 35], [2, 44]]]]], [], []]], ['loc', [null, [2, 8], [2, 47]]]]],
                locals: [],
                templates: []
            };
        })()));

        var input = this.$('>:first-child').find('input.date-picker');

        input.triggerHandler('focus');

        Ember['default'].$('.day:first').click();

        this.set('startDate', window.moment().add(30, 'days').toDate());

        assert.strictEqual(input.datepicker().val(), '', 'The datepicker input value was cleared successfully');
    });

    ember_qunit.test('updateDateRange() - clears input date when outside of endDate range', function (assert) {
        this.set('endDate');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-picker', [], ['endDate', ['subexpr', '@mut', [['get', 'endDate', ['loc', [null, [2, 33], [2, 40]]]]], [], []]], ['loc', [null, [2, 8], [2, 42]]]]],
                locals: [],
                templates: []
            };
        })()));

        var input = this.$('>:first-child').find('input.date-picker');

        input.triggerHandler('focus');

        Ember['default'].$('.day:first').click();

        this.set('endDate', window.moment().subtract(60, 'days').toDate());

        assert.strictEqual(input.datepicker().val(), '', 'The datepicker input value was cleared successfully');
    });

    ember_qunit.test('End date is set on datepicker when endDate property is updated', function (assert) {
        var endDate = window.moment('2016-01-01').toDate();
        var endDateTwo = window.moment('2016-02-02').toDate();

        this.set('endDate', endDate);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-picker', [], ['endDate', ['subexpr', '@mut', [['get', 'endDate', ['loc', [null, [2, 33], [2, 40]]]]], [], []]], ['loc', [null, [2, 8], [2, 42]]]]],
                locals: [],
                templates: []
            };
        })()));

        var input = this.$('>:first-child').find('input.date-picker');
        var datePicker = input.data('datepicker');
        var spy = sinon['default'].spy(Object.getPrototypeOf(datePicker), 'setEndDate');

        this.set('endDate', endDateTwo);

        assert.ok(spy.calledWith(endDateTwo), 'endDate is set when property is updated');

        datePicker.setEndDate.restore();
    });

    ember_qunit.test('Start date is set on datepicker when startDate property is updated', function (assert) {
        var startDate = window.moment('2016-01-01').toDate();
        var startDateTwo = window.moment('2016-02-02').toDate();

        this.set('startDate', startDate);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-picker', [], ['startDate', ['subexpr', '@mut', [['get', 'startDate', ['loc', [null, [2, 35], [2, 44]]]]], [], []]], ['loc', [null, [2, 8], [2, 46]]]]],
                locals: [],
                templates: []
            };
        })()));

        var input = this.$('>:first-child').find('input.date-picker');
        var datePicker = input.data('datepicker');
        var spy = sinon['default'].spy(Object.getPrototypeOf(datePicker), 'setStartDate');

        this.set('startDate', startDateTwo);

        assert.ok(spy.calledWith(startDateTwo), 'startDate is set when property is updated');

        datePicker.setStartDate.restore();
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 28], [2, 35]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 40], [2, 47]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-date-picker-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-date-picker-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-date-picker-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-date-range-picker-test', ['ember', 'ember-qunit', 'qunit'], function (Ember, ember_qunit, qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-date-range-picker', 'Integration | Component | sl date range picker', {
        afterEach: function afterEach() {
            Ember['default'].$('.datepicker').remove();
        },

        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['label', 'Select date range', 'startDatePlaceholder', '__StartPlaceholder__', 'endDatePlaceholder', '__EndPlaceholder__'], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-date-range-picker'), 'Has class "sl-ember-components-date-range-picker"');
    });

    ember_qunit.test('placeholders are accepted', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['label', 'Select date range', 'startDatePlaceholder', '__StartPlaceholder__', 'endDatePlaceholder', '__EndPlaceholder__'], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-start-date').find('input').prop('placeholder'), '__StartPlaceholder__', 'Start date input placeholder is set');

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-end-date').find('input').prop('placeholder'), '__EndPlaceholder__', 'End date input placeholder is set');
    });

    ember_qunit.test('label is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['label', 'lorem ipsum'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label').html(), 'lorem ipsum', 'The "label" property text was set');

        assert.strictEqual(this.$('>:first-child').find('label').prop('for'), this.$('>:first-child').find('.sl-daterange-start-date').find('input').prop('id'), '"label for" property has the correct value');
    });

    ember_qunit.test('endDatePlaceholder is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['endDatePlaceholder', 'Select end date'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-end-date').find('input').attr('placeholder'), 'Select end date', 'The "endDatePlaceholder" property text was set');
    });

    ember_qunit.test('startDatePlaceholder is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['startDatePlaceholder', 'Select start date'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-start-date').find('input').attr('placeholder'), 'Select start date', 'The "startDatePlaceholder" property text was set');
    });

    ember_qunit.test('helpText is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['helpText', 'This is helpful'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.help-block').html(), 'This is helpful', 'The "helpText" property text was set');
    });

    ember_qunit.test('startDateValue is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['startDateValue', '09/25/2015'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-start-date').find('input').val(), '09/25/2015', 'The "startDateValue" property text was set');
    });

    ember_qunit.test('endDateValue is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['endDateValue', '12/25/2015'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-end-date').find('input').val(), '12/25/2015', 'The "endDateValue" property text was set');
    });

    ember_qunit.test('format is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['format', 'm/d/yyyy', 'startDateValue', '09/25/2015'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var input = this.$('>:first-child').find('.sl-daterange-start-date').find('input');
        input.triggerHandler('focus');

        Ember['default'].$('.datepicker').last().find('.datepicker-days').find('td').not('.old').first().trigger('click');

        assert.strictEqual(input.val(), '9/1/2015', 'The selected date was formatted based on the "format" property');
    });

    ember_qunit.test('minDate is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['minDate', '09/15/2015', 'startDateValue', '09/25/2015'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').find('.sl-daterange-start-date').find('input').triggerHandler('focus');

        assert.strictEqual(Ember['default'].$('.datepicker').last().find('.datepicker-days').find('td').not('.disabled').first().text(), '15', 'The "minDate" was set correctly');
    });

    ember_qunit.test('maxDate is accepted as a parameter', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['maxDate', '09/28/2015', 'endDateValue', '09/25/2015'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').find('.sl-daterange-end-date').find('input').triggerHandler('focus');

        assert.strictEqual(Ember['default'].$('.datepicker').last().find('.datepicker-days').find('td').not('.disabled').last().text(), '28', 'The "maxDate" was set correctly');
    });

    ember_qunit.test('Selected day is set in the start date input field', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['startDateValue', '09/25/2015'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var input = this.$('>:first-child').find('.sl-daterange-start-date').find('input');
        input.triggerHandler('focus');

        Ember['default'].$('.datepicker').last().find('.datepicker-days').find('td').not('.old').first().trigger('click');

        assert.strictEqual(input.val(), '09/01/2015', 'The selected day is set in the input field');
    });

    ember_qunit.test('Selected day is set in the end date input field', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['endDateValue', '09/25/2015'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var input = this.$('>:first-child').find('.sl-daterange-end-date').find('input');
        input.triggerHandler('focus');

        Ember['default'].$('.datepicker').last().find('.datepicker-days').find('td').not('.old').first().trigger('click');

        assert.strictEqual(input.val(), '09/01/2015', 'The selected day is set in the input field');
    });

    qunit.skip('"startDateValue" cannot be less than "minDate"', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['minDate', '09/28/2015', 'startDateValue', '09/25/2015'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-start-date').find('input').val(), '09/28/2015', 'The "startDateValue" is not less than the "minDate"');
    });

    qunit.skip('"endDateValue" cannot be more than "maxDate"', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['maxDate', '09/25/2015', 'endDateValue', '09/28/2015'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-daterange-end-date').find('input').val(), '09/25/2015', 'The "endDateValue" is not more than the "maxDate"');
    });

    qunit.skip('"endDateValue" cannot be less than "startDateValue"', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['startDateValue', '09/25/2015', 'endDateValue', '09/20/2015'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notEqual(this.$('>:first-child').find('.sl-daterange-end-date').find('input').val(), '09/20/2015', 'The "endDateValue" is not less than the "startDateValue"');
    });

    qunit.skip('"startDateValue" cannot be more than "endDateValue"', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-range-picker', [], ['startDateValue', '09/25/2015', 'endDateValue', '09/20/2015'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notEqual(this.$('>:first-child').find('.sl-daterange-start-date').find('input').val(), '09/25/2015', 'The "startDateValue" is not more than the "endDateValue"');
    });

});
define('dummy/tests/integration/components/sl-date-range-picker-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-date-range-picker-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-date-range-picker-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-date-time-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-date-time', 'Integration | Component | sl date time', {
        integration: true
    });

    ember_qunit.test('Defaults applied correctly', function (assert) {

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-time', [], ['timezone', 'America/Chicago'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var element = this.$('>:first-child');

        assert.ok(element.hasClass('sl-ember-components-date-time'), 'Default rendered component has class "sl-ember-components-date-time"');

        var defaultRendered = element.text().trim();
        var defaultRegEx = /^[a-zA-Z]+[,]\s[a-zA-Z]+\s\d{1,2}[a-z]{2}\s\d{4}[,]\s\d{1,2}[:]\d{2}\s(AM|PM)\s[A-Z]+$/;

        assert.strictEqual(defaultRegEx.test(defaultRendered), true, 'Default datetime string matches default pattern');

        var datetimeAttr = element.attr('datetime');
        var dataOriginalTitleAttr = element.attr('data-original-title');

        assert.strictEqual(datetimeAttr, dataOriginalTitleAttr, 'Attributes datetime and data-original-title match');

        var datetimeTZRegex = /^\d{4}[-]\d{2}[-]\d{2}\s\d{1,2}[:]\d{2}\s[A-Z]+$/;

        assert.strictEqual(datetimeTZRegex.test(element.attr('datetime')), true, 'Attribute datetime matches ISO datetime format plus timezone code');

        var data = element.data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), dataOriginalTitleAttr, 'Tooltip title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default tooltip trigger is "hover focus"');
    });

    ember_qunit.test('Relative values applied correctly', function (assert) {

        var pastDate = window.moment().subtract(4321, 'minutes').toISOString();

        this.set('value', pastDate);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-time', [], ['timezone', 'America/Chicago', 'format', 'relative', 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [5, 18], [5, 23]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var pastRendered = this.$('>:first-child').text().trim();

        assert.strictEqual(pastRendered, window.moment(pastDate).fromNow(), 'Relative date is rendered correctly');

        var datetimeAttr = this.$('>:first-child').attr('datetime');
        var dataOriginalTitleAttr = this.$('>:first-child').attr('data-original-title');

        assert.strictEqual(datetimeAttr, dataOriginalTitleAttr, 'Attributes datetime and data-original-title match');

        assert.strictEqual(/^\d{4}[-]\d{2}[-]\d{2}\s\d{1,2}[:]\d{2}\s[A-Z]+$/.test(datetimeAttr), true, 'Attribute datetime matches ISO datetime format plus timezone code');

        var futureDate = window.moment().add(123456, 'minutes').toISOString();

        this.set('value', futureDate);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-time', [], ['timezone', 'America/Chicago', 'format', 'relative', 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [5, 18], [5, 23]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var futureRendered = this.$('>:first-child').text().trim();

        assert.strictEqual(futureRendered, 'in 3 months', 'Future datetime string matches default pattern');
    });

    ember_qunit.test('Date values applied correctly', function (assert) {

        var pastDateISO = window.moment().subtract(3, 'months').toISOString();

        this.set('value', pastDateISO);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-time', [], ['format', 'date', 'timezone', 'America/Chicago', 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [5, 18], [5, 23]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var pastRendered = this.$('>:first-child').text().trim();
        var pastDate = window.moment().subtract(3, 'months');

        assert.strictEqual(pastRendered, pastDate.format('YYYY-MM-DD'), 'Default date string matches default date pattern');

        var datetimeAttr = this.$('>:first-child').attr('datetime');
        var dataOriginalTitleAttr = this.$('>:first-child').attr('data-original-title');

        assert.strictEqual(datetimeAttr, dataOriginalTitleAttr, 'Attributes datetime and data-original-title match');

        assert.strictEqual(/^\d{4}[-]\d{2}[-]\d{2}\s\d{1,2}[:]\d{2}\s[A-Z]+$/.test(this.$('>:first-child').attr('datetime')), true, 'Attribute datetime matches ISO datetime format plus timezone code');
    });

    ember_qunit.test('tooltip properties are set correctly', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-time', [], ['timezone', 'America/Chicago'], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        var datetimeValue = this.$('>:first-child').attr('data-original-title');

        assert.strictEqual(tooltipData.getTitle(), datetimeValue, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-time', [], ['timezone', 'America/Chicago', 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [4, 20], [4, 27]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-date-time', [], ['timezone', 'America/Chicago', 'title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [4, 18], [4, 23]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [5, 20], [5, 27]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-date-time-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-date-time-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-date-time-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-drop-button-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-drop-button', 'Integration | Component | sl drop button', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-drop-button', ['loc', [null, [2, 8], [2, 26]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-drop-button'), 'Has class "sl-ember-components-drop-button"');

        assert.ok(this.$('>:first-child').hasClass('btn-group'), 'Has class "btn-group"');

        assert.ok(this.$('>:first-child').find('button').hasClass('dropdown-toggle'), 'Has class "dropdown-toggle"');

        assert.ok(this.$('>:first-child').find('button').hasClass('btn-default'), 'Button has class "btn-default"');

        assert.ok(this.$('>:first-child').find('ul').hasClass('dropdown-menu'), 'Has class "dropdown-menu"');

        assert.strictEqual(this.$('>:first-child').find('ul').attr('role'), 'menu', 'ARIA role is properly set to "menu"');
    });

    ember_qunit.test('Theme property applies theme class', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-button', [], ['theme', 'hover'], ['loc', [null, [2, 8], [2, 40]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('button').hasClass('btn-hover'), 'Rendered drop-button has new theme class');
    });

    ember_qunit.test('Label property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-button', [], ['label', 'test'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'test', '"label" property is rendered correctly');
    });

    ember_qunit.test('size property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-button', [], ['size', 'large'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('button').hasClass('btn-lg'), '"size" property renders expected class "btn-lg"');
    });

    ember_qunit.test('align property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-button', [], ['align', 'right'], ['loc', [null, [2, 8], [2, 40]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('ul').hasClass('dropdown-menu-right'), '"align" property renders expected class "dropdown-menu-right"');
    });

    ember_qunit.test('Icon class property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-button', [], ['label', 'test'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('span.sl-icon-dropdown').length, 1, 'Default rendered component includes sl-icon-dropdown icon span');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-button', [], ['label', 'test', 'iconClass', 'test'], ['loc', [null, [2, 8], [2, 56]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('span.test').length, 1, 'Rendered component includes test icon span');
    });

    ember_qunit.test('label is set properly on "sl-drop-option"', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-drop-option', [], ['label', 'red'], ['loc', [null, [3, 12], [3, 42]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-drop-button', [], ['label', 'test'], 0, null, ['loc', [null, [2, 8], [4, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('ul').text().trim(), 'red', '"sl-drop-option" sets label properly');
    });

    ember_qunit.test('Content is yielded when label is not set', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('           ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement('div');
                        dom.setAttribute(el1, 'class', 'test');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 4,
                            'column': 27
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                },
                statements: [['block', 'sl-drop-button', [], [], 0, null, ['loc', [null, [2, 8], [4, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.test').length, 1);
    });

    ember_qunit.test('sl-drop-option label is supported', function (assert) {
        var testContent = {
            label: 'test'
        };

        this.set('content', [testContent]);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-button', [], ['content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [2, 33], [2, 40]]]]], [], []]], ['loc', [null, [2, 8], [2, 42]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('ul').text().trim(), 'test', '"label" property on sl-drop-option is supported');
    });

    ember_qunit.test('Click action triggers bound action', function (assert) {
        assert.expect(1);

        var done = assert.async();

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-drop-option', [], ['action', 'testAction', 'label', 'red'], ['loc', [null, [3, 12], [3, 62]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-drop-button', [], [], 0, null, ['loc', [null, [2, 8], [4, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        this.on('testAction', function () {
            assert.ok(true, 'The test action was called');

            done();
        });

        this.$('>:first-child').find('a').click();
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 28], [2, 35]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 40], [2, 47]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-drop-button-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-drop-button-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-drop-button-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-drop-option-divider-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-drop-option-divider', 'Integration | Component | sl drop option divider', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-drop-option-divider', ['loc', [null, [2, 8], [2, 34]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-drop-option-divider'), 'Has class "sl-ember-components-drop-option-divider"');

        assert.ok(this.$('>:first-child').hasClass('divider'), 'Rendered component initially has class "divider"');

        assert.strictEqual(this.$('>:first-child').attr('role'), 'separator', 'ARIA role is properly set to "separator"');
    });

});
define('dummy/tests/integration/components/sl-drop-option-divider-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-drop-option-divider-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-drop-option-divider-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-drop-option-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-drop-option', 'Integration | Component | sl drop option', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-drop-option', ['loc', [null, [2, 8], [2, 26]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-drop-option'), 'Default rendered component has class "sl-ember-components-drop-option"');

        assert.strictEqual(this.$('>:first-child').find('a').attr('role'), 'menuitem', 'ARIA role is properly set to "menuitem"');
    });

    ember_qunit.test('Action is wired into template hyperlink tag', function (assert) {
        assert.expect(1);

        var done = assert.async();

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-drop-option', [], ['action', 'testAction', 'label', 'test'], ['loc', [null, [2, 8], [2, 59]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction', function () {
            assert.ok(true, 'The test action was called');

            done();
        });

        this.$('>:first-child').find('a').click();
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Some yielded text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-drop-option', [], [], 0, null, ['loc', [null, [2, 8], [4, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('a').text().trim(), 'Some yielded text', 'Content is yielded correctly');
    });

});
define('dummy/tests/integration/components/sl-drop-option-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-drop-option-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-drop-option-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-grid-cell-test', ['ember', 'ember-qunit', 'sinon'], function (Ember, ember_qunit, sinon) {

    'use strict';

    ember_qunit.moduleForComponent('sl-grid-cell', 'Integration | Component | sl grid cell', {
        integration: true
    });

    var defaultColumn = Ember['default'].Object.extend({
        valuePath: 'value'
    });

    var defaultRecord = Ember['default'].Object.extend({
        value: 'Test'
    });

    var columnTemplate = Ember['default'].HTMLBars.template((function () {
        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 3,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n        ');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
            },
            statements: [['inline', 'sl-grid-cell', [], ['column', ['subexpr', '@mut', [['get', 'column', ['loc', [null, [2, 30], [2, 36]]]]], [], []]], ['loc', [null, [2, 8], [2, 38]]]]],
            locals: [],
            templates: []
        };
    })());

    ember_qunit.test('Column alignment class is applied', function (assert) {
        var column = defaultColumn.create({
            align: 'right'
        });

        this.set('column', column);

        this.render(columnTemplate);

        assert.ok(this.$('>:first-child').hasClass('text-right'), 'Component has expected class "text-right" with right-aligned column');
    });

    ember_qunit.test('Primary column class is applied', function (assert) {
        var column = defaultColumn.create({
            primary: true
        });

        this.set('column', column);

        this.render(columnTemplate);

        assert.ok(this.$('>:first-child').hasClass('primary-column'), 'Component has expected class "primary-column"');
    });

    ember_qunit.test('Content value is handled for valuePath', function (assert) {
        var column = defaultColumn.create();
        var record = defaultRecord.create();

        this.set('column', column);
        this.set('record', record);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid-cell', [], ['column', ['subexpr', '@mut', [['get', 'column', ['loc', [null, [2, 30], [2, 36]]]]], [], []], 'record', ['subexpr', '@mut', [['get', 'record', ['loc', [null, [2, 44], [2, 50]]]]], [], []]], ['loc', [null, [2, 8], [2, 52]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.equal(this.$('>:first-child').text().trim(), record.get('value'), 'record value matches content value');
    });

    ember_qunit.test('Clicking on grid-cell invokes onClick handler', function (assert) {
        var column = defaultColumn.create();
        var record = defaultRecord.create();
        var spyOnClick = sinon['default'].spy();

        this.set('column', column);
        this.set('record', record);

        this.on('onClick', spyOnClick);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid-cell', [], ['column', ['subexpr', '@mut', [['get', 'column', ['loc', [null, [2, 30], [2, 36]]]]], [], []], 'record', ['subexpr', '@mut', [['get', 'record', ['loc', [null, [2, 44], [2, 50]]]]], [], []], 'onClick', 'onClick'], ['loc', [null, [2, 8], [2, 70]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').click();

        assert.ok(spyOnClick.called, 'onClick action handler was called');
    });

});
define('dummy/tests/integration/components/sl-grid-cell-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-grid-cell-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-grid-cell-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-grid-column-header-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-grid-column-header', 'Integration | Component | sl grid column header', {
        integration: true
    });

    ember_qunit.test('Sorted icon class is applied correctly', function (assert) {
        this.set('sortable', true);
        this.set('sorted', null);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid-column-header', [], ['sortable', ['subexpr', '@mut', [['get', 'sortable', ['loc', [null, [2, 41], [2, 49]]]]], [], []], 'sorted', ['subexpr', '@mut', [['get', 'sorted', ['loc', [null, [2, 57], [2, 63]]]]], [], []]], ['loc', [null, [2, 8], [2, 65]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sortable-column'), true, 'Component has class "sortable-column" with sortable column');

        this.set('sorted', 'asc');

        assert.ok(this.$('>:first-child').hasClass('column-ascending'), 'column-ascending class is present when sorted is "asc"');

        this.set('sorted', 'desc');

        assert.ok(this.$('>:first-child').hasClass('column-descending'), 'column-descending class is present when sorted is "desc"');
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            test text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-grid-column-header', [], [], 0, null, ['loc', [null, [2, 8], [4, 34]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'test text', 'Title was rendered correctly');
    });

});
define('dummy/tests/integration/components/sl-grid-column-header-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-grid-column-header-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-grid-column-header-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-grid-row-test', ['ember-qunit', 'sinon'], function (ember_qunit, sinon) {

    'use strict';

    ember_qunit.moduleForComponent('sl-grid-row', 'Integration | Component | sl grid row', {
        integration: true
    });

    ember_qunit.test('Active row class is supported', function (assert) {
        var row = {};

        this.set('row', row);
        this.set('active', false);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid-row', [], ['record', ['subexpr', '@mut', [['get', 'row', ['loc', [null, [2, 29], [2, 32]]]]], [], []], 'active', ['subexpr', '@mut', [['get', 'active', ['loc', [null, [2, 40], [2, 46]]]]], [], []]], ['loc', [null, [2, 8], [2, 48]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').hasClass('active'), 'Component with non-active state does not have "active" class');

        this.set('active', true);

        assert.ok(this.$('>:first-child').hasClass('active'), 'Component with active state has "active" class');
    });

    ember_qunit.test('onClick action handler is called when row is clicked', function (assert) {
        var row = {};
        var spy = sinon['default'].spy();

        this.set('row', row);
        this.on('onClick', spy);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid-row', [], ['record', ['subexpr', '@mut', [['get', 'row', ['loc', [null, [2, 29], [2, 32]]]]], [], []], 'onClick', 'onClick'], ['loc', [null, [2, 8], [2, 52]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').trigger('click');

        assert.ok(spy.called);
    });

});
define('dummy/tests/integration/components/sl-grid-row-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-grid-row-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-grid-row-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-grid-test', ['ember', 'ember-qunit', 'sinon'], function (Ember, ember_qunit, sinon) {

    'use strict';

    var columns = Ember['default'].A([{ title: 'Name', valuePath: 'name' }, { title: 'ID', valuePath: 'id' }]);

    var rowActions = [{
        label: 'Log',
        action: 'sendLog'
    }, {
        label: 'Another Action',
        action: 'anotherAction'
    }];

    var content = Ember['default'].A([{ id: 4, name: 'Alice' }, { id: 8, name: 'Bob' }, { id: 9, name: 'Charlie' }, { id: 10, name: 'Henry' }, { id: 11, name: 'Mary' }]);

    var defaultTemplate = Ember['default'].HTMLBars.template((function () {
        var child0 = (function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 2,
                            'column': 4
                        },
                        'end': {
                            'line': 4,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement('h1');
                    var el2 = dom.createTextNode('Header');
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                    return [];
                },
                statements: [],
                locals: [],
                templates: []
            };
        })();

        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 5,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
            },
            statements: [['block', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [2, 23], [2, 30]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [2, 39], [2, 46]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],
            locals: [],
            templates: [child0]
        };
    })());

    ember_qunit.moduleForComponent('sl-grid', 'Integration | Component | sl grid', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(defaultTemplate);

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-grid'), 'Has class "sl-ember-components-grid"');
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(defaultTemplate);

        assert.strictEqual(this.$('>:first-child').find('h1').text(), 'Header', 'Content yields successfully');
    });

    ember_qunit.test('Header columns and row counts match data passed in', function (assert) {
        this.set('columns', columns);
        this.set('content', content);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 43
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [1, 18], [1, 25]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [1, 34], [1, 41]]]]], [], []]], ['loc', [null, [1, 0], [1, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');

        assert.strictEqual(first.find('table tbody tr').length, content.length + 1, 'rendered row count matches content row count (plus one for duplicated header)');

        assert.strictEqual(first.find('table thead th').length, columns.length, 'header column count matches columns count of columns passed in');
    });

    ember_qunit.test('Setting "sortable" property within the columns property to true applies the sortable-column class', function (assert) {
        var columns = Ember['default'].A([{ title: 'Name', valuePath: 'name' }, { title: 'ID', valuePath: 'id', sortable: true }]);

        this.set('columns', columns);
        this.set('content', content);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 43
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [1, 18], [1, 25]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [1, 34], [1, 41]]]]], [], []]], ['loc', [null, [1, 0], [1, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');

        assert.ok(first.find('thead th:nth-child(2)').hasClass('sortable-column'), 'Setting columns property to "sortable" true applies the sortable-column class');
    });

    ember_qunit.test('Primary column header and cells all get class "primary-column"', function (assert) {
        var columns = Ember['default'].A([{ title: 'Name', valuePath: 'name' }, { title: 'ID', valuePath: 'id', primary: true }]);

        var contentTemplate = Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 16
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement('h1');
                    var el2 = dom.createTextNode('content');
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                    return [];
                },
                statements: [],
                locals: [],
                templates: []
            };
        })());

        this.registry.register('template:detail-component', contentTemplate);
        this.registry.register('component:detail-component', Ember['default'].Component.extend({
            layoutName: 'detail-component'
        }));

        this.set('columns', columns);
        this.set('content', content);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 21], [3, 28]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 21], [4, 28]]]]], [], []], 'detailComponent', 'detail-component'], ['loc', [null, [2, 8], [6, 11]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');

        assert.strictEqual(first.find('table thead th.primary-column').length, 1, 'Exactly one column header gets class "primary-column"');

        assert.strictEqual(first.find('table tbody tr td.primary-column').length, content.length, 'Exactly one cell in each content row gets class "primary-column"');
    });

    ember_qunit.test('Action requestData is fired in continuous mode when user scrolls to the bottom of the grid', function (assert) {
        var _this = this;

        this.set('columns', columns);
        this.set('content', content);
        this.set('totalCount', content.length + 10);

        var spy = sinon['default'].spy();

        this.on('requestData', spy);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 10,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'requestData', 'requestData', 'totalCount', ['subexpr', '@mut', [['get', 'totalCount', ['loc', [null, [5, 23], [5, 33]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [6, 20], [6, 27]]]]], [], []], 'continuous', true, 'height', '10px'], ['loc', [null, [2, 8], [9, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        Ember['default'].run(function () {
            _this.$('>:first-child').find('> div > table').parent().trigger('scroll');
        });

        assert.ok(spy.calledOnce, 'requestData action fired');
    });

    ember_qunit.test('Pagination is displayed at the bottom of the grid and page count is correct', function (assert) {
        var pageSize = 25;

        this.set('columns', columns);
        this.set('content', content);
        this.set('pageSize', pageSize);
        this.set('totalCount', 100);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'totalCount', ['subexpr', '@mut', [['get', 'totalCount', ['loc', [null, [4, 23], [4, 33]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [5, 20], [5, 27]]]]], [], []], 'pageSize', ['subexpr', '@mut', [['get', 'pageSize', ['loc', [null, [6, 21], [6, 29]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');

        assert.strictEqual(first.find('.pagination').length, 1, 'Pagination is displayed');

        var text = first.find('.pagination li').filter(':not(:first-child, :last-child)').find('a').text();

        assert.strictEqual(text, '1234', 'Page count is correct on pagination');
    });

    ember_qunit.test('Action requestData is fired with correct arguments in paging mode', function (assert) {
        var pageSize = 25;
        var offset = 25;

        this.set('columns', columns);
        this.set('content', content);
        this.set('pageSize', pageSize);
        this.set('totalCount', 50);

        var spy = sinon['default'].spy();

        this.on('requestData', spy);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 9,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'requestData', 'requestData', 'totalCount', ['subexpr', '@mut', [['get', 'totalCount', ['loc', [null, [5, 23], [5, 33]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [6, 20], [6, 27]]]]], [], []], 'pageSize', ['subexpr', '@mut', [['get', 'pageSize', ['loc', [null, [7, 21], [7, 29]]]]], [], []]], ['loc', [null, [2, 8], [8, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = $('>:first-child');

        first.find('.pagination li:last-child a').click();

        assert.ok(spy.calledOnce, 'requestData action fired');

        assert.ok(spy.calledWith(pageSize, offset), 'requestData was called with correct arguments');
    });

    ember_qunit.test('Clicking on a row fires the rowClick action', function (assert) {
        var firstRowId = content[0].id;
        var spy = sinon['default'].spy();

        this.set('columns', columns);
        this.set('content', content);

        this.on('rowClick', spy);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 20], [4, 27]]]]], [], []], 'rowClick', 'rowClick'], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').find('tbody tr + tr').first().trigger('click');

        assert.ok(spy.calledOnce, 'rowClick action was fired');

        assert.strictEqual(spy.getCall(0).args[0].record.id, firstRowId, 'rowClick action was called with correct row');
    });

    ember_qunit.test('detailComponent, detailHeaderComponent, detailFooterComponent' + 'is rendered and correct data is displayed on row click', function (assert) {
        var _this2 = this;

        var headerTemplate = Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 28
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement('h1');
                    var el2 = dom.createTextNode('header:');
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment('');
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                },
                statements: [['content', 'model.id', ['loc', [null, [1, 11], [1, 23]]]]],
                locals: [],
                templates: []
            };
        })());
        var contentTemplate = Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 29
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement('h1');
                    var el2 = dom.createTextNode('content:');
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment('');
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                },
                statements: [['content', 'model.id', ['loc', [null, [1, 12], [1, 24]]]]],
                locals: [],
                templates: []
            };
        })());
        var footerTemplate = Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 28
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement('h1');
                    var el2 = dom.createTextNode('footer:');
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment('');
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                },
                statements: [['content', 'model.id', ['loc', [null, [1, 11], [1, 23]]]]],
                locals: [],
                templates: []
            };
        })());

        var firstModelId = content[0].id;

        var registerTemplate = function registerTemplate(name, template) {
            _this2.registry.register('template:' + name, template);
            _this2.registry.register('component:' + name, Ember['default'].Component.extend({
                layoutName: '' + name
            }));
        };

        registerTemplate('detail-header-component', headerTemplate);
        registerTemplate('detail-component', contentTemplate);
        registerTemplate('detail-footer-component', footerTemplate);

        this.set('columns', columns);
        this.set('content', content);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 9,
                            'column': 8
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n            ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 25], [3, 32]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 25], [4, 32]]]]], [], []], 'detailComponent', 'detail-component', 'detailHeaderComponent', 'detail-header-component', 'detailFooterComponent', 'detail-footer-component'], ['loc', [null, [2, 12], [8, 15]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');
        var detailHeaderH1 = first.find('.panel-heading').find('h1');
        var detailContentH1 = first.find('.panel-body').find('h1');
        var detailFooterH1 = first.find('.panel-footer').find('h1');

        first.find('td:first').trigger('click');

        assert.strictEqual(detailHeaderH1.text(), 'header:' + firstModelId);

        assert.strictEqual(detailContentH1.text(), 'content:' + firstModelId);

        assert.strictEqual(detailFooterH1.text(), 'footer:' + firstModelId);

        ['detail-header-component', 'detail-component', 'detail-footer-component'].forEach(function (name) {
            _this2.registry.unregister('component:' + name);
            _this2.registry.unregister('template:' + name);
        });
    });

    ember_qunit.test('Filter component is displayed when filterComponent property is set', function (assert) {
        this.registry.register('component:filter-component', Ember['default'].Component.extend({
            layoutName: 'filter-component'
        }));

        this.registry.register('template:filter-component', Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 24
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement('h1');
                    var el2 = dom.createTextNode('FilterComponent');
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                    return [];
                },
                statements: [],
                locals: [],
                templates: []
            };
        })()));

        this.render('hbs\n        {{sl-grid filterComponent="filter-component"}}\n    ');

        var first = this.$('>:first-child');

        first.find('button:contains(Filter)').click();

        assert.ok(first.find('.filter-content').is(':visible'), 'Filter pane is visible');

        assert.strictEqual(first.find('.filter-content').find('h1:contains(FilterComponent)').length, 1, 'Filter pane component passed in was rendered');

        this.registry.unregister('component:filter-component');
        this.registry.unregister('template:filter-component');
    });

    ember_qunit.test('Setting filterButtonLabel changes filter button text', function (assert) {
        var label = '__new_label__';

        this.set('filterButtonLabel', label);

        // Pass a component string value so filterButton gets rendered
        this.render('hbs\n        {{sl-grid\n             filterComponent=\'not-a-real-component\'\n             filterButtonLabel=filterButtonLabel\n         }}\n    ');

        var first = this.$('>:first-child');

        assert.strictEqual(first.find('> header button').text().trim(), label);
    });

    ember_qunit.test('Setting height property gives the grid a fixed height', function (assert) {
        var height = '25em';

        this.set('columns', columns);
        this.set('content', content);
        this.set('height', height);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [2, 26], [2, 33]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [2, 42], [2, 49]]]]], [], []], 'height', ['subexpr', '@mut', [['get', 'height', ['loc', [null, [2, 57], [2, 63]]]]], [], []]], ['loc', [null, [2, 8], [2, 65]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');

        var total = $('<p>').css({
            'height': '1em',
            'display': 'block'
        }).appendTo(first).height() * 25;

        assert.strictEqual(first.height(), total, 'Height style was correctly set');
    });

    ember_qunit.test('Row actions are rendered and actions are triggered as expected', function (assert) {
        var sendLogSpy = sinon['default'].spy();

        this.set('columns', columns);
        this.set('content', content);
        this.set('rowActions', rowActions);

        this.on('sendLog', sendLogSpy);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 20], [4, 27]]]]], [], []], 'rowActions', ['subexpr', '@mut', [['get', 'rowActions', ['loc', [null, [5, 23], [5, 33]]]]], [], []], 'sendLog', ['subexpr', 'action', ['sendLog'], [], ['loc', [null, [6, 20], [6, 40]]]]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');
        var firstRow = first.find('> div > table tbody tr + tr').first();

        assert.strictEqual(firstRow.find('a:first').text().trim(), rowActions[0].label, 'Row action link was present');

        firstRow.find('a:first').click();

        assert.ok(sendLogSpy.called, 'Action was triggered on click of row action');

        assert.strictEqual(sendLogSpy.getCall(0).args[0].id, content[0].id, 'Row passed to row action callback, matches clicked row');
    });

    ember_qunit.test('actionButtonLabel property is accepted', function (assert) {
        var actionsButtonLabel = 'More Options';

        this.set('columns', columns);
        this.set('content', content);
        this.set('rowActions', rowActions);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 20], [4, 27]]]]], [], []], 'rowActions', ['subexpr', '@mut', [['get', 'rowActions', ['loc', [null, [5, 23], [5, 33]]]]], [], []]], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var cell = this.$('>:first-child').find('td.actions-cell:first');

        assert.strictEqual(cell.find('button').text().trim(), 'Actions', 'Actions button label is "Actions" by default');

        this.set('actionsButtonLabel', actionsButtonLabel);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 20], [3, 27]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 20], [4, 27]]]]], [], []], 'rowActions', ['subexpr', '@mut', [['get', 'rowActions', ['loc', [null, [5, 23], [5, 33]]]]], [], []], 'actionsButtonLabel', ['subexpr', '@mut', [['get', 'actionsButtonLabel', ['loc', [null, [6, 31], [6, 49]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        cell = this.$('>:first-child').find('td.actions-cell:first');

        assert.strictEqual(cell.find('button').text().trim(), actionsButtonLabel, 'Actions button can be changed');
    });

    ember_qunit.test('sortColumn action was fired with correct arguments when a sortable column is selected for sorting', function (assert) {
        var columns = Ember['default'].A([{ title: 'Name', valuePath: 'name' }, { title: 'ID', valuePath: 'id', sortable: true }]);

        var sortColumnSpy = sinon['default'].spy();

        this.set('columns', columns);
        this.set('content', content);
        this.on('sortColumn', sortColumnSpy);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 8
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n            ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-grid', [], ['columns', ['subexpr', '@mut', [['get', 'columns', ['loc', [null, [3, 24], [3, 31]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'content', ['loc', [null, [4, 24], [4, 31]]]]], [], []], 'sortColumn', 'sortColumn'], ['loc', [null, [2, 12], [6, 14]]]]],
                locals: [],
                templates: []
            };
        })()));

        var first = this.$('>:first-child');

        first.find('thead th:nth-child(2)').click();

        var row = sortColumnSpy.getCall(0).args[0];

        assert.ok(sortColumnSpy.calledOnce, 'sortColumn action was fired');

        assert.strictEqual(row.id, columns[1].id, 'sortColumn action handler received correct row');
    });

});
define('dummy/tests/integration/components/sl-grid-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-grid-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-grid-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-input-test', ['ember-qunit', 'qunit'], function (ember_qunit, qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-input', 'Integration | Component | sl input', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-input', ['loc', [null, [2, 8], [2, 20]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-input'), 'Has class "sl-ember-components-input"');

        assert.strictEqual(this.$('>:first-child').attr('data-trigger'), 'focus', 'dataTrigger defaults to focus');

        assert.strictEqual(this.$('>:first-child').find('input').prop('type'), 'text', 'type defaults to text');

        assert.ok(this.$('>:first-child').hasClass('form-group'), 'Has class "form-group"');

        assert.ok(this.$('>:first-child').find('input').hasClass('form-control'), 'Has class "form-control"');
    });

    ember_qunit.test('Label is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['label', 'Test label'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('label').hasClass('control-label'), 'Has class "control-label"');

        assert.strictEqual(this.$('>:first-child').find('.control-label').text().trim(), 'Test label', 'control-label is rendered when label is set');
    });

    ember_qunit.test('for attribute value on label matches id of input', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['label', 'test label'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label').attr('for'), this.$('>:first-child').find('input').attr('id'), 'for value matches id of input');
    });

    ember_qunit.test('Optional property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['label', 'Optional', 'optional', 'true'], ['loc', [null, [2, 8], [2, 53]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.text-info').length, 1, '"optional" property sets class "text-info"');

        assert.strictEqual(this.$('>:first-child').find('.text-info').text().trim(), 'Optional', 'text-info renders optional when optional is set');
    });

    ember_qunit.test('Required property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['label', 'Required', 'required', 'true'], ['loc', [null, [2, 8], [2, 53]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.text-danger').length, 1, '"required" property sets class "text-danger"');

        assert.strictEqual(this.$('>:first-child').find('.text-danger').text().trim(), 'Required', 'text-danger renders required when required is set');
    });

    ember_qunit.test('type property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['type', 'email'], ['loc', [null, [2, 8], [2, 33]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('type'), 'email', 'type property is supported');
    });

    ember_qunit.test('Click to edit input has the correct class', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['clickToEdit', 'true'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('input').hasClass('click-to-edit'), 'click-to-edit class is present upon clickToEdit set to true');
    });

    ember_qunit.test('disabled property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['disabled', 'true'], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('input').prop('disabled'), 'disabled property is supported');
    });

    ember_qunit.test('Help text is displayed', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['helpText', 'help text'], ['loc', [null, [2, 8], [2, 41]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.help-block').length, 1, '"helpText" property sets class "help-block"');

        assert.strictEqual(this.$('>:first-child').find('.help-block').text().trim(), 'help text', 'help-block renders helpText when helpText is set');
    });

    ember_qunit.test('Placeholder property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['placeholder', 'placeholder'], ['loc', [null, [2, 8], [2, 46]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('placeholder'), 'placeholder', 'Placeholder text is rendered');
    });

    ember_qunit.test('Readonly property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['readonly', 'true'], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('input').prop('readonly'), 'readonly is set when readonly is true');
    });

    ember_qunit.test('Typeahead classes are present', function (assert) {
        var colors = ['Black', 'Yellow'];

        this.set('suggestions', colors);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['suggestions', ['subexpr', '@mut', [['get', 'suggestions', ['loc', [null, [2, 31], [2, 42]]]]], [], []]], ['loc', [null, [2, 8], [2, 44]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.twitter-typeahead').length, 1, 'twitter-typeahead class exists');

        assert.strictEqual(this.$('>:first-child').find('.typeahead').length, 2, 'typeahead class exists');

        assert.strictEqual(this.$('>:first-child').find('.tt-input').length, 1, 'tt-input class exists');

        assert.strictEqual(this.$('>:first-child').find('.tt-menu').length, 1, 'tt-menu class exists');

        assert.strictEqual(this.$('>:first-child').find('.tt-dataset').length, 1, 'tt-dataset class exists');
    });

    ember_qunit.test('name property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['name', 'testname'], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('name'), 'testname', 'Rendered input has name set');
    });

    ember_qunit.test('name applies property to input', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['name', 'testname'], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('name'), 'testname', 'Rendered input has name set');
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 25], [2, 30]]]]], [], []]], ['loc', [null, [2, 8], [2, 32]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 27], [2, 34]]]]], [], []]], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-input', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 25], [2, 30]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 39], [2, 46]]]]], [], []]], ['loc', [null, [2, 8], [2, 48]]]]],
                locals: [],
                templates: []
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'focus', 'Default trigger is "focus"');
    });

    qunit.skip('Typeahead "suggestionNamePath" sets key for suggestions object', function () {});

    qunit.skip('Typeahead "value" prop is set upon selection of typeahead results', function () {});

});
define('dummy/tests/integration/components/sl-input-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-input-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-input-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-menu-item-show-all-test', ['ember-qunit', 'sinon'], function (ember_qunit, sinon) {

    'use strict';

    ember_qunit.moduleForComponent('sl-menu-item-show-all', 'Integration | Component | sl menu item show all', {
        integration: true
    });

    ember_qunit.test('mouseEnter triggers calling of sendAction', function (assert) {
        this.set('onMouseEnterSpy', sinon['default'].spy());

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu-item-show-all', [], ['onMouseEnter', ['subexpr', '@mut', [['get', 'onMouseEnterSpy', ['loc', [null, [3, 25], [3, 40]]]]], [], []]], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').find('a').trigger('mouseenter');

        assert.ok(this.get('onMouseEnterSpy').calledOnce, 'sendAction() was triggered successfully');
    });

});
define('dummy/tests/integration/components/sl-menu-item-show-all-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-menu-item-show-all-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-menu-item-show-all-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-menu-item-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    var menuItems = {
        label: 'Main One',
        items: [{
            label: 'Sub 1',
            action: 'testActionName1',
            data: '"testData1"'
        }, {
            label: 'Sub 2',
            items: [{
                label: 'Sub 2 - 1',
                action: 'testActionName2',
                data: '"testData2"'
            }, { label: 'Sub 2 - 2' }]
        }]
    };

    var menuItem = {
        label: 'Main One',
        action: 'testActionName',
        data: '"testData"'
    };

    ember_qunit.moduleForComponent('sl-menu-item', 'Integration | Component | sl menu item', {
        integration: true
    });

    ember_qunit.test('Mouse enter/leave events toggles setting of "active" class', function (assert) {

        this.set('menuItems', menuItems);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu-item', [], ['item', ['subexpr', '@mut', [['get', 'menuItems', ['loc', [null, [3, 17], [3, 26]]]]], [], []]], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').hasClass('active'), 'Rendered element does not have class "active" by default');

        this.$('>:first-child').find('>a').first().trigger('mouseenter');

        assert.ok(this.$('>:first-child').hasClass('active'), 'Rendered element has class "active" after mouseenter');

        this.$('>:first-child').find('>a').first().trigger('mouseleave');

        assert.notOk(this.$('>:first-child').hasClass('active'), 'Rendered element does not have class "active" after mouseleave');
    });

    ember_qunit.test('"contains-dropdown" and "dropdown-toggle" classes are set when menu has sub menus', function (assert) {

        this.set('menuItem', menuItem);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu-item', [], ['item', ['subexpr', '@mut', [['get', 'menuItem', ['loc', [null, [3, 17], [3, 25]]]]], [], []]], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').hasClass('contains-dropdown'), 'Rendered element does not have class "contains-dropdown"');

        assert.notOk(this.$('>:first-child').find('>a').hasClass('dropdown-toggle'), 'Rendered element does not have class "dropdown-toggle"');

        this.set('menuItem', menuItems);

        assert.ok(this.$('>:first-child').hasClass('contains-dropdown'), 'Rendered element has class "contains-dropdown"');

        assert.ok(this.$('>:first-child').find('>a').hasClass('dropdown-toggle'), 'Rendered element has class "dropdown-toggle"');

        assert.ok(this.$('>:first-child').find('ul').hasClass('dropdown-menu'), 'Rendered element has class "dropdown-menu"');
    });

    ember_qunit.test('clickLink() action is fired from top level menu item', function (assert) {
        assert.expect(1);

        var done = assert.async();

        this.set('menuItem', menuItem);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu-item', [], ['item', ['subexpr', '@mut', [['get', 'menuItem', ['loc', [null, [3, 17], [3, 25]]]]], [], []], 'action', 'testAction'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction', function () {
            assert.ok(true, 'The test action was called');

            done();
        });

        this.$('>:first-child').find('a').first().click();
    });

    ember_qunit.test('handleAction() action is fired from sub menu (Sub 1) item', function (assert) {
        assert.expect(3);

        var done = assert.async();

        this.set('menuItems', menuItems);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu-item', [], ['item', ['subexpr', '@mut', [['get', 'menuItems', ['loc', [null, [3, 17], [3, 26]]]]], [], []], 'action', 'testAction'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction', function (actionName, data) {
            assert.ok(true, 'The test action was called');

            assert.strictEqual(actionName, 'testActionName1', 'ActionName is passed');

            assert.strictEqual(data, '"testData1"', 'Data is passed');

            done();
        });

        // Sub 1
        this.$('>:first-child').find('> ul > li:first > a').click();
    });

    ember_qunit.test('handleAction() action is fired from sub sub menu (Sub 2-1) item', function (assert) {
        assert.expect(3);

        var done = assert.async();

        this.set('menuItems', menuItems);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu-item', [], ['item', ['subexpr', '@mut', [['get', 'menuItems', ['loc', [null, [3, 17], [3, 26]]]]], [], []], 'action', 'testAction'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction', function (actionName, data) {
            assert.ok(true, 'The test action was called');

            assert.strictEqual(actionName, 'testActionName2', 'ActionName is passed');

            assert.strictEqual(data, '"testData2"', 'Data is passed');

            done();
        });

        // Sub 2-1
        this.$('>:first-child').find('> ul > li:last > ul > li:first > a').click();
    });

});
define('dummy/tests/integration/components/sl-menu-item-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-menu-item-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-menu-item-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-menu-test', ['ember', 'ember-qunit', 'sinon'], function (Ember, ember_qunit, sinon) {

    'use strict';

    var menuItems = Ember['default'].A([{
        label: 'Main One',
        items: [{
            label: 'Sub 1',
            action: 'testActionName',
            data: '"testData"'
        }, {
            label: 'Sub 2',
            items: [{ label: 'Sub 2 - 1' }, { label: 'Sub 2 - 2' }]
        }]
    }, { label: 'Main Two' }]);

    var mockStream = {
        actions: {},

        on: function on(actionName, handler) {
            console.log('here');
            this.actions[actionName] = handler;
        },

        subject: {
            dispose: function dispose() {
                mockStream.actions = {};
            },

            onCompleted: function onCompleted() {}
        }
    };

    ember_qunit.moduleForComponent('sl-menu', 'Integration | Component | sl menu', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-menu', ['loc', [null, [2, 8], [2, 19]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-menu'), 'Has class "sl-ember-components-menu"');

        assert.ok(this.$('>:first-child').find('ul').hasClass('list-unstyled'), 'Has class "list-unstyled"');

        assert.ok(this.$('>:first-child').find('ul').hasClass('btn-group'), 'Has class "btn-group"');
    });

    ember_qunit.test('"items" property is supported', function (assert) {

        this.set('menuItems', menuItems);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['items', ['subexpr', '@mut', [['get', 'menuItems', ['loc', [null, [3, 18], [3, 27]]]]], [], []]], ['loc', [null, [2, 8], [4, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var menuItem = this.$('>:first-child').find('li');

        assert.strictEqual(menuItem.find('a').text().trim(), 'Main OneSub 1Sub 2Sub 2 - 1Sub 2 - 2Main Two', 'First menu item is rendered');
    });

    ember_qunit.test('"allowShowAll" property is supported', function (assert) {

        this.set('menuItems', menuItems);
        this.set('testAllowShowAll', false);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['items', ['subexpr', '@mut', [['get', 'menuItems', ['loc', [null, [3, 18], [3, 27]]]]], [], []], 'allowShowAll', ['subexpr', '@mut', [['get', 'testAllowShowAll', ['loc', [null, [4, 25], [4, 41]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('a:contains("Show All")').length, 0, 'menu item is not included by default');

        this.set('testAllowShowAll', true);

        assert.strictEqual(this.$('>:first-child').find('a:contains("Show All")').length, 1, 'menu item is included when "allowShowAll" is true');
    });

    ember_qunit.test('Actions are handled properly from menu items', function (assert) {
        assert.expect(3);

        var done = assert.async();

        this.set('menuItems', menuItems);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['items', ['subexpr', '@mut', [['get', 'menuItems', ['loc', [null, [3, 18], [3, 27]]]]], [], []], 'action', 'testAction'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.on('testAction', function (actionName, data) {
            assert.ok(true, 'The test action was called');

            assert.strictEqual(actionName, 'testActionName', 'ActionName is passed');

            assert.strictEqual(data, '"testData"', 'Data is passed');

            done();
        });

        this.$('>:first-child').find('> ul > li:first > ul > li:first > a').trigger('click');
    });

    ember_qunit.test('Component responds to "doAction" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['doAction', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 21], [3, 31]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'doAction');

        assert.ok(this.get('testAction').calledOnce, 'doAction() was triggered successfully');
    });

    ember_qunit.test('Component responds to "hideAll" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['hideAll', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 20], [3, 30]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'hideAll');

        assert.ok(this.get('testAction').calledOnce, 'hideAll() was triggered successfully');
    });

    ember_qunit.test('Component responds to "select" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['select', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 19], [3, 29]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'select', 0);

        assert.ok(this.get('testAction').calledOnce, 'select() was triggered successfully');

        assert.ok(this.get('testAction').calledWithExactly(0), 'select() was called with "0"');
    });

    ember_qunit.test('Component responds to "selectDown" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectDown', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 23], [3, 33]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectDown');

        assert.ok(this.get('testAction').calledOnce, 'selectDown() was triggered successfully');
    });

    ember_qunit.test('Component responds to "selectLeft" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectLeft', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 23], [3, 33]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectLeft');

        assert.ok(this.get('testAction').calledOnce, 'selectLeft() was triggered successfully');
    });

    ember_qunit.test('Component responds to "selectNext" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectNext', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 23], [3, 33]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectNext');

        assert.ok(this.get('testAction').calledOnce, 'selectNext() was triggered successfully');
    });

    ember_qunit.test('Component responds to "selectParent" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectParent', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 25], [3, 35]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectParent');

        assert.ok(this.get('testAction').calledOnce, 'selectParent() was triggered successfully');
    });

    ember_qunit.test('Component responds to "selectPrevious" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectPrevious', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 27], [3, 37]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectPrevious');

        assert.ok(this.get('testAction').calledOnce, 'selectPrevious() was triggered successfully');
    });

    ember_qunit.test('Component responds to "selectRight" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectRight', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 24], [3, 34]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectRight');

        assert.ok(this.get('testAction').calledOnce, 'selectRight() was triggered successfully');
    });

    ember_qunit.test('Component responds to "selectSubMenu" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectSubMenu', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 26], [3, 36]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectSubMenu');

        assert.ok(this.get('testAction').calledOnce, 'selectSubMenu() was triggered successfully');
    });

    ember_qunit.test('Component responds to "selectUp" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['selectUp', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 21], [3, 31]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'selectUp');

        assert.ok(this.get('testAction').calledOnce, 'selectUp() was triggered successfully');
    });

    ember_qunit.test('Component responds to "showAll" stream action', function (assert) {

        this.set('testAction', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-menu', [], ['showAll', ['subexpr', '@mut', [['get', 'testAction', ['loc', [null, [3, 20], [3, 30]]]]], [], []], 'streamName', 'testStreamName'], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var streamService = this.container.lookup('service:stream');
        streamService.send('testStreamName', 'showAll');

        assert.ok(this.get('testAction').calledOnce, 'showAll() was triggered successfully');
    });

});
define('dummy/tests/integration/components/sl-menu-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-menu-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-menu-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-modal-body-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';


    ember_qunit.moduleForComponent('sl-modal-body', 'Integration | Component | sl modal body', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-modal-body', ['loc', [null, [2, 8], [2, 25]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-modal-body'), 'Component has class "sl-ember-components-modal-body"');

        assert.ok(this.$('>:first-child').hasClass('modal-body'), 'Component has class "modal-body"');
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('           ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement('div');
                        dom.setAttribute(el1, 'class', 'test');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 4,
                            'column': 26
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                },
                statements: [['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [2, 8], [4, 26]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.test').length, 1);
    });

});
define('dummy/tests/integration/components/sl-modal-body-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-modal-body-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-modal-body-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-modal-footer-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';


    ember_qunit.moduleForComponent('sl-modal-footer', 'Integration | Component | sl modal footer', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-modal-footer', ['loc', [null, [2, 8], [2, 27]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-modal-footer'), 'Component has class "sl-ember-components-modal-footer"');

        assert.ok(this.$('>:first-child').hasClass('modal-footer'), 'Component has class "modal-footer"');
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement('div');
                        dom.setAttribute(el1, 'class', 'test');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal-footer', [], [], 0, null, ['loc', [null, [2, 8], [4, 28]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.test').length, 1, 'Content is yielded correctly');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-modal-footer', ['loc', [null, [2, 8], [2, 27]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('[data-dismiss="modal"]').length > 0, 'Default footer content and button rendered when not yielded');
    });

    ember_qunit.test('Close button text is customizable', function (assert) {
        var buttonText = 'Custom Close Text';

        this.set('buttonText', buttonText);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-modal-footer', [], ['buttonText', ['subexpr', '@mut', [['get', 'buttonText', ['loc', [null, [2, 37], [2, 47]]]]], [], []]], ['loc', [null, [2, 8], [2, 49]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('button[data-dismiss="modal"]').text().trim(), buttonText);
    });

});
define('dummy/tests/integration/components/sl-modal-footer-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-modal-footer-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-modal-footer-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-modal-header-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';


    ember_qunit.moduleForComponent('sl-modal-header', 'Integration | Component | sl modal header', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-modal-header', ['loc', [null, [2, 8], [2, 27]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-modal-header'), 'Component has class "sl-ember-components-modal-header"');

        assert.ok(this.$('>:first-child').hasClass('modal-header'), 'Component has class "modal-header"');

        assert.ok(this.$('>:first-child').find('[data-dismiss="modal"]').length > 0, 'Default header content and close button rendered');
    });

    ember_qunit.test('Setting title on header works', function (assert) {
        var title = 'hello world';

        this.set('title', title);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-modal-header', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 32], [2, 37]]]]], [], []]], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.modal-title').text(), title);
    });

    ember_qunit.test('Component may be used as block', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement('div');
                        dom.setAttribute(el1, 'class', 'test');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal-header', [], [], 0, null, ['loc', [null, [2, 8], [4, 28]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.test').length, 1, 'Content is yielded correctly');
    });

    ember_qunit.test('Modal title\'s id is set to ariaLabelledBy property value', function (assert) {
        this.set('title', 'label test');
        this.set('ariaLabelledBy', 'initial value');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-modal-header', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 32], [2, 37]]]]], [], []], 'ariaLabelledBy', ['subexpr', '@mut', [['get', 'ariaLabelledBy', ['loc', [null, [2, 53], [2, 67]]]]], [], []]], ['loc', [null, [2, 8], [2, 69]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.modal-title').prop('id'), this.get('ariaLabelledBy'));
    });

});
define('dummy/tests/integration/components/sl-modal-header-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-modal-header-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-modal-header-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-modal-test', ['ember', 'ember-qunit', 'sinon'], function (Ember, ember_qunit, sinon) {

    'use strict';

    var mockStream = {
        actions: {},

        on: function on(actionName, handler) {
            this.actions[actionName] = handler;
        },

        subject: {
            dispose: function dispose() {
                mockStream.actions = {};
            },

            onCompleted: function onCompleted() {}
        }
    };

    var template = Ember['default'].HTMLBars.template((function () {
        var child0 = (function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 9,
                                'column': 8
                            },
                            'end': {
                                'line': 11,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement('p');
                        var el2 = dom.createTextNode('A simple modal example');
                        dom.appendChild(el1, el2);
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 2,
                            'column': 4
                        },
                        'end': {
                            'line': 14,
                            'column': 4
                        }
                    }
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-modal-header', [], ['title', 'Simple Example', 'ariaLabelledBy', ['subexpr', '@mut', [['get', 'modal.ariaLabelledBy', ['loc', [null, [6, 27], [6, 47]]]]], [], []]], ['loc', [null, [4, 8], [7, 10]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [9, 8], [11, 26]]]], ['content', 'sl-modal-footer', ['loc', [null, [13, 8], [13, 27]]]]],
                locals: ['modal'],
                templates: [child0]
            };
        })();

        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 15,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
            },
            statements: [['block', 'sl-modal', [], ['ariaHidden', 'false'], 0, null, ['loc', [null, [2, 4], [14, 17]]]]],
            locals: [],
            templates: [child0]
        };
    })());

    ember_qunit.moduleForComponent('sl-modal', 'Integration | Component | sl modal', {
        afterEach: function afterEach() {
            this.$('.modal').remove();
            Ember['default'].$('.modal-backdrop').remove();
        },

        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        var _this = this;

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 7,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 10,
                                'column': 8
                            }
                        }
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['content', 'sl-modal-header', ['loc', [null, [3, 12], [3, 31]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [5, 12], [7, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [9, 12], [9, 31]]]]],
                    locals: ['modal'],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 11,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], [], 0, null, ['loc', [null, [2, 8], [10, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('modal'), 'Has class "modal"');

        assert.ok(this.$('>:first-child').find('>div').hasClass('modal-md'), 'Has class "modal-md"');

        Ember['default'].run(function () {
            _this.$('>:first-child').modal('show');
        });

        assert.strictEqual(Ember['default'].$('>:first-child').length, 1, 'Backdrop is shown by default');

        assert.strictEqual(this.$('>:first-child').attr('aria-hidden'), 'true', 'aria-hidden is "true" by default');

        Ember['default'].run(function () {
            _this.$('>:first-child').modal('show');
        });

        assert.strictEqual(Ember['default'].$('.modal-backdrop').length, 1, 'backdrop is shown by default');
    });

    ember_qunit.test('Backdrop property is passed through to jQuery correctly', function (assert) {
        // we currently only pass through the backdrop parameter
        var spy = sinon['default'].spy(Ember['default'].$.fn, 'modal');

        // props passed to bootstrap modal that are not bound to template
        var nonTemplateProps = {
            keyboard: true,
            show: false
        };

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 1,
                            'column': 36
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                },
                statements: [['inline', 'sl-modal', [], ['backdrop', '__backdrop__'], ['loc', [null, [1, 0], [1, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(spy.calledWith(Ember['default'].$.extend({ backdrop: '__backdrop__' }, nonTemplateProps)), 'backdrop property is passed to jQuery.modal correctly');

        Ember['default'].$.fn.modal.restore();
    });

    ember_qunit.test('Animated property adds fade class', function (assert) {
        this.set('animate', false);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-modal', [], ['animated', ['subexpr', '@mut', [['get', 'animate', ['loc', [null, [2, 28], [2, 35]]]]], [], []]], ['loc', [null, [2, 8], [2, 37]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').hasClass('fade'), 'fade class not present when animated set to false');

        this.set('animate', true);

        assert.ok(this.$('>:first-child').hasClass('fade'), 'fade class present when animated set to true');
    });

    ember_qunit.test('Size property changes size class', function (assert) {
        this.set('size', 'large');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-modal', [], ['size', ['subexpr', '@mut', [['get', 'size', ['loc', [null, [2, 24], [2, 28]]]]], [], []]], ['loc', [null, [2, 8], [2, 30]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('>div').hasClass('modal-lg'), 'Has class "modal-lg"');

        this.set('size', 'small');

        assert.ok(this.$('>:first-child').find('>div').hasClass('modal-sm'), 'Has class "modal-sm"');
    });

    ember_qunit.test('Listeners are setup and firing appropriately', function (assert) {
        var _this2 = this;

        assert.expect(4);

        var beforeShowDone = assert.async();
        var afterShowDone = assert.async();
        var beforeHideDone = assert.async();
        var afterHideDone = assert.async();

        var beforeShow = function beforeShow() {
            assert.ok(true, 'beforeShow was triggered');

            beforeShowDone();
        };

        var afterShow = function afterShow() {
            assert.ok(true, 'afterShow was triggered');

            afterShowDone();
        };

        var beforeHide = function beforeHide() {
            assert.ok(true, 'beforeHide was triggered');

            beforeHideDone();
        };

        var afterHide = function afterHide() {
            assert.ok(true, 'afterHide was triggered');

            afterHideDone();
        };

        this.on('beforeShow', beforeShow);
        this.on('afterShow', afterShow);
        this.on('beforeHide', beforeHide);
        this.on('afterHide', afterHide);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 10,
                                    'column': 12
                                },
                                'end': {
                                    'line': 12,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 15,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['content', 'sl-modal-header', ['loc', [null, [8, 12], [8, 31]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [10, 12], [12, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [14, 12], [14, 31]]]]],
                    locals: [],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 16,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], ['name', 'testing', 'beforeShow', 'beforeShow', 'afterShow', 'afterShow', 'beforeHide', 'beforeHide', 'afterHide', 'afterHide'], 0, null, ['loc', [null, [2, 8], [15, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        Ember['default'].run(function () {
            _this2.$('>:first-child').modal('show');
            _this2.$('>:first-child').modal('hide');
        });

        this.hideModal = false;
    });

    ember_qunit.test('Property isOpen is set appropriately', function (assert) {
        var _this3 = this;

        this.set('isOpen');

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 7,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 10,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-modal-header', [], ['title', 'Simple Example'], ['loc', [null, [3, 12], [3, 54]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [5, 12], [7, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [9, 12], [9, 31]]]]],
                    locals: [],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 11,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], ['isOpen', ['subexpr', '@mut', [['get', 'isOpen', ['loc', [null, [2, 27], [2, 33]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [10, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        Ember['default'].run(function () {
            _this3.$('>:first-child').trigger('shown.bs.modal');
        });

        assert.strictEqual(this.get('isOpen'), true, 'isOpen was set to true when modal show event was triggered');

        Ember['default'].run(function () {
            _this3.$('>:first-child').trigger('hidden.bs.modal');
        });

        assert.strictEqual(this.get('isOpen'), false, 'isOpen was set to false when modal close event was triggered');
    });

    ember_qunit.test('Closing of modal using close button works', function (assert) {
        var _this4 = this;

        assert.expect(1);
        var closeDone = assert.async();

        var modalClosed = function modalClosed() {
            assert.ok(true, 'Modal was closed');
            closeDone();
        };

        this.on('modalClosed', modalClosed);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 7,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 10,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-modal-header', [], ['title', 'Simple Example'], ['loc', [null, [3, 12], [3, 54]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [5, 12], [7, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [9, 12], [9, 31]]]]],
                    locals: [],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 11,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], ['afterHide', 'modalClosed'], 0, null, ['loc', [null, [2, 8], [10, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        Ember['default'].run(function () {
            _this4.$('>:first-child').modal('show');
            _this4.$('>:first-child').find('.close').click();
        });
    });

    ember_qunit.test('Backdrop is hidden when backdrop property is set to false', function (assert) {
        var _this5 = this;

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 7,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 10,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-modal-header', [], ['title', 'Simple Example'], ['loc', [null, [3, 12], [3, 54]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [5, 12], [7, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [9, 12], [9, 31]]]]],
                    locals: [],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 11,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], ['backdrop', false], 0, null, ['loc', [null, [2, 8], [10, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        Ember['default'].run(function () {
            _this5.$('>:first-child').modal('show');
        });

        assert.strictEqual(Ember['default'].$('>:first-child').find('.modal-backdrop').length, 0);
    });

    ember_qunit.test('Animated property adds fade class', function (assert) {
        this.set('animate', false);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-modal', [], ['animated', ['subexpr', '@mut', [['get', 'animate', ['loc', [null, [2, 28], [2, 35]]]]], [], []]], ['loc', [null, [2, 8], [2, 37]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').hasClass('fade'), 'fade class not present when animated set to false');

        this.set('animate', true);

        assert.ok(this.$('>:first-child').hasClass('fade'), 'fade class present when animated set to true');
    });

    ember_qunit.test('ariaDescribedBy attribute binding', function (assert) {
        var describedBy = 'targetId';

        this.set('ariaDescribedBy', describedBy);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 7,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 10,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-modal-header', [], ['title', 'Simple Example'], ['loc', [null, [3, 12], [3, 54]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [5, 12], [7, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [9, 12], [9, 31]]]]],
                    locals: [],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 11,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], ['ariaDescribedBy', ['subexpr', '@mut', [['get', 'ariaDescribedBy', ['loc', [null, [2, 36], [2, 51]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [10, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').attr('aria-describedby'), describedBy);
    });

    ember_qunit.test('aria-hidden can be bound in a custom header', function (assert) {
        this.render(template);

        assert.strictEqual(this.$('>:first-child').attr('aria-hidden'), 'false');
    });

    ember_qunit.test('aria-labelledBy is set', function (assert) {
        this.render(template);

        assert.strictEqual(this.$('>:first-child').attr('aria-labelledby'), this.$('>:first-child').find('.modal-title').prop('id'), '"aria-labelledby" points to correct element');
    });

    ember_qunit.test('aria-labelledby can be bound in a custom header', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 3,
                                    'column': 12
                                },
                                'end': {
                                    'line': 5,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('span');
                            dom.setAttribute(el1, 'class', 'modal-title');
                            var el2 = dom.createTextNode('Custom Title');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                            var element0 = dom.childAt(fragment, [1]);
                            var morphs = new Array(1);
                            morphs[0] = dom.createAttrMorph(element0, 'id');
                            return morphs;
                        },
                        statements: [['attribute', 'id', ['get', 'modal.ariaLabelledBy', ['loc', [null, [4, 47], [4, 67]]]]]],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                        dom.insertBoundary(fragment, 0);
                        dom.insertBoundary(fragment, null);
                        return morphs;
                    },
                    statements: [['block', 'sl-modal-header', [], [], 0, null, ['loc', [null, [3, 12], [5, 32]]]]],
                    locals: ['modal'],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], [], 0, null, ['loc', [null, [2, 8], [6, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').attr('aria-labelledby'), this.$('>:first-child').find('.modal-title').prop('id'), '"aria-labelledby" in custom header points to correct element');
    });

    ember_qunit.test('Component responds to "hide" stream action', function (assert) {
        this.set('stream', mockStream);
        this.set('hide', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 7,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 10,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-modal-header', [], ['title', 'Simple Example'], ['loc', [null, [3, 12], [3, 54]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [5, 12], [7, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [9, 12], [9, 31]]]]],
                    locals: [],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 11,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], ['stream', ['subexpr', '@mut', [['get', 'stream', ['loc', [null, [2, 27], [2, 33]]]]], [], []], 'hide', ['subexpr', '@mut', [['get', 'hide', ['loc', [null, [2, 39], [2, 43]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [10, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        mockStream.actions['hide']();

        assert.ok(this.get('hide').calledOnce, 'hide() was triggered successfully');
    });

    ember_qunit.test('Component responds to "show" stream action', function (assert) {
        this.set('stream', mockStream);
        this.set('show', sinon['default'].spy());

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 7,
                                    'column': 12
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('                ');
                            dom.appendChild(el0, el1);
                            var el1 = dom.createElement('p');
                            var el2 = dom.createTextNode('A simple modal example');
                            dom.appendChild(el1, el2);
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode('\n');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 10,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n\n');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-modal-header', [], ['title', 'Simple Example'], ['loc', [null, [3, 12], [3, 54]]]], ['block', 'sl-modal-body', [], [], 0, null, ['loc', [null, [5, 12], [7, 30]]]], ['content', 'sl-modal-footer', ['loc', [null, [9, 12], [9, 31]]]]],
                    locals: [],
                    templates: [child0]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 11,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-modal', [], ['stream', ['subexpr', '@mut', [['get', 'stream', ['loc', [null, [2, 27], [2, 33]]]]], [], []], 'show', ['subexpr', '@mut', [['get', 'show', ['loc', [null, [2, 39], [2, 43]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [10, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        mockStream.actions['show']();

        assert.ok(this.get('show').calledOnce, 'hide() was triggered successfully');
    });

});
define('dummy/tests/integration/components/sl-modal-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-modal-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-modal-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-pagination-test', ['ember', 'ember-qunit', 'sinon'], function (Ember, ember_qunit, sinon) {

    'use strict';

    ember_qunit.moduleForComponent('sl-pagination', 'Integration | Component | sl pagination', {
        integration: true
    });

    ember_qunit.test('Default classes are applied', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 1], ['loc', [null, [2, 8], [2, 38]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-pagination'), 'Default rendered component has class "sl-ember-components-pagination"');

        assert.ok(this.$('>:first-child').hasClass('pagination'), 'Default rendered component has class "pagination"');
    });

    ember_qunit.test('The totalPages property is bound to the total pages display', function (assert) {
        this.set('totalPages', 1);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', ['subexpr', '@mut', [['get', 'totalPages', ['loc', [null, [2, 35], [2, 45]]]]], [], []]], ['loc', [null, [2, 8], [2, 47]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('li:not(:first-child, :last-child) a').text().trim(), '1', 'totalPages is initialized to 1');

        this.set('totalPages', 2);

        assert.strictEqual(this.$('>:first-child').find('li:not(:first-child, :last-child) a').text().trim(), '12', 'totalPages is now set to 2');
    });

    ember_qunit.test('The currentPage property is bound to the current page display', function (assert) {
        this.set('currentPage', 1);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 2, 'currentPage', ['subexpr', '@mut', [['get', 'currentPage', ['loc', [null, [2, 49], [2, 60]]]]], [], []]], ['loc', [null, [2, 8], [2, 62]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('li.active a').text().trim(), '1', 'currentPage is initialized to 1');

        this.set('currentPage', 2);

        assert.strictEqual(this.$('>:first-child').find('li.active a').text().trim(), '2', 'currentPage is now set to 2');
    });

    ember_qunit.test('When totalPages is 1 the previous and next buttons are disabled', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 1], ['loc', [null, [2, 8], [2, 38]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('li:first-child').hasClass('disabled'), 'The previous button has the "disabled" class');

        assert.ok(this.$('>:first-child').find('li:last-child').hasClass('disabled'), 'The next button has the "disabled" class');
    });

    ember_qunit.test('The previous button is disabled when on the first page', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 2], ['loc', [null, [2, 8], [2, 38]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('li:first-child').hasClass('disabled'), 'The previous button has the "disabled" class');
    });

    ember_qunit.test('The next button is disabled when on the last page', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 2, 'currentPage', 2], ['loc', [null, [2, 8], [2, 52]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('li:last-child').hasClass('disabled'), 'The next button has the "disabled" class');
    });

    ember_qunit.test('Neither the previous nor the next button are disabled when not on an internal page', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 3, 'currentPage', 2], ['loc', [null, [2, 8], [2, 52]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(!this.$('>:first-child').find('li:first-child').hasClass('disabled'), 'The previous button does not have the "disabled" class');

        assert.ok(!this.$('>:first-child').find('li:last-child').hasClass('disabled'), 'The next button does not have the "disabled" class');
    });

    ember_qunit.test('Next button click increments the current page and calls the changePage action', function (assert) {
        var testActionHandler = sinon['default'].spy();

        this.on('testAction', testActionHandler);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 2, 'changePage', 'testAction'], ['loc', [null, [2, 8], [2, 62]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').find('li:last-child a').click();

        assert.strictEqual(this.$('>:first-child').find('li.active a').text().trim(), '2', 'The current page displayed was incremented');

        assert.strictEqual(testActionHandler.getCall(0).args[0], 2, 'The changePage action is called with the correct argument');
    });

    ember_qunit.test('Previous button click decrements the current page and calls the changePage action', function (assert) {
        var testActionHandler = sinon['default'].spy();

        this.on('testAction', testActionHandler);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 2, 'currentPage', 2, 'changePage', 'testAction'], ['loc', [null, [2, 8], [2, 76]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.$('>:first-child').find('li:first-child a').click();

        assert.strictEqual(this.$('>:first-child').find('li.active a').text().trim(), '1', 'The current page displayed was decremented');

        assert.strictEqual(testActionHandler.getCall(0).args[0], 1, 'The changePage action is called with the correct argument');
    });

    ember_qunit.test('Responsive plugin is initialized', function (assert) {
        var spy = sinon['default'].spy(Ember['default'].$.fn, 'twbsResponsivePagination');

        this.set('totalPages', 2);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', ['subexpr', '@mut', [['get', 'totalPages', ['loc', [null, [2, 35], [2, 45]]]]], [], []], 'currentPage', 1], ['loc', [null, [2, 8], [2, 61]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.deepEqual(spy.thisValues[0].get(0), this.$('>:first-child').get(0), 'Correct jQuery object was used to call the responsive plugin');

        // init called directly || initialized with options object || initialized with no params
        assert.ok(spy.calledWith('init') || spy.calledWithMatch({}) || spy.calledWithExactly(), 'Responsive plugin was initialized on creation');

        spy.reset();

        this.set('totalPages', 3);

        assert.deepEqual(spy.thisValues[0].get(0), this.$('>:first-child').get(0), 'Correct jQuery object was used to call the responsive plugin');

        // init called directly || initialized with options object || initialized with no params
        assert.ok(spy.calledWith('init') || spy.calledWithMatch({}) || spy.calledWithExactly(), 'Responsive plugin was initialized on totalPages change');

        Ember['default'].$.fn.twbsResponsivePagination.restore();
    });

    ember_qunit.test('Responsive plugin is updated when currentPage changes', function (assert) {
        var spy = sinon['default'].spy(Ember['default'].$.fn, 'twbsResponsivePagination');

        this.set('currentPage', 1);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', 3, 'currentPage', ['subexpr', '@mut', [['get', 'currentPage', ['loc', [null, [2, 49], [2, 60]]]]], [], []]], ['loc', [null, [2, 8], [2, 62]]]]],
                locals: [],
                templates: []
            };
        })()));

        spy.reset();

        this.set('currentPage', 2);

        assert.deepEqual(spy.thisValues[0].get(0), this.$('>:first-child').get(0), 'Correct jQuery object was used to call the responsive plugin');

        assert.ok(spy.calledWith('update'), 'Responsive plugin was updated');

        Ember['default'].$.fn.twbsResponsivePagination.restore();
    });

    ember_qunit.test('Responsive plugin is not used when isResponsive is false', function (assert) {
        var spy = sinon['default'].spy(Ember['default'].$.fn, 'twbsResponsivePagination');

        this.set('currentPage', 1);
        this.set('totalPages', 2);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-pagination', [], ['totalPages', ['subexpr', '@mut', [['get', 'totalPages', ['loc', [null, [3, 23], [3, 33]]]]], [], []], 'currentPage', ['subexpr', '@mut', [['get', 'currentPage', ['loc', [null, [4, 24], [4, 35]]]]], [], []], 'isResponsive', false], ['loc', [null, [2, 8], [6, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        this.set('totalPages', 3);
        this.set('currentPage', 2);

        assert.notOk(spy.called, 'Responsive plugin is never called');

        Ember['default'].$.fn.twbsResponsivePagination.restore();
    });

});
define('dummy/tests/integration/components/sl-pagination-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-pagination-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-pagination-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-panel-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-panel', 'Integration | Component | sl panel', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-panel', ['loc', [null, [2, 8], [2, 20]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-panel'), 'Default rendered component has class "sl-ember-components-panel"');

        assert.ok(this.$('>:first-child').hasClass('panel'), 'Default rendered component has class "panel"');

        assert.ok(this.$('>:first-child').hasClass('panel-default'), 'Default rendered component has class "panel-default"');

        var panelBody = this.$('>:first-child').find('> .panel-body');

        assert.strictEqual(panelBody.length, 1, 'Default rendered component has child with class "panel-body"');
    });

    ember_qunit.test('Valid heading value renders panel-heading', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-panel', [], ['heading', 'Test'], ['loc', [null, [2, 8], [2, 35]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.panel-heading').length, 1, 'Rendered component has panel-heading text');

        assert.strictEqual(this.$('>:first-child').find('.panel-heading').text(), 'Test', 'Text of rendered heading is equal to value passed to it');
    });

    ember_qunit.test('Loading state applies class name', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-panel', [], ['loading', true], ['loc', [null, [2, 8], [2, 33]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('> .panel-body').hasClass('sl-loading'), 'Rendered component body has class "sl-loading"');
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createElement('div');
                        dom.setAttribute(el1, 'class', 'yield-test');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-panel', [], [], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.yield-test').length, 1, 'Content yields successfully');
    });

});
define('dummy/tests/integration/components/sl-panel-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-panel-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-panel-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-progress-bar-test', ['ember', 'ember-qunit', 'sl-ember-components/components/sl-progress-bar'], function (Ember, ember_qunit, sl_progress_bar) {

    'use strict';

    ember_qunit.moduleForComponent('sl-progress-bar', 'Integration | Component | sl progress bar', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-progress-bar', ['loc', [null, [2, 8], [2, 27]]]]],
                locals: [],
                templates: []
            };
        })()));

        var child = this.$('>:first-child');
        var grandchild = this.$('>:first-child').find('>:first-child');

        assert.ok(child.hasClass('progress'), 'Has class "progress"');

        assert.ok(child.hasClass('sl-ember-components-progress-bar'), 'Has class "sl-ember-components-progress-bar"');

        assert.ok(child.hasClass('sl-progress-bar-low-percentage'), 'Has class "sl-progress-bar-low-percentage"');

        assert.ok(grandchild.hasClass('progress-bar'), 'Has class "progress-bar"');

        assert.notOk(grandchild.hasClass('progress-bar-striped'), 'Does not have class "progress-bar-striped"');

        assert.notOk(grandchild.hasClass('active'), 'Does not have class "active"');

        assert.ok(grandchild.hasClass('progress-bar-' + sl_progress_bar.Theme.DEFAULT), 'Has class "progress-bar-' + sl_progress_bar.Theme.DEFAULT + '"');

        assert.strictEqual(grandchild.attr('aria-valuemin'), '0', '"aria-valuemin" is 0');

        assert.strictEqual(grandchild.attr('aria-valuemax'), '100', '"aria-valuemax" is 100');

        assert.strictEqual(grandchild.attr('aria-valuenow'), '0', '"aria-valuenow" is 0');

        assert.strictEqual(Ember['default'].$.trim(grandchild.attr('style')), 'width: 0%;', '"style" is "width: 0%;"');

        assert.strictEqual(grandchild.attr('role'), 'progressbar', '"role" is "progressbar"');

        assert.strictEqual(grandchild.find('.sr-only').text().trim(), '0% Complete', 'Expected visual representation when "label" property is not provided');
    });

    ember_qunit.test('"value" property is supported', function (assert) {
        this.set('testValue', 12);
        this.set('testLabel', null);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['value', ['subexpr', '@mut', [['get', 'testValue', ['loc', [null, [3, 18], [3, 27]]]]], [], []], 'label', ['subexpr', '@mut', [['get', 'testLabel', ['loc', [null, [4, 18], [4, 27]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        var grandchild = this.$('>:first-child').find('>:first-child');

        assert.strictEqual(grandchild.attr('aria-valuenow'), '12', '"aria-valuenow" is 12');

        assert.strictEqual(grandchild.find('.sr-only').text().trim(), '12% Complete', '"value" property displayed when "label" property is not provided');

        this.set('testValue', 47);
        this.set('testLabel', 'test label');

        assert.strictEqual(grandchild.attr('aria-valuenow'), '47', '"aria-valuenow" is 47');

        assert.strictEqual(grandchild.find('span:not(.sr-only)').text().trim(), '47%', '"value" property displayed when "label" property is provided');
    });

    ember_qunit.test('"striped" property is supported', function (assert) {
        this.set('testStriped', false);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['striped', ['subexpr', '@mut', [['get', 'testStriped', ['loc', [null, [2, 34], [2, 45]]]]], [], []]], ['loc', [null, [2, 8], [2, 47]]]]],
                locals: [],
                templates: []
            };
        })()));

        var grandchild = this.$('>:first-child').find('>:first-child');

        assert.notOk(grandchild.hasClass('progress-bar-striped'), '"progress-bar-striped" class is not applied');

        this.set('testStriped', true);

        assert.ok(grandchild.hasClass('progress-bar-striped'), '"progress-bar-striped" class is applied');
    });

    ember_qunit.test('"animated" property is supported', function (assert) {
        this.set('testAnimated', false);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['animated', ['subexpr', '@mut', [['get', 'testAnimated', ['loc', [null, [2, 35], [2, 47]]]]], [], []]], ['loc', [null, [2, 8], [2, 49]]]]],
                locals: [],
                templates: []
            };
        })()));

        var grandchild = this.$('>:first-child').find('>:first-child');

        assert.notOk(grandchild.hasClass('active'), '"active" class is not applied');

        this.set('testAnimated', true);

        assert.ok(grandchild.hasClass('active'), '"active" class is applied');
    });

    ember_qunit.test('"theme" property is supported', function (assert) {
        this.set('testTheme', sl_progress_bar.Theme.DEFAULT);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['theme', ['subexpr', '@mut', [['get', 'testTheme', ['loc', [null, [2, 32], [2, 41]]]]], [], []]], ['loc', [null, [2, 8], [2, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        var grandchild = this.$('>:first-child').find('>:first-child');

        assert.ok(grandchild.hasClass('progress-bar-' + sl_progress_bar.Theme.DEFAULT), '"progress-bar-' + sl_progress_bar.Theme.DEFAULT + '" class is applied');

        this.set('testTheme', sl_progress_bar.Theme.INFO);

        assert.ok(grandchild.hasClass('progress-bar-' + sl_progress_bar.Theme.INFO), '"progress-bar-' + sl_progress_bar.Theme.INFO + '" class is applied');
    });

    ember_qunit.test('"style" string is updated', function (assert) {
        this.set('testValue', 12);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['value', ['subexpr', '@mut', [['get', 'testValue', ['loc', [null, [2, 32], [2, 41]]]]], [], []]], ['loc', [null, [2, 8], [2, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        var grandchild = this.$('>:first-child').find('>:first-child');

        assert.strictEqual(Ember['default'].$.trim(grandchild.attr('style')), 'width: 12%;', '"style" is "width: 12%;"');

        this.set('testValue', 38);

        assert.strictEqual(Ember['default'].$.trim(grandchild.attr('style')), 'width: 38%;', '"style" is "width: 38%;"');
    });

    ember_qunit.test('"label" property is supported', function (assert) {
        this.set('testLabel', null);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['label', ['subexpr', '@mut', [['get', 'testLabel', ['loc', [null, [2, 32], [2, 41]]]]], [], []]], ['loc', [null, [2, 8], [2, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        var grandchild = this.$('>:first-child').find('>:first-child');

        assert.strictEqual(grandchild.find('.sr-only').text().trim(), '0% Complete', 'Part 1 - Expected visual representation when "label" property is not provided');

        assert.strictEqual(grandchild.find('span:not(.sr-only)').length, 0, 'Part 2 - Expected visual representation when "label" property is not provided');

        this.set('testLabel', 'test label');

        assert.strictEqual(grandchild.find('span:not(.sr-only)').text().trim(), '0%', 'Part 1 - Expected visual representation when "label" property is provided');

        assert.strictEqual(grandchild.find('.sr-only').length, 0, 'Part 2 - Expected visual representation when "label" property is provided');
    });

    ember_qunit.test('Threshold level affects rendered output', function (assert) {
        this.set('testValue', 12);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['value', ['subexpr', '@mut', [['get', 'testValue', ['loc', [null, [2, 32], [2, 41]]]]], [], []]], ['loc', [null, [2, 8], [2, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        var child = this.$('>:first-child');

        assert.ok(child.hasClass('sl-progress-bar-low-percentage'), '"sl-progress-bar-low-percentage" class is applied when "value" is less than 50');

        this.set('testValue', 50);

        assert.notOk(child.hasClass('sl-progress-bar-low-percentage'), '"sl-progress-bar-low-percentage" class is not applied when "value" is greater than 49');
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 32], [2, 37]]]]], [], []]], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 34], [2, 41]]]]], [], []]], ['loc', [null, [2, 8], [2, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-progress-bar', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 32], [2, 37]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 46], [2, 53]]]]], [], []]], ['loc', [null, [2, 8], [2, 55]]]]],
                locals: [],
                templates: []
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-progress-bar-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-progress-bar-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-progress-bar-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-radio-group-test', ['ember', 'ember-qunit', 'ember-test-helpers/wait'], function (Ember, ember_qunit, waitForPendingRunLoops) {

    'use strict';

    ember_qunit.moduleForComponent('sl-radio-group', 'Integration | Component | sl radio group', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 3,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 4,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['name', 'testName'], 0, null, ['loc', [null, [2, 8], [3, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-radio-group'), 'Has class "sl-ember-components-radio-group"');

        assert.ok(this.$('>:first-child').hasClass('form-group'), 'Has class "form-group"');
    });

    ember_qunit.test('The disabled state applies the disabled attribute and class', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 3,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 4,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['disabled', true, 'name', 'testName'], 0, null, ['loc', [null, [2, 8], [3, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').attr('disabled'), 'disabled', 'has "disabled" attribute');

        assert.ok(this.$('>:first-child').hasClass('disabled'), 'has "disabled" class');
    });

    ember_qunit.test('The disabled state applies to sl-radio children', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-radio', [], ['label', 'One', 'value', 'one'], ['loc', [null, [3, 12], [3, 48]]]], ['inline', 'sl-radio', [], ['label', 'Two', 'value', 'two'], ['loc', [null, [4, 12], [4, 48]]]], ['inline', 'sl-radio', [], ['label', 'Three', 'value', 'three'], ['loc', [null, [5, 12], [5, 52]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['disabled', true, 'name', 'testName'], 0, null, ['loc', [null, [2, 8], [6, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input[disabled]').length, 3, 'Rendered component has three disabled inputs');
    });

    ember_qunit.test('The "name" property applies the name attribute to sl-radio children', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-radio', [], ['label', 'One', 'value', 'one'], ['loc', [null, [3, 12], [3, 48]]]], ['inline', 'sl-radio', [], ['label', 'Two', 'value', 'two'], ['loc', [null, [4, 12], [4, 48]]]], ['inline', 'sl-radio', [], ['label', 'Three', 'value', 'three'], ['loc', [null, [5, 12], [5, 52]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['name', 'testName'], 0, null, ['loc', [null, [2, 8], [6, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input[name="testName"]').length, 3, 'input has "name" attribute set to correcly passed "name" property');
    });

    ember_qunit.test('"label" property is supported', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['name', 'testName', 'label', 'testLabel'], 0, null, ['loc', [null, [2, 8], [6, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label').text().trim(), 'testLabel', '"label" property sets text inside HTML label tag');
    });

    ember_qunit.test('"optional" property is supported', function (assert) {
        this.set('optionalTest', false);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 7,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['name', 'testName', 'label', 'testLabel', 'optional', ['subexpr', '@mut', [['get', 'optionalTest', ['loc', [null, [5, 21], [5, 33]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [7, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.text-info').length, 0, '"optional" property does not set class "text-info"');

        this.set('optionalTest', true);

        assert.strictEqual(this.$('>:first-child').find('.text-info').length, 1, '"optional" property sets class "text-info"');

        assert.strictEqual(this.$('>:first-child').find('.text-info').text().trim(), 'Optional', '"optional" property sets correct text inside HTML tag');
    });

    ember_qunit.test('"required" property is supported', function (assert) {
        this.set('requiredTest', false);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 7,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['name', 'testName', 'label', 'testLabel', 'required', ['subexpr', '@mut', [['get', 'requiredTest', ['loc', [null, [5, 21], [5, 33]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [7, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.text-danger').length, 0, '"required" property does not set class "text-danger"');

        this.set('requiredTest', true);

        assert.strictEqual(this.$('>:first-child').find('.text-danger').length, 1, '"required" property sets class "text-danger"');

        assert.strictEqual(this.$('>:first-child').find('.text-danger').text().trim(), 'Required', '"required" property sets correct text inside HTML tag');
    });

    ember_qunit.test("Inline true sets sl-radio children's inline property to true", function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-radio', [], ['label', 'One', 'value', 'one'], ['loc', [null, [3, 12], [3, 48]]]], ['inline', 'sl-radio', [], ['label', 'Two', 'value', 'two'], ['loc', [null, [4, 12], [4, 48]]]], ['inline', 'sl-radio', [], ['label', 'Three', 'value', 'three'], ['loc', [null, [5, 12], [5, 52]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['inline', true, 'name', 'testName'], 0, null, ['loc', [null, [2, 8], [6, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-ember-components-radio.radio').length, 0, 'Rendered component children buttons are not inline');

        assert.strictEqual(this.$('>:first-child').find('.sl-ember-components-radio.radio-inline').length, 3, 'Rendered component children buttons are inline');
    });

    ember_qunit.test("Inline false sets sl-radio children's inline property to false", function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-radio', [], ['label', 'One', 'value', 'one'], ['loc', [null, [3, 12], [3, 48]]]], ['inline', 'sl-radio', [], ['label', 'Two', 'value', 'two'], ['loc', [null, [4, 12], [4, 48]]]], ['inline', 'sl-radio', [], ['label', 'Three', 'value', 'three'], ['loc', [null, [5, 12], [5, 52]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['inline', false, 'name', 'testName'], 0, null, ['loc', [null, [2, 8], [6, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.sl-ember-components-radio.radio-inline').length, 0, 'Rendered component has zero inline radio buttons');

        assert.strictEqual(this.$('>:first-child').find('.sl-ember-components-radio.radio').length, 3, 'Rendered component has three default (non-inline) radio buttons');
    });

    ember_qunit.test('Value changes when sl-radio child selected', function (assert) {
        var _this = this;

        this.set('value', 'jeremy');
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-radio', [], ['label', 'One', 'value', 'eric'], ['loc', [null, [3, 12], [3, 49]]]], ['inline', 'sl-radio', [], ['label', 'Two', 'value', 'josh'], ['loc', [null, [4, 12], [4, 49]]]], ['inline', 'sl-radio', [], ['label', 'Three', 'value', 'michael'], ['loc', [null, [5, 12], [5, 54]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 32], [2, 37]]]]], [], []], 'name', 'testName'], 0, null, ['loc', [null, [2, 8], [6, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        Ember['default'].run(function () {
            var radioButton = _this.$('>:first-child').find('input[value="eric"]');
            radioButton.click();
        });

        return waitForPendingRunLoops['default']().then(function () {
            assert.strictEqual(_this.get('value'), 'eric', '"eric" value is selected');
        });
    });

    ember_qunit.test('Default value gets selected by default', function (assert) {
        this.set('value', 'josh');
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['inline', 'sl-radio', [], ['label', 'One', 'value', 'eric'], ['loc', [null, [3, 12], [3, 49]]]], ['inline', 'sl-radio', [], ['label', 'Two', 'value', 'josh'], ['loc', [null, [4, 12], [4, 49]]]], ['inline', 'sl-radio', [], ['label', 'Three', 'value', 'michael'], ['loc', [null, [5, 12], [5, 54]]]]],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 32], [2, 37]]]]], [], []], 'name', 'testName'], 0, null, ['loc', [null, [2, 8], [6, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input[name="testName"]:checked').val(), 'josh', 'The value "josh" that is set is selected by default');
    });

    ember_qunit.test('Yielded content passes through', function (assert) {

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            A content\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-radio-group', [], ['name', 'testName'], 0, null, ['loc', [null, [2, 8], [4, 27]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'A content', 'Expected content is present');
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 28], [2, 35]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Default info alert\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-alert', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 26], [2, 31]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 40], [2, 47]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [4, 21]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

});
define('dummy/tests/integration/components/sl-radio-group-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-radio-group-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-radio-group-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-radio-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    var defaultTemplate = Ember.HTMLBars.template((function () {
        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 3,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n    ');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
            },
            statements: [['content', 'sl-radio', ['loc', [null, [2, 4], [2, 16]]]]],
            locals: [],
            templates: []
        };
    })());

    ember_qunit.moduleForComponent('sl-radio', 'Integration | Component | sl radio', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(defaultTemplate);

        assert.ok(this.$('>:first-child').hasClass('form-group'), 'Has class "form-group"');

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-radio'), 'Has class "sl-ember-components-radio"');

        assert.ok(this.$('>:first-child').hasClass('radio'), 'Has class "radio"');

        assert.strictEqual(this.$('>:first-child').find('input[type="radio"]').length, 1, 'input type is set to "radio"');
    });

    ember_qunit.test('Disabled state applies disabled class, and attribute to input', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-radio', [], ['disabled', true], ['loc', [null, [2, 8], [2, 34]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').find('input').prop('disabled'), 'has attribute "disabled"');

        assert.ok(this.$('>:first-child').hasClass('disabled'), 'has class "disabled"');
    });

    ember_qunit.test('Inline property sets relevant class', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-radio', [], ['inline', true], ['loc', [null, [2, 8], [2, 32]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('radio-inline'), 'has class "radio-inline"');

        assert.notOk(this.$('>:first-child').hasClass('form-group'), 'inline radio does not have class "form-group"');
    });

    ember_qunit.test('name applies property to input', function (assert) {
        this.render(defaultTemplate);

        assert.strictEqual(this.$('>:first-child').find('input').prop('name'), '', 'Rendered input has empty name');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-radio', [], ['name', 'testname'], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').prop('name'), 'testname', 'Rendered input has name set');
    });

    ember_qunit.test('"value" property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-radio', [], ['value', 'testValue'], ['loc', [null, [2, 8], [2, 38]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('input').val(), 'testValue', '"value" is set');
    });

    ember_qunit.test('"label" property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-radio', [], ['label', 'testLabel'], ['loc', [null, [2, 8], [2, 38]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label').text().trim(), 'testLabel', '"label" text gets set');
    });

});
define('dummy/tests/integration/components/sl-radio-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-radio-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-radio-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-span-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-span', 'Integration | Component | sl span', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-span', ['loc', [null, [2, 8], [2, 19]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-span'), 'Has class "sl-ember-components-span"');

        assert.strictEqual(this.$('>:first-child').text().trim(), '', '"value" defaults to null');
    });

    ember_qunit.test('Content is yielded', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Some yielded text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-span', [], [], 0, null, ['loc', [null, [2, 8], [4, 20]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'Some yielded text', 'Content yields successfully');
    });

    ember_qunit.test('"value" property is supported', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-span', [], ['value', 'value text'], ['loc', [null, [2, 8], [2, 38]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'value text', '"value" text is displayed');
    });

    ember_qunit.test('"value" property overrides yield', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            Some yielded text\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-span', [], ['value', 'value text'], 0, null, ['loc', [null, [2, 8], [4, 20]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'value text', '"value" text is displayed instead of yield');
    });

    ember_qunit.test('loading property applies loading class', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-span', ['loc', [null, [2, 8], [2, 19]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').hasClass('sl-loading'), 'Component does not have class "sl-loading"');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-span', [], ['loading', true], ['loc', [null, [2, 8], [2, 32]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-loading'), 'Component has class "sl-loading"');
    });

    ember_qunit.test('inverse property applies inverse class', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-span', ['loc', [null, [2, 8], [2, 19]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.notOk(this.$('>:first-child').hasClass('inverse'), 'Component does not have class "inverse"');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-span', [], ['inverse', true], ['loc', [null, [2, 8], [2, 32]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('inverse'), 'Component has class "inverse"');
    });

});
define('dummy/tests/integration/components/sl-span-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-span-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-span-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-tab-pane-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-tab-pane', 'Integration | Component | sl tab pane', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {

        var label = 'Test Label';
        this.set('labelTest', label);

        var name = 'Test Name';
        this.set('nameTest', name);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-tab-pane', [], ['label', ['subexpr', '@mut', [['get', 'labelTest', ['loc', [null, [3, 18], [3, 27]]]]], [], []], 'name', ['subexpr', '@mut', [['get', 'nameTest', ['loc', [null, [4, 17], [4, 25]]]]], [], []]], ['loc', [null, [2, 8], [5, 10]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('tab-pane'), 'Has class "tab-pane"');

        assert.strictEqual(this.$('>:first-child').attr('data-tab-label'), label, 'Data tab label is set properly');

        assert.strictEqual(this.$('>:first-child').attr('data-tab-name'), name, 'Data tab name is set properly');
    });

    ember_qunit.test('Yielded content passes through', function (assert) {

        this.render(Ember.HTMLBars.template((function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            A content\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-tab-pane', [], [], 0, null, ['loc', [null, [2, 8], [4, 24]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        assert.strictEqual(this.$('>:first-child').text().trim(), 'A content', 'Expected content is present');
    });

});
define('dummy/tests/integration/components/sl-tab-pane-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-tab-pane-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-tab-pane-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-tab-panel-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

    'use strict';

    var template = Ember['default'].HTMLBars.template((function () {
        var child0 = (function () {
            var child0 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 3,
                                'column': 8
                            },
                            'end': {
                                'line': 3,
                                'column': 52
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('A content');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            var child1 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 4,
                                'column': 8
                            },
                            'end': {
                                'line': 4,
                                'column': 52
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('B content');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            var child2 = (function () {
                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 5,
                                'column': 8
                            },
                            'end': {
                                'line': 5,
                                'column': 52
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('C content');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                        return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 2,
                            'column': 4
                        },
                        'end': {
                            'line': 6,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-tab-pane', [], ['label', 'A', 'name', 'a'], 0, null, ['loc', [null, [3, 8], [3, 68]]]], ['block', 'sl-tab-pane', [], ['label', 'B', 'name', 'b'], 1, null, ['loc', [null, [4, 8], [4, 68]]]], ['block', 'sl-tab-pane', [], ['label', 'C', 'name', 'c'], 2, null, ['loc', [null, [5, 8], [5, 68]]]]],
                locals: [],
                templates: [child0, child1, child2]
            };
        })();

        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 7,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
            },
            statements: [['block', 'sl-tab-panel', [], [], 0, null, ['loc', [null, [2, 4], [6, 21]]]]],
            locals: [],
            templates: [child0]
        };
    })());

    ember_qunit.moduleForComponent('sl-tab-panel', 'Integration | Component | sl tab panel', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(template);

        var wrapper = this.$('>:first-child');

        assert.ok(wrapper.hasClass('sl-ember-components-tab-panel'), 'Has class "sl-ember-components-tab-panel"');

        assert.ok(wrapper.hasClass('sl-align-tabs-left'), 'Has class "sl-align-tabs-left"');

        assert.strictEqual(wrapper.find('.nav-tabs[role="tablist"]').length, 1, 'Rendered component has "tablist" ARIA role');

        assert.strictEqual(wrapper.find('> ul > li a[role="tab"]').length, 3, 'Rendered component has three <a> with "tab" ARIA role');

        var labels = [];

        wrapper.find('> ul > li[data-tab-name]').each(function () {
            labels.push(Ember['default'].$(this).attr('data-tab-name'));
        });

        assert.deepEqual(labels, ['a', 'b', 'c'], 'Tabs display in expected order');
    });

    ember_qunit.test('setupTabs() sets up tabs correctly', function (assert) {
        assert.expect(5);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 3,
                                    'column': 12
                                },
                                'end': {
                                    'line': 3,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('A content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                var child1 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 4,
                                    'column': 12
                                },
                                'end': {
                                    'line': 4,
                                    'column': 57
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('B content ');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                var child2 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 5,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('C content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['block', 'sl-tab-pane', [], ['label', 'A', 'name', 'a'], 0, null, ['loc', [null, [3, 12], [3, 72]]]], ['block', 'sl-tab-pane', [], ['label', 'B', 'name', 'b'], 1, null, ['loc', [null, [4, 12], [4, 73]]]], ['block', 'sl-tab-pane', [], ['label', 'C', 'name', 'c'], 2, null, ['loc', [null, [5, 12], [5, 72]]]]],
                    locals: [],
                    templates: [child0, child1, child2]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-tab-panel', [], ['tabs', ['subexpr', '@mut', [['get', 'tabs', ['loc', [null, [2, 29], [2, 33]]]]], [], []]], 0, null, ['loc', [null, [2, 8], [6, 25]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var wrapper = this.$('>:first-child');
        var tabPaneA = wrapper.find('.tab-pane[data-tab-name="a"]');
        var done = assert.async();

        assert.strictEqual(wrapper.find('> ul > li[data-tab-name]').length, 3, 'Three tabs are rendered');

        assert.strictEqual(wrapper.find('.tab-pane[data-tab-name]').length, 3, 'Three tab panes are rendered');

        assert.strictEqual(wrapper.find('.tab-pane[data-tab-name="b"]').text().trim(), 'B content', 'Expected content is present in second tab pane');

        // queue asserts after animation
        tabPaneA.queue(function () {
            assert.strictEqual(wrapper.find('> ul > li.active[data-tab-name="a"]').length, 1, 'Rendered component has tab "a" as its active tab');

            assert.strictEqual(wrapper.find('.tab-pane.active[data-tab-name="a"]').length, 1, 'Rendered component has panel for tab "a" as its active panel');

            done();
        });
    });

    ember_qunit.test('initialTabName property is respected', function (assert) {
        assert.expect(2);

        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 3,
                                    'column': 12
                                },
                                'end': {
                                    'line': 3,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('A content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                var child1 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 4,
                                    'column': 12
                                },
                                'end': {
                                    'line': 4,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('B content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                var child2 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 5,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('C content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['block', 'sl-tab-pane', [], ['label', 'A', 'name', 'a'], 0, null, ['loc', [null, [3, 12], [3, 72]]]], ['block', 'sl-tab-pane', [], ['label', 'B', 'name', 'b'], 1, null, ['loc', [null, [4, 12], [4, 72]]]], ['block', 'sl-tab-pane', [], ['label', 'C', 'name', 'c'], 2, null, ['loc', [null, [5, 12], [5, 72]]]]],
                    locals: [],
                    templates: [child0, child1, child2]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-tab-panel', [], ['initialTabName', 'b'], 0, null, ['loc', [null, [2, 8], [6, 25]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var wrapper = this.$('>:first-child');
        var tabPaneB = wrapper.find('.tab-pane[data-tab-name="b"]');
        var done = assert.async();

        // queue asserts after animation
        tabPaneB.queue(function () {
            assert.strictEqual(wrapper.find('> ul > li.active[data-tab-name="b"]').length, 1, 'Initial tab is expected "b"');

            assert.ok(tabPaneB.hasClass('active'), 'Initial tab pane is expected "b"');

            done();
        });
    });

    ember_qunit.test('alignTabs property is respected', function (assert) {
        this.render(Ember['default'].HTMLBars.template((function () {
            var child0 = (function () {
                var child0 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 3,
                                    'column': 12
                                },
                                'end': {
                                    'line': 3,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('A content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                var child1 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 4,
                                    'column': 12
                                },
                                'end': {
                                    'line': 4,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('B content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                var child2 = (function () {
                    return {
                        meta: {
                            'revision': 'Ember@1.13.7',
                            'loc': {
                                'source': null,
                                'start': {
                                    'line': 5,
                                    'column': 12
                                },
                                'end': {
                                    'line': 5,
                                    'column': 56
                                }
                            }
                        },
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode('C content');
                            dom.appendChild(el0, el1);
                            return el0;
                        },
                        buildRenderNodes: function buildRenderNodes() {
                            return [];
                        },
                        statements: [],
                        locals: [],
                        templates: []
                    };
                })();

                return {
                    meta: {
                        'revision': 'Ember@1.13.7',
                        'loc': {
                            'source': null,
                            'start': {
                                'line': 2,
                                'column': 8
                            },
                            'end': {
                                'line': 6,
                                'column': 8
                            }
                        }
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode('            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n            ');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment('');
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode('\n');
                        dom.appendChild(el0, el1);
                        return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                    },
                    statements: [['block', 'sl-tab-pane', [], ['label', 'A', 'name', 'a'], 0, null, ['loc', [null, [3, 12], [3, 72]]]], ['block', 'sl-tab-pane', [], ['label', 'B', 'name', 'b'], 1, null, ['loc', [null, [4, 12], [4, 72]]]], ['block', 'sl-tab-pane', [], ['label', 'C', 'name', 'c'], 2, null, ['loc', [null, [5, 12], [5, 72]]]]],
                    locals: [],
                    templates: [child0, child1, child2]
                };
            })();

            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 7,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['block', 'sl-tab-panel', [], ['alignTabs', 'right'], 0, null, ['loc', [null, [2, 8], [6, 25]]]]],
                locals: [],
                templates: [child0]
            };
        })()));

        var wrapper = this.$('>:first-child');

        assert.ok(wrapper.hasClass('sl-align-tabs-right'), 'Tab alignment class is applied');
    });

    ember_qunit.test('Clicking tab changes active tab', function (assert) {
        assert.expect(4);

        this.render(template);

        var wrapper = this.$('>:first-child');
        var tabPaneB = wrapper.find('.tab-pane[data-tab-name="b"]');
        var tabPaneA = wrapper.find('.tab-pane[data-tab-name="a"]');

        var done = assert.async();

        wrapper.find('> ul > li[data-tab-name="b"] a').trigger('click');

        // queue asserts after animation
        tabPaneA.queue(function () {
            tabPaneB.queue(function () {
                var activeTab = wrapper.find('> ul > li.active');
                var activePane = wrapper.find('.tab-pane.active');

                assert.strictEqual(activeTab.attr('data-tab-name'), 'b', 'Active tab is "b"');

                assert.strictEqual(activePane.attr('data-tab-name'), 'b', 'Active pane is "b"');

                assert.strictEqual(activeTab.length, 1, "There's only one active tab'");

                assert.strictEqual(activePane.length, 1, "There's only one active pane");

                done();
            });
        });
    });

});
define('dummy/tests/integration/components/sl-tab-panel-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-tab-panel-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-tab-panel-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-textarea-test', ['ember-qunit', 'qunit'], function (ember_qunit, qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-textarea', 'Integration | Component | sl textarea', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-textarea', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-textarea'), 'Has class "sl-ember-components-textarea"');

        assert.ok(this.$('>:first-child').hasClass('form-group'), 'Has class "form-group"');

        assert.ok(this.$('>:first-child').find('textarea').hasClass('form-control'), 'Has class "form-control"');

        assert.strictEqual(this.$('>:first-child').find('textarea').attr('spellcheck'), 'false', '"spellcheck" property default value is false');
    });

    ember_qunit.test('"value" property is supported', function (assert) {
        this.set('value', 'testBoundValue');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 28], [2, 33]]]]], [], []]], ['loc', [null, [2, 8], [2, 35]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').val(), this.get('value'), '"value" property has expected value');
    });

    ember_qunit.test('"wrap" property is supported', function (assert) {
        this.set('wrap', 'hard');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['wrap', ['subexpr', '@mut', [['get', 'wrap', ['loc', [null, [2, 27], [2, 31]]]]], [], []]], ['loc', [null, [2, 8], [2, 33]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').attr('wrap'), this.get('wrap'), '"wrap" property has expected value');

        this.set('wrap', 'soft');

        assert.strictEqual(this.$('>:first-child').find('textarea').attr('wrap'), this.get('wrap'), '"wrap" property is settable');
    });

    ember_qunit.test('"tabindex" property is supported', function (assert) {
        this.set('tabindex', 2);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['tabindex', ['subexpr', '@mut', [['get', 'tabindex', ['loc', [null, [2, 31], [2, 39]]]]], [], []]], ['loc', [null, [2, 8], [2, 41]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('tabindex'), this.get('tabindex'), '"tabindex" property has expected value');

        this.set('tabindex', 1);

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('tabindex'), this.get('tabindex'), '"tabindex" property is settable');
    });

    ember_qunit.test('"autofocus" property is supported', function (assert) {
        this.set('autofocus', true);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['autofocus', ['subexpr', '@mut', [['get', 'autofocus', ['loc', [null, [2, 32], [2, 41]]]]], [], []]], ['loc', [null, [2, 8], [2, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('autofocus'), this.get('autofocus'), '"autofocus" property has expected value');

        this.set('autofocus', false);

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('autofocus'), this.get('autofocus'), '"autofocus" property is settable');
    });

    ember_qunit.test('"cols" property is supported', function (assert) {
        this.set('cols', 8);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['cols', ['subexpr', '@mut', [['get', 'cols', ['loc', [null, [2, 27], [2, 31]]]]], [], []]], ['loc', [null, [2, 8], [2, 33]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('cols'), this.get('cols'), '"cols" property has expected value');

        this.set('cols', 7);

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('cols'), this.get('cols'), '"cols" property is settable');
    });

    ember_qunit.test('"disabled" property is supported', function (assert) {
        this.set('disabled', true);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['disabled', ['subexpr', '@mut', [['get', 'disabled', ['loc', [null, [2, 31], [2, 39]]]]], [], []]], ['loc', [null, [2, 8], [2, 41]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('disabled'), this.get('disabled'), '"disabled" property has expected value');

        this.set('disabled', false);

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('disabled'), this.get('disabled'), '"disabled" property is settable');
    });

    ember_qunit.test('"maxlength" property is supported', function (assert) {
        this.set('maxlength', 12);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['maxlength', ['subexpr', '@mut', [['get', 'maxlength', ['loc', [null, [2, 32], [2, 41]]]]], [], []]], ['loc', [null, [2, 8], [2, 43]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('maxlength'), this.get('maxlength'), '"maxlength" property has expected value');

        this.set('maxlength', 11);

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('maxlength'), this.get('maxlength'), '"maxlength" property is settable');
    });

    ember_qunit.test('"placeholder" property is supported', function (assert) {
        this.set('placeholder', 'placeholder text');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['placeholder', ['subexpr', '@mut', [['get', 'placeholder', ['loc', [null, [2, 34], [2, 45]]]]], [], []]], ['loc', [null, [2, 8], [2, 47]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').attr('placeholder'), this.get('placeholder'), '"placeholder" property has expected value');

        this.set('placeholder', 'placeholder text two');

        assert.strictEqual(this.$('>:first-child').find('textarea').attr('placeholder'), this.get('placeholder'), '"placeholder" property is settable');
    });

    ember_qunit.test('"readonly" property is supported', function (assert) {
        this.set('readonly', true);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [2, 31], [2, 39]]]]], [], []]], ['loc', [null, [2, 8], [2, 41]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('readonly'), this.get('readonly'), '"readonly" property has expected value');

        this.set('readonly', false);

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('readonly'), this.get('readonly'), '"readonly" property is settable');
    });

    ember_qunit.test('"rows" property is supported', function (assert) {
        this.set('rows', 4);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['rows', ['subexpr', '@mut', [['get', 'rows', ['loc', [null, [2, 27], [2, 31]]]]], [], []]], ['loc', [null, [2, 8], [2, 33]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('rows'), this.get('rows'), '"rows" property has expected value');

        this.set('rows', 5);

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('rows'), this.get('rows'), '"rows" property is settable');
    });

    ember_qunit.test('"helpText" is rendered if populated', function (assert) {
        this.set('helpText', 'Help Text');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['helpText', ['subexpr', '@mut', [['get', 'helpText', ['loc', [null, [2, 31], [2, 39]]]]], [], []]], ['loc', [null, [2, 8], [2, 41]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('.help-block').prop('tagName'), 'P', '"helptext" block is rendered as a <p>');

        assert.strictEqual(this.$('>:first-child').find('.help-block').text().trim(), this.get('helpText'), '"helptext" block text is expected value');
    });

    ember_qunit.test('"optional" and "required" elements are rendered if populated along with "label" property', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['label', 'Test Label', 'optional', true, 'required', true], ['loc', [null, [2, 8], [2, 70]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label > .text-info').prop('tagName'), 'SMALL', "Label's text-info <small> is rendered");

        assert.strictEqual(this.$('>:first-child').find('label > .text-danger').prop('tagName'), 'SMALL', "Label's text-danger <small> is rendered");
    });

    ember_qunit.test('If "label" property is not populated, "optional" and "required" elements are not rendered even if populated', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 8
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n            ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['optional', true, 'required', true], ['loc', [null, [2, 12], [2, 55]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label > .text-info').length, 0, 'Label text-info is not rendered');

        assert.strictEqual(this.$('>:first-child').find('label > .text-danger').length, 0, 'Label text-danger is not rendered');
    });

    ember_qunit.test('If "label" property is not populated, label element is not rendered', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-textarea', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label').length, 0, '"label" element is not rendered');
    });

    ember_qunit.test('If "label" property is populated, label element is rendered', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['label', 'test'], ['loc', [null, [2, 8], [2, 36]]]]],
                locals: [],
                templates: []
            };
        })()));

        var label = this.$(this.$('>:first-child').find('label'));

        assert.strictEqual(label.length, 1, 'Label is present');

        assert.strictEqual(label.text().trim(), 'test', 'Label text is expected value');

        assert.ok(this.$('>:first-child').find('label').hasClass('control-label'), 'Has class "control-label"');
    });

    ember_qunit.test('If "label" property is populated, "for" attribute is expected value', function (assert) {
        this.set('label', 'Test Label');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['label', ['subexpr', '@mut', [['get', 'label', ['loc', [null, [2, 28], [2, 33]]]]], [], []]], ['loc', [null, [2, 8], [2, 35]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('label').prop('for'), this.$('>:first-child').find('textarea').prop('id'), 'Label "for" property matches textarea\'s "id" property');
    });

    ember_qunit.test('for attribute value on label matches id of textarea', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['label', 'test label'], ['loc', [null, [2, 8], [2, 42]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.equal(this.$('>:first-child').find('label').attr('for'), this.$('>:first-child').find('textarea').attr('id'));
    });

    ember_qunit.test('"spellcheck" property is supported with bound values', function (assert) {
        this.set('spellcheck', true);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['spellcheck', ['subexpr', '@mut', [['get', 'spellcheck', ['loc', [null, [2, 33], [2, 43]]]]], [], []]], ['loc', [null, [2, 8], [2, 45]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').attr('spellcheck'), 'true', '"spellcheck" property is expected value');

        this.set('spellcheck', false);

        assert.strictEqual(this.$('>:first-child').find('textarea').attr('spellcheck'), 'false', '"spellcheck" property is expected value');
    });

    ember_qunit.test('Tooltip properties are set correctly when title parameter is set', function (assert) {
        var title = 'test title';

        this.set('title', title);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 28], [2, 33]]]]], [], []]], ['loc', [null, [2, 8], [2, 35]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var tooltipData = data['bs.tooltip'];
        var options = tooltipData.getOptions();

        assert.strictEqual(tooltipData.enabled, true, 'tooltip is enabled');

        assert.strictEqual(tooltipData.getTitle(), title, 'Title text is set correctly');

        assert.strictEqual(options.trigger, 'hover focus', 'Default trigger is "hover focus"');
    });

    ember_qunit.test('Popover properties are set correctly when popover parameter is set', function (assert) {
        var title = 'test title';
        var popover = 'popover text';

        this.set('title', title);
        this.set('popover', popover);

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 30], [2, 37]]]]], [], []]], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        var data = this.$('>:first-child').data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 28], [2, 33]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 42], [2, 49]]]]], [], []]], ['loc', [null, [2, 8], [2, 51]]]]],
                locals: [],
                templates: []
            };
        })()));

        data = this.$('>:first-child').data();
        popoverData = data['bs.popover'];
        var options = popoverData.getOptions();

        assert.strictEqual(popoverData.getTitle(), title, 'Popover title was set correctly');

        assert.strictEqual(popoverData.getContent(), popover, 'Popover text is set correctly');

        assert.strictEqual(options.trigger, 'click', 'Default trigger is "click"');
    });

    ember_qunit.test('name applies property to textarea', function (assert) {
        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-textarea', ['loc', [null, [2, 8], [2, 23]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('name'), '', 'Rendered textarea has empty name');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-textarea', [], ['name', 'testname'], ['loc', [null, [2, 8], [2, 39]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').find('textarea').prop('name'), 'testname', 'Rendered textarea has name set');
    });

    // This test requires full browser support, Issue #719 opened.
    qunit.skip('selectionDirection is supported');

    // This tests will be implemented separately, Issue #803 opened.
    qunit.skip('"selectionStart" is supported');
    qunit.skip('"selectionEnd" is supported');

});
define('dummy/tests/integration/components/sl-textarea-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-textarea-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-textarea-test.js should pass jshint.'); 
  });

});
define('dummy/tests/integration/components/sl-tooltip-test', ['ember-qunit'], function (ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-tooltip', 'Integration | Component | sl tooltip', {
        integration: true
    });

    ember_qunit.test('Default rendered state', function (assert) {
        this.set('title', 'test title');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-tooltip', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 27], [2, 32]]]]], [], []]], ['loc', [null, [2, 8], [2, 34]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.ok(this.$('>:first-child').hasClass('sl-ember-components-tooltip'), 'Has class "sl-ember-components-tooltip"');
    });

    ember_qunit.test('"Title" capabilities are supported', function (assert) {
        this.set('title', 'test title');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-tooltip', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 27], [2, 32]]]]], [], []]], ['loc', [null, [2, 8], [2, 34]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').attr('data-original-title'), this.get('title'), 'Title prop supported');
    });

    ember_qunit.test('"Popover" capabilities are supported', function (assert) {
        this.set('popover', 'Popover content');
        this.set('title', 'test title');

        this.render(Ember.HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 3,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                },
                statements: [['inline', 'sl-tooltip', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [2, 27], [2, 32]]]]], [], []], 'popover', ['subexpr', '@mut', [['get', 'popover', ['loc', [null, [2, 41], [2, 48]]]]], [], []]], ['loc', [null, [2, 8], [2, 50]]]]],
                locals: [],
                templates: []
            };
        })()));

        assert.strictEqual(this.$('>:first-child').data('bs.popover').options.content, this.get('popover'), 'Popover capabilites are supported');
    });

});
define('dummy/tests/integration/components/sl-tooltip-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - integration/components');
  QUnit.test('integration/components/sl-tooltip-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'integration/components/sl-tooltip-test.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('router.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/application.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes');
  QUnit.test('routes/application.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'routes/application.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/demos/sl-calendar.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/demos');
  QUnit.test('routes/demos/sl-calendar.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'routes/demos/sl-calendar.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/demos/sl-chart.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/demos');
  QUnit.test('routes/demos/sl-chart.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'routes/demos/sl-chart.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/demos/sl-grid.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/demos');
  QUnit.test('routes/demos/sl-grid.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'routes/demos/sl-grid.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/demos/sl-menu.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/demos');
  QUnit.test('routes/demos/sl-menu.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'routes/demos/sl-menu.js should pass jshint.'); 
  });

});
define('dummy/tests/routes/demos/sl-select.jshint', function () {

  'use strict';

  QUnit.module('JSHint - routes/demos');
  QUnit.test('routes/demos/sl-select.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'routes/demos/sl-select.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  QUnit.module('JSHint - .');
  QUnit.test('test-helper.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-alert-test', ['ember-qunit', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sl-ember-components/components/sl-alert', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries', 'ember', 'sl-ember-components/utils/warn'], function (ember_qunit, ClassPrefix, TooltipEnabledMixin, sl_alert, sinon, globalLibraries, Ember, warn) {

    'use strict';

    var Theme = {
        DANGER: 'danger',
        INFO: 'info',
        SUCCESS: 'success',
        WARNING: 'warning'
    };

    ember_qunit.moduleForComponent('sl-alert', 'Unit | Component | sl alert', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject()), 'TooltipEnabled Mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('ariaRole'), 'alert', 'ariaRole: "alert"');

        assert.strictEqual(component.get('componentClass'), 'alert', 'componentClass is set to alert');

        assert.strictEqual(component.get('dismissable'), false, 'dismissable: false');

        assert.strictEqual(component.get('theme'), Theme.INFO, 'theme: "' + Theme.INFO + '"');

        assert.deepEqual(sl_alert.Theme, Theme, 'Theme enum values are correct');
    });

    ember_qunit.test('Bound "dismiss" action is triggered when dismiss action is triggered', function (assert) {
        var component = this.subject();
        var spy = sinon['default'].spy(component, 'sendAction');

        component.send('dismiss');

        assert.strictEqual(spy.args[0].join(), 'dismiss', 'Bound "dismiss" action is triggered when dismiss action is triggered');
    });

    ember_qunit.test('themeClassName() returns expected value', function (assert) {
        var testThemeValue = 'testTheme';
        var component = this.subject({
            theme: testThemeValue
        });

        assert.strictEqual(component.get('themeClassName'), 'alert-' + testThemeValue, 'themeClassName() returns expected value');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var themeClassNameDependentKeys = ['theme'];

        assert.deepEqual(component.themeClassName._dependentKeys, themeClassNameDependentKeys, 'Dependent keys are correct for themeClassName()');
    });

    ember_qunit.test('themeClassName() returns the correct class', function (assert) {
        var component = this.subject();

        Object.keys(Theme).forEach(function (key) {
            var theme = Theme[key];

            Ember['default'].run(function () {
                return component.set('theme', theme);
            });

            assert.strictEqual(component.get('themeClassName'), 'alert-' + theme, 'themeClassName() returns expected value');
        });

        var spy = sinon['default'].spy(warn, 'default');

        component.set('theme', 'invalid value');
        component.get('themeClassName');

        assert.ok(spy.calledOnce, 'warn() was called when invalid theme was set');

        warn['default'].restore();
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-alert-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-alert-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-alert-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-button-test', ['ember', 'ember-qunit', 'sinon', 'sl-ember-components/mixins/class-prefix', 'ember-stream/mixins/stream-enabled', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sl-ember-components/components/sl-button', 'sl-ember-components/utils/warn', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, sinon, ClassPrefix, StreamEnabledMixin, TooltipEnabledMixin, sl_button, warn, globalLibraries) {

    'use strict';

    var Size = {
        EXTRA_SMALL: 'extra-small',
        LARGE: 'large',
        MEDIUM: 'medium',
        SMALL: 'small'
    };

    var Theme = {
        DANGER: 'danger',
        DEFAULT: 'default',
        HOVER: 'hover',
        INFO: 'info',
        LINK: 'link',
        PRIMARY: 'primary',
        SUCCESS: 'success',
        WARNING: 'warning'
    };

    ember_qunit.moduleForComponent('sl-button', 'Unit | Component | sl button', {
        unit: true
    });

    var mockStreamService = {
        send: function send() {}
    };

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(StreamEnabledMixin['default'].detect(this.subject()), 'StreamEnabled Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject()), 'TooltipEnabled Mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'button', 'componentClass is set to button');

        assert.strictEqual(component.get('tagName'), 'button', 'Default tagName is button');

        assert.strictEqual(component.get('bubbles'), true, 'bubbles is true by default');

        assert.strictEqual(component.get('disabled'), false, 'disabled is false by default');

        assert.strictEqual(component.get('label'), null, 'label is null by default');

        assert.strictEqual(component.get('pending'), false, 'pending is false by default');

        assert.strictEqual(component.get('pendingLabel'), null, 'pendingLabel is null by default');

        assert.strictEqual(component.get('size'), 'medium', 'size is medium by default');

        assert.strictEqual(component.get('showModalWithStreamName'), null, 'showModalWithStreamName is null by default');

        assert.strictEqual(component.get('theme'), 'default', 'theme is "default" by default');

        assert.deepEqual(sl_button.Size, Size, 'Size enum values are correct');

        assert.deepEqual(sl_button.Theme, Theme, 'Theme enum values are correct');
    });

    ember_qunit.test('Button supports click event bubbling', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.click(), true, 'Button bubbles click events by default');

        component.set('bubbles', false);

        assert.strictEqual(component.click(), false, 'Button click event will not propagate when bubbles is false');
    });

    ember_qunit.test('Label changes for pending state', function (assert) {
        var pendingText = 'Pending';
        var staticText = 'Static';
        var component = this.subject({
            pendingLabel: pendingText,
            label: staticText
        });

        assert.strictEqual(component.get('currentLabel'), staticText, 'Static text is set initially');

        Ember['default'].run(function () {
            return component.set('pending', true);
        });

        assert.strictEqual(component.get('currentLabel'), pendingText, 'Pending text is set while pending');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var currentLabelDependentKeys = ['label', 'pending', 'pendingLabel'];

        var sizeClassDependentKeys = ['size'];

        var themeClassDependentKeys = ['theme'];

        assert.deepEqual(component.currentLabel._dependentKeys, currentLabelDependentKeys, 'Dependent keys are correct for currentLabel()');

        assert.deepEqual(component.sizeClass._dependentKeys, sizeClassDependentKeys, 'Dependent keys are correct for sizeClass()');

        assert.deepEqual(component.themeClass._dependentKeys, themeClassDependentKeys, 'Dependent keys are correct for themeClass()');
    });

    ember_qunit.test('themeClass() returns the correct class', function (assert) {
        var component = this.subject();

        Object.keys(Theme).forEach(function (key) {
            var theme = Theme[key];

            Ember['default'].run(function () {
                return component.set('theme', theme);
            });

            assert.strictEqual(component.get('themeClass'), 'btn-' + theme);
        });

        var spy = sinon['default'].spy(warn, 'default');

        component.set('theme', 'invalid value');
        component.get('themeClass');

        assert.ok(spy.calledOnce, 'warn() was called when invalid theme was set');

        warn['default'].restore();
    });

    ember_qunit.test('sizeClass() returns the correct class', function (assert) {
        // clone imported enum
        var sizes = Ember['default'].copy(sl_button.Size);
        var component = this.subject();

        // Set class values on cloned enum, any new values added to imported
        // enum will cause this test to fail if corresponding class is not set.
        // This will ensure that this test does not give false positives
        // for new enum values added.
        sizes.EXTRA_SMALL = { size: sizes.EXTRA_SMALL, 'class': 'btn-xs' };
        sizes.LARGE = { size: sizes.LARGE, 'class': 'btn-lg' };
        sizes.MEDIUM = { size: sizes.MEDIUM, 'class': null };
        sizes.SMALL = { size: sizes.SMALL, 'class': 'btn-sm' };

        Object.keys(sizes).forEach(function (key) {
            var size = sizes[key].size;
            var cls = sizes[key]['class'];

            Ember['default'].run(function () {
                return component.set('size', size);
            });

            assert.strictEqual(component.get('sizeClass'), cls, size + ' returned correct value of ' + cls);
        });

        var spy = sinon['default'].spy(warn, 'default');

        component.set('size', 'invalid value');
        component.get('sizeClass');

        assert.ok(spy.calledOnce, 'warn() was called when invalid size was set');

        warn['default'].restore();
    });

    ember_qunit.test('send() and sendAction() are called when component click() is invoked', function (assert) {
        var sendSpy = sinon['default'].spy(mockStreamService, 'send');

        var component = this.subject({
            streamService: mockStreamService,
            showModalWithStreamName: 'testStreamName',
            sendAction: sinon['default'].spy()
        });

        component.click();

        assert.ok(sendSpy.calledWith('testStreamName', 'show'), 'send() called with correct arguments');

        assert.ok(component.sendAction.calledOnce, 'sendAction was called');

        mockStreamService.send.restore();
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-button-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-button-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-button-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-calendar-day-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-calendar-day', 'Unit | Component | sl calendar day', {
        unit: true
    });

    ember_qunit.test('Default state of calendar-day is not active, new or old', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('active'), false, 'Default component is not active');

        assert.strictEqual(this.$().hasClass('active'), false, 'Default component does not have "active" class');

        assert.strictEqual(component.get('new'), false, 'Default component is not "new"');

        assert.strictEqual(this.$().hasClass('new'), false, 'Default component does not have "new" class');

        assert.strictEqual(component.get('old'), false, 'Default component is not "old"');

        assert.strictEqual(this.$().hasClass('old'), false, 'Default component does not have "old" class');
    });

    ember_qunit.test('Active state is applied correctly', function (assert) {
        var component = this.subject({ active: true });

        assert.ok(component.get('active'), 'Component is set to active state');

        assert.ok(this.$().hasClass('active'), 'Component element has class "active"');
    });

    ember_qunit.test('New state is applied correctly', function (assert) {
        var component = this.subject({ 'new': true });

        assert.ok(component.get('new'), 'Component is set to new state');

        assert.ok(this.$().hasClass('new'), 'Component element has class "new"');
    });

    ember_qunit.test('Old state is applied correctly', function (assert) {
        var component = this.subject({ old: true });

        assert.ok(component.get('old'), 'Component is set to old state');

        assert.ok(this.$().hasClass('old'), 'Component element has class "old"');
    });

    ember_qunit.test('Property "day" populates component content', function (assert) {
        this.subject({ day: 42 });

        assert.strictEqual(Ember['default'].$.trim(this.$().text()), '42', '"day" value is set to element content');
    });

    ember_qunit.test('Action bindings sends action with expected day content', function (assert) {
        assert.expect(1);

        var done = assert.async();

        var dayContent = { day: 42 };

        this.subject({
            action: 'test',
            content: dayContent,
            targetObject: {
                test: function test(content) {
                    assert.strictEqual(content, dayContent, 'Test action fired with expected value');

                    done();
                }
            }
        });

        this.$().trigger('click');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-calendar-day-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-calendar-day-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-calendar-day-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-calendar-month-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-calendar-month', 'Unit | Component | sl calendar month', {
        unit: true
    });

    ember_qunit.test('Default state is inactive', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('active'), false, 'Component is not active');

        assert.strictEqual(this.$().hasClass('active'), false, 'Component does not have "active" class');
    });

    ember_qunit.test('Active state is set correctly', function (assert) {
        var component = this.subject({ active: true });

        assert.ok(component.get('active'), 'Component is active');

        assert.ok(this.$().hasClass('active'), '"active" class is present');
    });

    ember_qunit.test('Action binding sends action with month', function (assert) {
        this.subject({
            action: 'test',
            month: 6,
            targetObject: {
                test: function test(month) {
                    assert.strictEqual(month, 6, 'Test action fired with expected month');
                }
            }
        });

        assert.expect(1);

        this.$().trigger('click');
    });

    ember_qunit.test('Short name property is invalid without month', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('shortName'), 'Invalid date', 'Invalid month results in invalid shortName');
    });

    ember_qunit.test('Short name property is defined with valid month', function (assert) {
        var component = this.subject({ month: 1 });

        assert.strictEqual(component.get('shortName'), 'Jan', 'Valid shortName with valid month');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var shortNameDependentKeys = ['month'];

        assert.deepEqual(component.shortName._dependentKeys, shortNameDependentKeys, 'Dependent keys are correct for shortName()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-calendar-month-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-calendar-month-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-calendar-month-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-calendar-test', ['ember', 'sl-ember-components/mixins/class-prefix', 'ember-qunit', 'sinon', 'qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ClassPrefix, ember_qunit, sinon, qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-calendar', 'Unit | Component | sl calendar', {
        needs: ['component:sl-calendar-day', 'component:sl-calendar-month', 'component:sl-calendar-year'],

        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject();

        assert.deepEqual(component.get('content'), [], 'content: []');

        var today = new Date();
        var month = today.getMonth() + 1;

        assert.strictEqual(component.get('componentClass'), 'calendar', '"componentClass" property defaults to calendar');

        assert.strictEqual(component.get('currentMonth'), month, 'currentMonth: ' + month);

        var year = today.getFullYear();

        assert.strictEqual(component.get('currentYear'), year, 'currentYear: ' + year);

        assert.strictEqual(component.get('dateValuePath'), 'date', 'dateValuePath: "date"');

        assert.strictEqual(component.get('locale'), 'en', 'locale: "en"');

        assert.strictEqual(component.get('locked'), false, 'locked: false');

        assert.strictEqual(component.get('viewMode'), 'days', 'viewMode: "days"');
    });

    ember_qunit.test('Lock mode prevents changing state', function (assert) {
        var component = this.subject({ locked: true });

        var initialDecadeStart = component.get('decadeStart');
        component.send('changeDecade', 1);
        assert.strictEqual(initialDecadeStart, component.get('decadeStart'), 'Value decadeStart is unchanged from actions.changeDecade');

        var initialMonth = component.get('currentMonth');
        component.send('changeMonth', 1);
        assert.strictEqual(initialMonth, component.get('currentMonth'), 'Value currentMonth is unchanged from actions.changeMonth');

        var initialYear = component.get('currentYear');
        component.send('changeYear', 1);
        assert.strictEqual(initialYear, component.get('currentYear'), 'Value currentYear is unchanged from actions.changeYear');

        component.send('setMonth', initialMonth + 1);
        assert.strictEqual(initialMonth, component.get('currentMonth'), 'Value currentMonth is unchanged from actions.setMonth');

        var initialViewMode = component.get('viewMode');
        component.send('setView', 'something');
        assert.strictEqual(initialViewMode, component.get('viewMode'), 'Value viewMode is unchanged from actions.setView');

        component.send('setYear', initialYear + 1);
        assert.strictEqual(initialYear, component.get('currentYear'), 'Value currentYear is unchanged from actions.setYear');
    });

    qunit.skip('locale - Setting causes default of en (English) to be updated', function () {});

    qunit.skip('currentMonthString - current month string formatted as full word (January, November, ...)', function () {});

    qunit.skip('contentDates - Verify dates array', function () {});

    qunit.skip('setYear - viewMode and currentYear set correctly', function () {});

    qunit.skip('setView - viewMode set correctly', function () {});

    qunit.skip('setMonth - currentMonth and viewMode set correctly', function () {});

    ember_qunit.test('changeDecade action works', function (assert) {
        var component = this.subject({ currentYear: 2015 });

        assert.strictEqual(component.get('decadeStart'), 2010, 'Initial decadeStart is expected value');

        assert.strictEqual(component.get('decadeEnd'), 2019, 'Initial decadeEnd is expected value');

        Ember['default'].run(function () {
            component.send('changeDecade', 1);
        });

        assert.strictEqual(component.get('decadeStart'), 2020, 'Altered decadeStart is expected value');

        assert.strictEqual(component.get('decadeEnd'), 2029, 'Altered decadeEnd is expected value');
    });

    ember_qunit.test('changeMonth action works', function (assert) {
        var component = this.subject({ currentMonth: 1 });

        assert.strictEqual(component.get('currentMonth'), 1, 'Initial currentMonth is expected value');

        Ember['default'].run(function () {
            component.send('changeMonth', 1);
        });

        assert.strictEqual(component.get('currentMonth'), 2, 'Altered currentMonth is expected value');
    });

    ember_qunit.test('changeYear action works', function (assert) {
        var component = this.subject({ currentYear: 2015 });

        assert.strictEqual(component.get('currentYear'), 2015, 'Initial currentYear is expected value');

        Ember['default'].run(function () {
            component.send('changeYear', 1);
        });

        assert.strictEqual(component.get('currentYear'), 2016, 'Altered currentYear is expected value');
    });

    ember_qunit.test('Decrementing month from January causes year to decrement', function (assert) {
        var component = this.subject({
            currentMonth: 1,
            currentYear: 2015
        });

        Ember['default'].run(function () {
            component.send('changeMonth', -1);
        });

        assert.strictEqual(component.get('currentYear'), 2014, 'currentYear is decremented');
    });

    ember_qunit.test('Incrementing month from December causes year to increment', function (assert) {
        var component = this.subject({
            currentMonth: 12,
            currentYear: 2015
        });

        Ember['default'].run(function () {
            component.send('changeMonth', 1);
        });

        assert.strictEqual(component.get('currentYear'), 2016, 'currentYear is incremented');
    });

    ember_qunit.test('daysInMonth - Number of days in month is set correctly', function (assert) {
        var daysInMonthStub = sinon['default'].stub().returns(31);

        var momentStub = sinon['default'].stub(window, 'moment').returns({ daysInMonth: daysInMonthStub });

        var component = this.subject({
            currentMonth: 12,
            currentYear: 2015
        });

        assert.strictEqual(component.get('daysInMonth'), 31, '"daysInMonth" is set correctly');

        assert.deepEqual(momentStub.args[0][0], [component.get('currentYear'), component.get('currentMonth') - 1], 'Moment called with currentYear and currentMonth');

        window.moment.restore();
    });

    ember_qunit.test('Decade range is correctly based on currentYear', function (assert) {
        var component = this.subject({ currentYear: 2023 });

        assert.strictEqual(component.get('decadeStart'), 2020, 'decadeStart is expected value');

        assert.strictEqual(component.get('decadeEnd'), 2029, 'decadeEnd is expected value');
    });

    ember_qunit.test('Months for year view are generated validly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('monthsInYearView').length, 12, 'Twelve months are created');
    });

    qunit.skip('monthsInYearView - active month set correctly', function () {
        /* Expand 'Months for year view are generated validly' test to also
            check that the active month is set correctly.
        */
    });

    ember_qunit.test('View mode is settable to "days"', function (assert) {
        var component = this.subject({ viewMode: 'days' });

        assert.ok(component.get('viewingDays'), 'viewingDays is true when viewMode = "days"');

        assert.notOk(component.get('viewingMonths'), 'viewingMonths is false when viewMode = "days"');

        assert.notOk(component.get('viewingYears'), 'viewingYears is false when viewMode = "days"');
    });

    ember_qunit.test('View mode is settable to "months"', function (assert) {
        var component = this.subject({ viewMode: 'months' });

        assert.ok(component.get('viewingMonths'), 'viewingMonths is true when viewMode = "months"');

        assert.notOk(component.get('viewingDays'), 'viewingDays is false when viewMode = "months"');

        assert.notOk(component.get('viewingYears'), 'viewingYears is false when viewMode = "months"');
    });

    ember_qunit.test('View mode is settable to "years"', function (assert) {
        var component = this.subject({ viewMode: 'years' });

        assert.ok(component.get('viewingYears'), 'viewingYears is true when viewMode = "years"');

        assert.notOk(component.get('viewingDays'), 'viewingDays is false when viewMode = "years"');

        assert.notOk(component.get('viewingMonths'), 'viewingMonths is false when viewMode = "years"');
    });

    ember_qunit.test('weeksInMonthView - set previousMonth when: currentMonth is anything other than 1', function (assert) {
        var daysInMonthStub = sinon['default'].stub().returns(31);

        var momentStub = sinon['default'].stub(window, 'moment').returns({ daysInMonth: daysInMonthStub });

        var weeksInMonthView = [[{
            'active': false,
            'content': null,
            'day': 30,
            'new': false,
            'old': true
        }, {
            'active': false,
            'content': null,
            'day': 31,
            'new': false,
            'old': true
        }, {
            'active': false,
            'content': null,
            'day': 1,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 2,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 3,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 4,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 5,
            'new': false,
            'old': false
        }], [{
            'active': false,
            'content': null,
            'day': 6,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 7,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 8,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 9,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 10,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 11,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 12,
            'new': false,
            'old': false
        }], [{
            'active': false,
            'content': null,
            'day': 13,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 14,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 15,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 16,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 17,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 18,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 19,
            'new': false,
            'old': false
        }], [{
            'active': false,
            'content': null,
            'day': 20,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 21,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 22,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 23,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 24,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 25,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 26,
            'new': false,
            'old': false
        }], [{
            'active': false,
            'content': null,
            'day': 27,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 28,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 29,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 30,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 31,
            'new': false,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 1,
            'new': true,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 2,
            'new': true,
            'old': false
        }], [{
            'active': false,
            'content': null,
            'day': 3,
            'new': true,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 4,
            'new': true,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 5,
            'new': true,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 6,
            'new': true,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 7,
            'new': true,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 8,
            'new': true,
            'old': false
        }, {
            'active': false,
            'content': null,
            'day': 9,
            'new': true,
            'old': false
        }]];

        var component = this.subject({
            currentMonth: 12,
            currentYear: 2015
        });

        assert.deepEqual(component.get('weeksInMonthView'), weeksInMonthView, '"weeksInMonthView" is set correctly');

        assert.deepEqual(momentStub.args[0][0], [component.get('currentYear'), component.get('currentMonth') - 1], 'Moment called with currentYear and currentMonth');

        window.moment.restore();
    });

    qunit.skip('weeksInMonthView - set previousMonth when: currentMonth equals 1', function () {});

    qunit.skip('weeksInMonthView - set nextMonth when: currentMonth is anything other than 12', function () {});

    qunit.skip('weeksInMonthView - when firstWeekdayOfCurrentMonth is 0 (Sunday)', function () {});

    qunit.skip('shortWeekDayNames - returns array of day names in short name format (Su, Mo, Tu...)', function () {});

    ember_qunit.test('Years for decade view are assembled correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('yearsInDecadeView').length, 12, 'Twelve years were generated for the decade view');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var contentDatesDependentKeys = ['content', 'dateValuePath'];

        var currentMonthStringDependentKeys = ['currentMonth', 'currentYear', 'locale'];

        var daysInMonthDependentKeys = ['currentMonth', 'currentYear'];

        var decadeEndDependentKeys = ['decadeStart'];

        var decadeStartDependentKeys = ['currentYear'];

        var monthsInYearViewDependentKeys = ['contentDates', 'currentYear'];

        var shortWeekDayNamesDependentKeys = ['locale'];

        var viewingDaysDependentKeys = ['viewMode'];

        var viewingMonthsDependentKeys = ['viewMode'];

        var viewingYearsDependentKeys = ['viewMode'];

        var weeksInMonthViewDependentKeys = ['contentDates', 'currentMonth', 'currentYear', 'daysInMonth'];

        var yearsInDecadeViewDependentKeys = ['contentDates', 'decadeEnd', 'decadeStart'];

        assert.deepEqual(component.contentDates._dependentKeys, contentDatesDependentKeys, 'Dependent keys are correct for contentDates()');

        assert.deepEqual(component.currentMonthString._dependentKeys, currentMonthStringDependentKeys, 'Dependent keys are correct for currentMonthString()');

        assert.deepEqual(component.daysInMonth._dependentKeys, daysInMonthDependentKeys, 'Dependent keys are correct for daysInMonth()');

        assert.deepEqual(component.decadeEnd._dependentKeys, decadeEndDependentKeys, 'Dependent keys are correct for decadeEnd()');

        assert.deepEqual(component.decadeStart._dependentKeys, decadeStartDependentKeys, 'Dependent keys are correct for decadeStart()');

        assert.deepEqual(component.monthsInYearView._dependentKeys, monthsInYearViewDependentKeys, 'Dependent keys are correct for monthsInYearView()');

        assert.deepEqual(component.shortWeekDayNames._dependentKeys, shortWeekDayNamesDependentKeys, 'Dependent keys are correct for shortWeekDayNames()');

        assert.deepEqual(component.viewingDays._dependentKeys, viewingDaysDependentKeys, 'Dependent keys are correct for viewingDays()');

        assert.deepEqual(component.viewingMonths._dependentKeys, viewingMonthsDependentKeys, 'Dependent keys are correct for viewingMonths()');

        assert.deepEqual(component.viewingYears._dependentKeys, viewingYearsDependentKeys, 'Dependent keys are correct for viewingYears()');

        assert.deepEqual(component.weeksInMonthView._dependentKeys, weeksInMonthViewDependentKeys, 'Dependent keys are correct for weeksInMonthView()');

        assert.deepEqual(component.yearsInDecadeView._dependentKeys, yearsInDecadeViewDependentKeys, 'Dependent keys are correct for yearsInDecadeView()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-calendar-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-calendar-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-calendar-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-calendar-year-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-calendar-year', 'Unit | Component | sl calendar year', {
        unit: true
    });

    ember_qunit.test('Default state is not active, new, or old', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('active'), false, 'Default component is not active');

        assert.strictEqual(component.get('new'), false, 'Default component is not in new state');

        assert.strictEqual(component.get('old'), false, 'Default component is not in old state');

        assert.strictEqual(this.$().hasClass('active'), false, 'Default rendered component does not have class "active"');

        assert.strictEqual(this.$().hasClass('new'), false, 'Default rendered component does not have class "new"');

        assert.strictEqual(this.$().hasClass('old'), false, 'Default rendered component does not have class "old"');
    });

    ember_qunit.test('Click event sends action with year value', function (assert) {
        assert.expect(1);

        var done = assert.async();

        var exampleYear = 2000;

        this.subject({
            action: 'test',

            targetObject: {
                test: function test(year) {
                    assert.strictEqual(year, exampleYear, 'Received year');

                    done();
                }
            },

            year: exampleYear
        });

        this.$().trigger('click');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-calendar-year-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-calendar-year-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-calendar-year-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-chart-test', ['ember', 'sl-ember-components/mixins/class-prefix', 'ember-qunit', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ClassPrefix, ember_qunit, sinon, globalLibraries) {

    'use strict';

    var testOptions = {
        chartOptions: {
            chart: {
                type: 'bar'
            },

            xAxis: {
                categories: ['Apples', 'Bananas', 'Oranges']
            },

            yAxis: {
                title: {
                    text: 'Fruit Eaten'
                }
            }
        }
    };

    var testSeries = [{
        name: 'Alice',
        data: [1, 0, 4]
    }];

    ember_qunit.moduleForComponent('sl-chart', 'Unit | Component | sl chart', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries
        });

        assert.ok(ClassPrefix['default'].detect(component), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries
        });

        assert.strictEqual(component.get('componentClass'), 'chart', 'componentClass is set to chart');

        assert.strictEqual(component.get('chart'), null, 'chart: null');

        assert.strictEqual(component.get('height'), 'auto', 'height: "auto"');

        assert.strictEqual(component.get('loading'), false, 'isLoading: false');

        assert.deepEqual(component.get('series'), testSeries, 'series: null');

        assert.strictEqual(component.get('width'), 'auto', 'width: "auto"');

        assert.strictEqual(component.highchartsOptions().title, null, 'title property in highchartsOptions is set to null in order to\n            suppress default behavior for our usage');
    });

    ember_qunit.test('updateData() is called after series property is modified', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries
        });

        this.render();

        var spy = sinon['default'].spy(component, 'updateData');

        component.set('series', []);

        assert.ok(spy.calledOnce, 'updateData() is called once after series modified');
    });

    ember_qunit.test('updateOptions() is called after options property is modified', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries
        });

        this.render();

        var spy = sinon['default'].spy(component, 'updateOptions');

        component.set('options', {});

        assert.ok(spy.calledOnce, 'updateOptions() is called once after options modified');
    });

    ember_qunit.test('"Options" property needs to be an object', function (assert) {
        var _this = this;

        var properties = Ember['default'].Object.create({
            series: testSeries
        });

        var callSubject = function callSubject() {
            return _this.subject(properties);
        };

        // null
        properties.set('options', null);

        assert.throws(callSubject, 'property was null');

        // Array
        properties.set('options', []);

        assert.throws(callSubject, 'property was an Array');

        // String
        properties.set('options', 'test string');

        assert.throws(callSubject, 'property was a String');

        // undefined
        properties.set('options', undefined);

        assert.throws(callSubject, 'property was undefined');

        // Boolean
        properties.set('options', false);

        assert.throws(callSubject, 'property was a Boolean');

        // Number
        properties.set('options', 132);

        assert.throws(callSubject, 'property was a Number');

        // Function
        properties.set('options', function () {});

        assert.throws(callSubject, 'property was a Function');

        // Object
        properties.set('options', {});

        assert.ok(callSubject(), 'property was an Object');
    });

    ember_qunit.test('"Series" property needs to be an array', function (assert) {
        var _this2 = this;

        var properties = Ember['default'].Object.create({
            options: testOptions
        });

        var callSubject = function callSubject() {
            return _this2.subject(properties);
        };

        // null
        properties.set('series', null);

        assert.throws(callSubject, 'property was null');

        // String
        properties.set('series', 'test string');

        assert.throws(callSubject, 'property was a String');

        // undefined
        properties.set('series', undefined);

        assert.throws(callSubject, 'property was undefined');

        // Boolean
        properties.set('series', false);

        assert.throws(callSubject, 'property was a Boolean');

        // Number
        properties.set('series', 132);

        assert.throws(callSubject, 'property was a Number');

        // Function
        properties.set('series', function () {});

        assert.throws(callSubject, 'property was a Function');

        // Object
        properties.set('series', {});

        assert.throws(callSubject, 'property was an Object');

        // Array
        properties.set('series', []);

        assert.ok(callSubject(), 'property was an Array');
    });

    ember_qunit.test('setupChart initializes chart upon render', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries,
            updateOptions: function updateOptions() {
                return;
            }
        });

        var setupSpy = sinon['default'].spy(component, 'setupChart');
        var setHeightSpy = sinon['default'].spy(component, 'setHeight');
        var setWidthSpy = sinon['default'].spy(component, 'setWidth');
        var updateOptionsSpy = sinon['default'].spy(component, 'updateOptions');

        this.render();

        assert.ok(setupSpy.calledOnce, 'setupChart was called once upon render');

        assert.ok(setHeightSpy.calledOnce, 'setHeight was called once upon render');

        assert.ok(setWidthSpy.calledOnce, 'setWidth was called once upon render');

        assert.ok(updateOptionsSpy.calledOnce, 'updateOptions was called once upon render');
    });

    ember_qunit.test('updateOptions initializes chart correctly', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries
        });
        var originalUpdateOptions = component.updateOptions;

        component.updateOptions = function () {};

        this.render();

        component.updateOptions = originalUpdateOptions;

        assert.strictEqual(component.get('chart'), null, 'Chart is null before options are updated');

        var spyHighcharts = sinon['default'].spy(Ember['default'].$.fn, 'highcharts');
        var optionsMatcher = function optionsMatcher(options) {
            var optionsFromMethod = component.highchartsOptions();

            // Highcharts modifies options.chart and adds a options.chart.renderTo method
            // Since this is not a property that we pass in, copy over that property before doing a deepEqual
            optionsFromMethod.chart.renderTo = options.chart.renderTo;

            return sinon['default'].deepEqual(optionsFromMethod, options);
        };

        component.updateOptions();

        assert.ok(spyHighcharts.calledOnce, 'highcharts was called once upon render');

        assert.ok(spyHighcharts.calledWithMatch(optionsMatcher), 'highcharts was called once with options');

        assert.strictEqual(Ember['default'].typeOf(component.get('chart')), 'object', 'chart is set after options are updated');
    });

    ember_qunit.test('highchartsOptions returns expected options', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries
        });
        var chartStyle = {
            fontFamily: 'Helvetica, Arial, sans-serif',
            fontSize: '13px'
        };
        var options = Ember['default'].$.extend(true, {
            chart: {
                animation: false,
                backgroundColor: 'rgba(255, 255, 255, 0)',
                style: chartStyle
            },
            title: null,
            colors: ['#298fce', '#94302e', '#00a14b', '#f29c1e', '#fadb00', '#34495d'],
            credits: {
                enabled: false
            },
            legend: {
                itemStyle: chartStyle
            },
            plotOptions: {
                bar: {
                    borderColor: 'transparent'
                },
                series: {
                    animation: false
                }
            },
            series: testSeries,
            tooltip: {
                animation: false,
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                borderWidth: 0,
                shadow: false,
                style: {
                    color: '#fff'
                }
            },
            xAxis: {
                labels: {
                    style: chartStyle
                }
            },
            yAxis: {
                labels: {
                    style: chartStyle
                }
            }
        }, component.get('options') || {});

        assert.deepEqual(options, component.highchartsOptions(), 'highchartsOptions returns expected options');
    });

    ember_qunit.test('Observer keys are correct', function (assert) {
        var component = this.subject({
            options: testOptions,
            series: testSeries
        });

        var updateDataKeys = ['series'];

        assert.deepEqual(component.updateData.__ember_observes__, updateDataKeys, 'Observer keys are correct for updateData()');

        var updateOptionsKeys = ['options'];

        assert.deepEqual(component.updateOptions.__ember_observes__, updateOptionsKeys, 'Observer keys are correct for updateOptions()');

        var setHeightKeys = ['height'];

        assert.deepEqual(component.setHeight.__ember_observes__, setHeightKeys, 'Observer keys are correct for setHeight()');

        var setWidthKeys = ['width'];

        assert.deepEqual(component.setWidth.__ember_observes__, setWidthKeys, 'Observer keys are correct for setWidth()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject({
            options: testOptions,
            series: testSeries
        });

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-chart-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-chart-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-chart-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-checkbox-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-input-based', 'sl-ember-components/mixins/sl-tooltip-enabled', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, ClassPrefix, InputBasedMixin, TooltipEnabledMixin, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-checkbox', 'Unit | Component | sl checkbox', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(InputBasedMixin['default'].detect(this.subject()), 'InputBased Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject()), 'TooltipEnabled Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'checkbox', 'componentClass is set to checkbox');

        assert.strictEqual(component.get('checked'), false, '"checked" property is false by default');

        assert.strictEqual(component.get('label'), null, '"label" property is null by default');

        assert.strictEqual(component.get('tagName'), 'div', 'tagName is "div" in default state');
    });

    ember_qunit.test('checkboxType property sets relevant class', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('checkboxType'), 'checkbox', 'checkboxType defaults to "checkbox"');

        Ember['default'].run(function () {
            component.set('inline', true);
        });

        assert.strictEqual(component.get('checkboxType'), 'checkbox-inline', 'checkboxType is inline');
    });

    ember_qunit.test('Inline property changes tagName', function (assert) {
        var component = this.subject({
            inline: true
        });

        assert.strictEqual(component.get('tagName'), 'label', 'tagName is "label" when component is inline');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var checkboxTypeDependentKeys = ['inline'];

        assert.deepEqual(component.checkboxType._dependentKeys, checkboxTypeDependentKeys, 'Dependent keys are correct for checkboxType()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-checkbox-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-checkbox-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-checkbox-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-date-picker-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-component-input-id', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, ClassPrefix, ComponentInputId, TooltipEnabled, sinon, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-date-picker', 'Unit | Component | sl date picker', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(ComponentInputId['default'].detect(this.subject()), 'sl-component-input-id mixin is present');

        assert.ok(TooltipEnabled['default'].detect(this.subject()), 'sl-tooltip-enabled mixin is present');
    });

    ember_qunit.test('Default properties are set correctly', function (assert) {
        var component = this.subject();

        assert.equal(component.get('componentClass'), 'date-picker', 'componentClass is set to date-picker');

        assert.equal(component.get('autoclose'), true, '"autoclose" default vaue is correct');

        assert.equal(component.get('calendarWeeks'), false, '"calendarWeeks" default value is correct');

        assert.equal(component.get('clearBtn'), false, '"clearBtn" default value is correct');

        assert.strictEqual(component.get('componentClass'), 'date-picker', 'componentClass is set to date-picker');

        assert.deepEqual(component.get('daysOfWeekDisabled'), [], '"daysOfWeekDisabled" default value is correct');

        assert.equal(component.get('disabled'), false, '"disabled" default value is correct');

        assert.equal(component.get('endDate'), null, '"endDate" default value is correct');

        assert.equal(component.get('forceParse'), true, '"forceParse" default value is correct');

        assert.equal(component.get('format'), 'mm/dd/yyyy', '"forceParse" default value is correct');

        assert.equal(component.get('helpText'), null, '"helpText" default value is correct');

        assert.equal(component.get('inputs'), null, '"inputs" default value is correct');

        assert.equal(component.get('keyboardNavigation'), true, '"keyboardNavigation" default value is correct');

        assert.equal(component.get('label'), null, '"label" default value is correct');

        assert.equal(component.get('language'), 'en', '"language" default value is correct');

        assert.equal(component.get('minViewMode'), 'days', '"minViewMode" default value is correct');

        assert.equal(component.get('multidate'), false, '"multidate" default value is correct');

        assert.equal(component.get('orientation'), 'auto', '"orientation" default value is correct');

        assert.equal(component.get('placeholder'), null, '"placeholder" default value is correct');

        assert.equal(component.get('startDate'), null, '"startDate" default value is correct');

        assert.equal(component.get('startView'), 'month', '"startView" default value is correct');

        assert.equal(component.get('todayBtn'), false, '"todayBtn" default value is correct');

        assert.equal(component.get('todayHighlight'), false, '"todayHighlight" default value is correct');

        assert.equal(component.get('value'), null, '"value" default value is correct');

        assert.equal(component.get('weekStart'), 0, '"weekStart" default value is correct');
    });

    ember_qunit.test('Event handlers are registered and unregistered', function (assert) {
        var spyOn = sinon['default'].spy(Ember['default'].$.fn, 'on');
        var spyOff = sinon['default'].spy(Ember['default'].$.fn, 'off');
        var component = this.subject();
        var input = this.$('input.date-picker');

        var matchElement = sinon['default'].match(function (value) {
            return value.get(0) === input.get(0);
        });

        this.render();

        spyOn.reset();

        component.trigger('didInsertElement');

        assert.ok(spyOn.calledWith(component.namespaceEvent('changeDate')), 'on() was called with namespaced changeDate event');

        assert.ok(spyOn.calledOn(matchElement), 'on() was called on expected input');

        spyOff.reset();

        component.trigger('willClearRender');

        assert.ok(spyOff.calledWith(component.namespaceEvent('changeDate')), 'off() was called with namespaced changeDate event');

        assert.ok(spyOff.calledOn(matchElement), 'off() was called on expected input');

        Ember['default'].$.fn.on.restore();
        Ember['default'].$.fn.off.restore();
    });

    ember_qunit.test('Changing "autoclose" to non default value works as expected', function (assert) {
        var autoclose = false;

        var component = this.subject({
            autoclose: autoclose
        });

        var options = component.get('options');

        assert.strictEqual(options.autoclose, autoclose);
    });

    ember_qunit.test('Changing "calenderWeeks" to a non default value works as expected', function (assert) {
        var calendarWeeks = true;

        var component = this.subject({
            calendarWeeks: calendarWeeks
        });

        var options = component.get('options');

        assert.strictEqual(options.calendarWeeks, calendarWeeks);
    });

    ember_qunit.test('Changing "clearBtn" to a non default value works as expected', function (assert) {
        var clearBtn = true;

        var component = this.subject({
            clearBtn: clearBtn
        });

        var options = component.get('options');

        assert.strictEqual(options.clearBtn, clearBtn);
    });

    ember_qunit.test('Changing "daysOfWeekDisabled" to a non default value works as expected', function (assert) {
        var daysOfWeek = [1, 2, 3];

        var component = this.subject({
            daysOfWeekDisabled: daysOfWeek
        });

        var options = component.get('options');

        assert.strictEqual(options.daysOfWeekDisabled, daysOfWeek);
    });

    ember_qunit.test('Changing "endDate" to a non default value works as expected', function (assert) {
        var endDate = window.moment('2015-06-08');

        var component = this.subject({
            endDate: endDate
        });

        var options = component.get('options');

        assert.strictEqual(options.endDate, endDate);
    });

    ember_qunit.test('Changing "forceParse" to a non default value works as expected', function (assert) {
        var forceParse = false;

        var component = this.subject({
            forceParse: forceParse
        });

        var options = component.get('options');

        assert.strictEqual(options.forceParse, forceParse);
    });

    ember_qunit.test('Changing "format" to a non default value works as expected', function (assert) {
        var format = 'dd/mm/yyyy';

        var component = this.subject({
            format: format
        });

        var options = component.get('options');

        assert.strictEqual(options.format, format);
    });

    ember_qunit.test('Changing "inputs" to a non default value works as expected', function (assert) {
        var inputs = [Ember['default'].$('<input />'), Ember['default'].$('<input />')];

        var component = this.subject({
            inputs: inputs
        });

        var options = component.get('options');

        assert.deepEqual(options.inputs, inputs);
    });

    ember_qunit.test('Changing "keyboardNavigation" to a non default value works as expected', function (assert) {
        var keyboardNavigation = false;

        var component = this.subject({
            keyboardNavigation: keyboardNavigation
        });

        var options = component.get('options');

        assert.strictEqual(options.keyboardNavigation, keyboardNavigation);
    });

    ember_qunit.test('Changing "language" to a non default value works as expected', function (assert) {
        var language = 'eu';

        var component = this.subject({
            language: language
        });

        var options = component.get('options');

        assert.strictEqual(options.language, language);
    });

    ember_qunit.test('Changing "minViewMode" to a non default value works as expected', function (assert) {
        var minViewMode = 'months';

        var component = this.subject({
            minViewMode: minViewMode
        });

        var options = component.get('options');

        assert.strictEqual(options.minViewMode, minViewMode);
    });

    ember_qunit.test('Changing "multidate" to a non default value works as expected', function (assert) {
        var multidate = false;

        var component = this.subject({
            multidate: multidate
        });

        var options = component.get('options');

        assert.strictEqual(options.multidate, multidate);
    });

    ember_qunit.test('Changing "orientation" to a non default value works as expected', function (assert) {
        var orientation = 'top';

        var component = this.subject({
            orientation: orientation
        });

        var options = component.get('options');

        assert.strictEqual(options.orientation, orientation);
    });

    ember_qunit.test('Changing "startDate" to a non default value works as expected', function (assert) {
        var startDate = window.moment('2015-01-01');

        var component = this.subject({
            startDate: startDate
        });

        var options = component.get('options');

        assert.strictEqual(options.startDate, startDate);
    });

    ember_qunit.test('Changing "startView" to a non default value works as expected', function (assert) {
        var startView = 'year';

        var component = this.subject({
            startView: startView
        });

        var options = component.get('options');

        assert.strictEqual(options.startView, startView);
    });

    ember_qunit.test('Changing "todayBtn" to a non default value works as expected', function (assert) {
        var todayBtn = true;

        var component = this.subject({
            todayBtn: todayBtn
        });

        var options = component.get('options');

        assert.strictEqual(options.todayBtn, todayBtn);
    });

    ember_qunit.test('Changing "todayHighlight" to a non default value works as expected', function (assert) {
        var todayHighlight = true;

        var component = this.subject({
            todayHighlight: todayHighlight
        });

        var options = component.get('options');

        assert.strictEqual(options.todayHighlight, todayHighlight);
    });

    ember_qunit.test('Changing "weekStart" to a non default value works as expected', function (assert) {
        var weekStart = 1;

        var component = this.subject({
            weekStart: weekStart
        });

        var options = component.get('options');

        assert.strictEqual(options.weekStart, weekStart);
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        var jqueryAliasSpy = sinon['default'].spy(window, '$');
        var jquerySpy = sinon['default'].spy(window, 'jQuery');
        var emberJquery = sinon['default'].spy(Ember['default'], '$');
        var startDate = window.moment('2016-01-01').toDate();

        var component = this.subject();

        this.render();

        Ember['default'].run(function () {
            component.set('startDate', startDate);
            component.trigger('willClearRender');
        });

        var called = jqueryAliasSpy.called || jquerySpy.called || emberJquery.called;

        assert.notOk(called);

        window.$.restore();
        window.jQuery.restore();
        Ember['default'].$.restore();
    });

    ember_qunit.test('Observer keys are correct', function (assert) {
        var component = this.subject();

        var updateDateRangeKeys = ['endDate', 'startDate'];

        assert.deepEqual(component.updateDateRange.__ember_observes__, updateDateRangeKeys, 'Observer keys are correct for updateDateRange()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-date-picker-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-date-picker-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-date-picker-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-date-range-picker-test', ['ember', 'ember-qunit', 'qunit', 'sinon', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-component-input-id', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, qunit, sinon, ClassPrefix, ComponentInputId, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-date-range-picker', 'Unit | Component | sl date range picker', {
        needs: ['component:sl-date-picker'],

        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(ComponentInputId['default'].detect(this.subject()), 'sl-component-input-id mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'date-range-picker', 'componentClass is set to date-range-picker');

        assert.strictEqual(component.get('endDateValue'), null, 'endDateValue: null');

        assert.strictEqual(component.get('format'), 'mm/dd/yyyy', 'format: "mm/dd/yyyy"');

        assert.strictEqual(component.get('maxDate'), null, 'maxDate: null');

        assert.strictEqual(component.get('minDate'), null, 'minDate: null');

        assert.strictEqual(component.get('startDateValue'), null, 'startDateValue: null');
    });

    ember_qunit.test('Change focus to end date input upon start date change', function (assert) {
        var component = this.subject();
        this.render();

        var daterangeEndDate = component.get('endDateInput');
        var spy = sinon['default'].spy(daterangeEndDate, 'trigger');

        component.get('startDateInput').trigger('changeDate');

        assert.ok(spy.calledWithExactly('focus'), 'End date input was given focus on start date change');

        $('.datepicker').remove();
        daterangeEndDate.trigger.restore();
    });

    ember_qunit.test('Earliest end date is the based on min date and start date', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('earliestEndDate'), null);

        Ember['default'].run(function () {
            component.set('minDate', '01/01/2001');
        });

        assert.equal(component.get('earliestEndDate'), '01/01/2001');

        Ember['default'].run(function () {
            component.set('startDateValue', '01/01/2015');
        });

        assert.equal(component.get('earliestEndDate'), '01/01/2015');
    });

    ember_qunit.test('Latest start date is the based on max date and end date', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('latestStartDate'), null);

        Ember['default'].run(function () {
            component.set('maxDate', '01/01/2029');
        });

        assert.equal(component.get('latestStartDate'), '01/01/2029');

        Ember['default'].run(function () {
            component.set('endDateValue', '01/01/2015');
        });

        assert.equal(component.get('latestStartDate'), '01/01/2015');
    });

    ember_qunit.test('Events from start date input are removed upon willClearRender', function (assert) {
        var spyOn = sinon['default'].spy(Ember['default'].$.fn, 'on');
        var spyOff = sinon['default'].spy(Ember['default'].$.fn, 'off');

        var component = this.subject();

        this.render();

        spyOn.reset();

        component.trigger('didInsertElement');

        assert.ok(spyOn.calledWith(component.namespaceEvent('changeDate')), 'changeDate bootstrap date picker event bound');

        assert.ok(spyOn.alwaysCalledOn(component.get('startDateInput')), 'changeDate bind was called on startDateInput');

        spyOff.reset();

        component.trigger('willClearRender');

        assert.ok(spyOff.calledWith(component.namespaceEvent('changeDate')), 'changeDate bootstrap date picker event unbound');

        assert.ok(spyOff.alwaysCalledOn(component.get('startDateInput')), 'changeDate unbind was called on startDateInput');

        Ember['default'].$.fn.on.restore();
        Ember['default'].$.fn.off.restore();
    });

    ember_qunit.test('label, startDatePlaceholder, and endDatePlaceholder are undefined by default', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('label'), undefined, 'label is undefined by default');

        assert.strictEqual(component.get('startDatePlaceholder'), undefined, 'startDatePlaceholder is undefined by default');

        assert.strictEqual(component.get('endDatePlaceholder'), undefined, 'endDatePlaceholder is undefined by default');
    });

    ember_qunit.test('label is accepted as a parameter', function (assert) {
        var labelText = 'lorem ipsum';
        var component = this.subject({ label: labelText });

        assert.equal(this.$('label').html(), labelText, 'label element was created with label parameter text');

        assert.equal(this.$('label').prop('for'), component.get('inputId'), 'label element has the correct for property');

        assert.equal(this.$('label').prop('for'), this.$('.sl-daterange-start-date input').prop('id'), 'label is used for start date input');
    });

    ember_qunit.test('Default format gets passed to child date pickers', function (assert) {
        var component = this.subject();

        assert.equal(this.$('.sl-daterange-start-date input.date-picker').data().datepicker.o.format, component.get('format'), 'Default format gets passed to start date picker');

        assert.equal(this.$('.sl-daterange-end-date input.date-picker').data().datepicker.o.format, component.get('format'), 'Default format gets passed to end date picker');
    });

    ember_qunit.test('Format parameter gets passed to child date pickers', function (assert) {
        var format = 'yyyy/mm/dd';

        this.subject({ format: format });

        assert.equal(this.$('.sl-daterange-start-date input.date-picker').data().datepicker.o.format, format, 'Format parameter gets passed to start date picker');

        assert.equal(this.$('.sl-daterange-end-date input.date-picker').data().datepicker.o.format, format, 'Format parameter gets passed to end date picker');
    });

    // @todo This needs to be updated when upgrading to 1.13 to spy on the child
    // sl-date-pickers rather than directly accessing bootstrap-datepicker values
    ember_qunit.test('Date pickers have unbound start and end dates by default', function (assert) {
        this.subject();

        assert.equal(this.$('.sl-daterange-start-date input.date-picker').data().datepicker.o.startDate, -Infinity, 'Start date picker start date is unboundt');

        assert.equal(this.$('.sl-daterange-start-date input.date-picker').data().datepicker.o.endDate, Infinity, 'Start date picker end date is unbound');

        assert.equal(this.$('.sl-daterange-end-date input.date-picker').data().datepicker.o.startDate, -Infinity, 'End date picker start date is unbound');

        assert.equal(this.$('.sl-daterange-end-date input.date-picker').data().datepicker.o.endDate, Infinity, 'End date picker end date is unbound');
    });

    qunit.skip('Date pickers respects minDate', function () {
        // waiting for 1.13 for a way to mock and spy on child components
    });

    qunit.skip('Date pickers respects maxDate', function () {
        // waiting for 1.13 for a way to mock and spy on child components
    });

    qunit.skip('End date picker respects startDateValue over minDate due to earliestEndDate', function () {
        // waiting for 1.13 for a way to mock and spy on child components
    });

    qunit.skip('Start date picker respects endDateValue over maxDate due to latestStartDate', function () {
        // waiting for 1.13 for a way to mock and spy on child components
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-date-range-picker-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-date-range-picker-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-date-range-picker-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-date-time-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sl-ember-components/mixins/class-prefix'], function (Ember, ember_qunit, globalLibraries, TooltipEnabledMixin, ClassPrefix) {

    'use strict';

    ember_qunit.moduleForComponent('sl-date-time', 'Unit | Component | sl date time', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject({ timezone: 'America/Chicago' })), 'ClassPrefix Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject({ timezone: 'America/Chicago' })), 'TooltipEnabled Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject({ timezone: 'America/Chicago' });

        assert.strictEqual(component.get('componentClass'), 'date-time', '"componentClass" property defaults to date-time');
    });

    ember_qunit.test('Attribute "datetime" is properly set', function (assert) {
        this.subject({
            timezone: 'America/Chicago',
            value: new Date(2015, 0, 1)
        });

        assert.equal(this.$().attr('datetime'), '2015-01-01 00:00 CST', '"datetime" attribute is expected value');
    });

    ember_qunit.test('Format "date" results in correctly formatted value', function (assert) {
        var component = this.subject({
            format: 'date',
            timezone: 'America/Chicago',
            value: new Date(2015, 0, 1)
        });

        var formattedValue = '2015-01-01';

        assert.equal(component.get('formattedValue'), formattedValue, '"date" formatted date is expected value');

        assert.equal(Ember['default'].$.trim(this.$().text()), formattedValue, 'Rendered component text is expected formatted value');
    });

    ember_qunit.test('Format "relative" results in correctly formatted value', function (assert) {
        var component = this.subject({
            format: 'relative',
            timezone: 'America/Chicago',
            value: window.moment().subtract(1, 'year')
        });

        var formattedValue = 'a year ago';

        assert.equal(component.get('formattedValue'), formattedValue, '"relative" formatted date is expected value');

        assert.equal(Ember['default'].$.trim(this.$().text()), formattedValue, 'Rendered component text is expected formatted value');
    });

    ember_qunit.test('Format "datetime" results in correctly formatted value', function (assert) {
        var component = this.subject({
            format: 'datetime',
            timezone: 'America/Chicago',
            value: new Date(2015, 0, 1)
        });

        var formattedValue = 'Thursday, January 1st 2015, 12:00 AM CST';

        assert.equal(component.get('formattedValue'), formattedValue, '"datetime" formatted date is expected value');

        assert.equal(Ember['default'].$.trim(this.$().text()), formattedValue, 'Rendered component text is expected formatted value');
    });

    ember_qunit.test('Computed momentValue is set and updated correctly', function (assert) {
        var component = this.subject({
            timezone: 'America/Chicago',
            value: new Date(2015, 0, 1)
        });

        assert.equal(component.get('momentValue').calendar(), '01/01/2015', 'Initial momentValue is expected value');

        Ember['default'].run(function () {
            component.set('value', new Date(2015, 1, 15));
        });
        assert.equal(component.get('momentValue').calendar(), '02/15/2015', 'Updated momentValue is expected value');
    });

    ember_qunit.test('Computed timezoneString is set and updated correctly', function (assert) {
        var component = this.subject({
            timezone: 'America/Chicago',
            value: new Date(2015, 0, 1)
        });

        assert.equal(component.get('timezoneString'), 'CST', 'Initial timezoneString is expected value');

        Ember['default'].run(function () {
            component.set('timezone', 'America/Los_Angeles');
        });

        assert.equal(component.get('timezoneString'), 'PST', 'Updated timezoneString is expected value');
    });

    ember_qunit.test('"title" property is an alias to "datetime" value', function (assert) {
        var component = this.subject({ timezone: 'America/Chicago' });

        assert.equal(component.get('title'), component.get('datetime'), '"title" property is aliased to "datetime" property');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject({ timezone: 'America/Chicago' });

        var datetimeDependentKeys = ['timezoneString', 'value'];

        var formattedValueDependentKeys = ['format', 'momentValue'];

        var momentValueDependentKeys = ['value'];

        var timezoneStringDependentKeys = ['timezone', 'momentValue'];

        assert.deepEqual(component.datetime._dependentKeys, datetimeDependentKeys, 'Dependent keys are correct for datetime()');

        assert.deepEqual(component.formattedValue._dependentKeys, formattedValueDependentKeys, 'Dependent keys are correct for formattedValue()');

        assert.deepEqual(component.momentValue._dependentKeys, momentValueDependentKeys, 'Dependent keys are correct for momentValue()');

        assert.deepEqual(component.timezoneString._dependentKeys, timezoneStringDependentKeys, 'Dependent keys are correct for timezoneString()');
    });

    ember_qunit.test('init() - "timezone" property needs to be a string', function (assert) {
        var _this = this;

        var properties = Ember['default'].Object.create();

        var callSubject = function callSubject() {
            return _this.subject(properties);
        };

        // Empty Property

        assert.throws(callSubject, 'Property was empty');

        // Null Property

        properties.set('timezone', null);

        assert.throws(callSubject, 'Property was null');

        // Number Property

        properties.set('timezone', 3);

        assert.throws(callSubject, 'Property was a number');

        // Boolean Property

        properties.set('timezone', true);

        assert.throws(callSubject, 'Property was a boolean');

        // Array Property

        properties.set('timezone', []);

        assert.throws(callSubject, 'Property was an array');

        // Function Property

        properties.set('timezone', function () {});

        assert.throws(callSubject, 'Property was a function');

        // Object Property

        properties.set('timezone', {});

        assert.throws(callSubject, 'Property was an object');

        // Undefined Property

        properties.set('timezone', undefined);

        assert.throws(callSubject, 'Property was undefined');

        // String Property

        properties.set('timezone', 'America/Chicago');

        assert.ok(callSubject(), 'Property was a string');
    });

    ember_qunit.test('init() - "timezone" property needs to be valid', function (assert) {
        var _this2 = this;

        var properties = Ember['default'].Object.create();

        var callSubject = function callSubject() {
            return _this2.subject(properties);
        };

        // non-valid timezone property
        properties.set('timezone', 'HammerTime/MiddleEarth');

        assert.throws(callSubject, 'timezone property is not valid');

        // valid timezone property
        properties.set('timezone', 'America/Chicago');

        assert.ok(callSubject(), 'timezone property is valid');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject({
            timezone: 'America/Chicago'
        });

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-date-time-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-date-time-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-date-time-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-drop-button-test', ['ember', 'ember-qunit', 'sl-ember-components/components/sl-drop-button', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/components/sl-button', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, sl_drop_button, ClassPrefix, sl_button, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-drop-button', 'Unit | Component | sl drop button', {
        needs: ['component:sl-button'],

        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default properties are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'drop-button', 'componentClass is set to drop-button');

        assert.strictEqual(component.get('title'), null, '"title" default value is correct');

        assert.strictEqual(component.get('dataTrigger'), null, '"dataTrigger" default value is correct');

        assert.strictEqual(component.get('align'), sl_drop_button.Align.LEFT, '"align" default value is correct');

        assert.strictEqual(component.get('content'), null, '"content" default value is correct');

        assert.strictEqual(component.get('iconClass'), 'sl-icon-dropdown', '"iconClass" default value is correct');

        assert.strictEqual(component.get('label'), null, '"label" default value is correct');

        assert.strictEqual(component.get('size'), sl_button.Size.MEDIUM, '"size" default value is correct');

        assert.strictEqual(component.get('theme'), sl_button.Theme.DEFAULT, '"theme" default value is correct');

        var Align = {
            LEFT: 'left',
            RIGHT: 'right'
        };

        assert.deepEqual(sl_drop_button.Align, Align, '"align" enum values are correct');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var rightAlignedDependentKeys = ['align'];

        assert.deepEqual(component.rightAligned._dependentKeys, rightAlignedDependentKeys, 'Dependent keys are correct for rightAligned()');
    });

    ember_qunit.test('rightAligned() returns expected boolean based on right and left alignment', function (assert) {
        var component = this.subject({ align: 'right' });

        assert.strictEqual(component.get('rightAligned'), true, 'rightAligned() returns expected boolean');

        Ember['default'].run(function () {
            component.set('align', 'left');
        });

        assert.strictEqual(component.get('rightAligned'), false, 'rightAligned() returns expected boolean');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-drop-button-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-drop-button-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-drop-button-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-drop-option-test', ['sl-ember-components/mixins/class-prefix', 'sinon', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ClassPrefix, sinon, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-drop-option', 'Unit | Component | sl drop option', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'drop-option', 'componentClass is set to drop-option');

        assert.strictEqual(component.get('data'), null, '"Data" property defaults to null');

        assert.strictEqual(component.get('actionContext'), null, '"Actioncontext" property defaults to null');

        assert.strictEqual(component.get('tagName'), 'li', '"tagName" property defaults to li');
    });

    ember_qunit.test('Click triggers bound action with correct arguments', function (assert) {
        var testDataObject = {
            testProp: 'testValue'
        };

        var testActionSpy = sinon['default'].spy();

        this.subject({
            action: 'testAction',
            actionContext: 'testActionContext',
            data: testDataObject,
            label: 'Test',
            targetObject: {
                testAction: testActionSpy
            }
        });

        this.$('a').trigger('click');

        // spy.calledWith() does a deepEquals on objects
        assert.ok(testActionSpy.calledWith(testDataObject, 'testActionContext'), 'Test action fired correctly with the correct arguments');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-drop-option-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-drop-option-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-drop-option-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-grid-cell-test', ['ember', 'ember-qunit', 'sl-ember-components/components/sl-grid-cell', 'sl-ember-components/utils/warn', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, sl_grid_cell, warn, sinon, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-grid-cell', 'Unit | Component | sl grid cell', {
        unit: true
    });

    var ColumnAlign = Object.freeze({
        LEFT: 'left',
        RIGHT: 'right'
    });

    var defaultColumn = Ember['default'].Object.extend();

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('tagName'), 'td', 'tagName is td');

        assert.deepEqual(component.get('column'), {}, 'column is an empty object');

        assert.deepEqual(component.get('record'), {}, 'record is an empty object');

        assert.deepEqual(sl_grid_cell.ColumnAlign, ColumnAlign, 'Column align enum has correct values');
    });

    ember_qunit.test('alignmentClass() returns correct alignment value', function (assert) {
        var column = defaultColumn.create();
        var component = this.subject({
            column: column
        });

        assert.strictEqual(component.get('alignmentClass'), null, 'alignment value is null when "align" property is not set on row');

        column.set('align', sl_grid_cell.ColumnAlign.RIGHT);

        assert.strictEqual(component.get('alignmentClass'), 'text-right', 'text-right is returned when alignment is set to right');

        column.set('align', sl_grid_cell.ColumnAlign.LEFT);

        assert.strictEqual(component.get('alignmentClass'), null, 'null is returned when alignment is set to left');

        var spy = sinon['default'].spy(warn, 'default');
        column.set('align', 'invalidValue');

        assert.strictEqual(component.get('alignmentClass'), null, 'null was returned when invalid alignment value provided');

        assert.ok(spy.called, 'warn was called when invalid value provided');

        warn['default'].restore();
    });

    ember_qunit.test('contentValue() returns the correct value', function (assert) {
        var column = defaultColumn.create({
            valuePath: 'name'
        });

        var record = Ember['default'].Object.extend().create({
            name: 'test'
        });

        var component = this.subject({
            column: column,
            record: record
        });

        assert.strictEqual(component.get('contentValue'), record.name, 'contentValue() returned correct result for row');

        record = Ember['default'].Object.extend().create({
            model: {
                name: 'anotherTest'
            }
        });

        Ember['default'].run(function () {
            component.set('record', record);
        });

        assert.strictEqual(component.get('contentValue'), record.get('model.name'), 'contentValue() returns model data when row model is set');
    });

    ember_qunit.test('Click event action is supported', function (assert) {
        var defaultColumn = { valuePath: 'value' };
        var defaultRecord = { value: 'Test' };

        this.subject({
            column: defaultColumn,
            onClick: 'test',
            record: defaultRecord,

            targetObject: {
                test: function test(record) {
                    assert.equal(record, defaultRecord, 'Click event sent expected value');
                }
            }
        });

        this.$().trigger('click');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var alignmentClassDependentKeys = ['column.align'];

        var contentValueDependentKeys = ['column', 'record'];

        assert.deepEqual(component.alignmentClass._dependentKeys, alignmentClassDependentKeys, 'Dependent keys are correct for alignmentClass()');

        assert.deepEqual(component.contentValue._dependentKeys, contentValueDependentKeys, 'Dependent keys are correct for contentValue()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var column = { valuePath: 'value' };
        var record = { value: 'Test' };

        var component = this.subject({
            column: column,
            record: record
        });

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-grid-cell-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-grid-cell-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-grid-cell-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-grid-column-header-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-grid-column-header', 'Unit | Component | sl grid column header', {
        unit: true
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('tagName'), 'th', 'Tag name is th');

        assert.strictEqual(component.get('column'), null, 'column is null');
    });

    ember_qunit.test('Sorted class is present when column is in sorted state', function (assert) {
        var sortable = true;
        var sorted = null;

        var component = this.subject({ sortable: sortable, sorted: sorted });

        assert.equal(this.$().hasClass('column-ascending'), false, 'Class "column-ascending" is not present with non-sorted column');

        assert.equal(this.$().hasClass('column-descending'), false, 'Class "column-descending" is not present with non-sorted column');

        Ember['default'].run(function () {
            return component.set('sorted', 'asc');
        });

        assert.equal(this.$().hasClass('column-descending'), false, 'Class "column-descending" is not present with ascending-sorted column');

        assert.equal(this.$().hasClass('column-ascending'), true, 'Class "column-ascending" is present with ascending-sorted column');

        Ember['default'].run(function () {
            return component.set('sorted', 'desc');
        });

        assert.equal(this.$().hasClass('column-ascending'), false, 'Class "column-ascending" is not present with descending-sorted column');

        assert.equal(this.$().hasClass('column-descending'), true, 'Class "column-descending" is present with descending-sorted column');
    });

    ember_qunit.test('Click event returns column with sortable column', function (assert) {
        var column = {};
        var sortable = false;

        var targetObject = {
            test: function test() {
                assert.ok(false, 'Bound click action was fired without a valid sortable column');
            }
        };

        var component = this.subject({
            column: column,
            sortable: sortable,
            onClick: 'test',
            targetObject: targetObject
        });

        assert.expect(1);

        var done = assert.async();

        // This click should not cause the initial assertion to run
        this.$().trigger('click');

        Ember['default'].run(function () {
            component.set('sortable', true);

            targetObject.test = function (passedColumn) {
                assert.equal(passedColumn, column, 'onClick passed expected column definition');

                done();
            };
        });

        this.$().trigger('click');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var sortedClassDependentKeys = ['sortable', 'sorted'];

        assert.deepEqual(component.sortedClass._dependentKeys, sortedClassDependentKeys);
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-grid-column-header-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-grid-column-header-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-grid-column-header-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-grid-row-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-grid-row', 'Unit | Component | sl grid row', {
        unit: true
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('tagName'), 'tr', 'tagName is tr');

        assert.strictEqual(component.get('record'), null, 'record is null');
    });

    ember_qunit.test('Click event triggers rowClick action with row record', function (assert) {
        var record = { testValue: true };

        this.subject({
            record: record,
            onClick: 'test',

            targetObject: {
                test: function test(passedRow) {
                    assert.equal(passedRow.record, record, 'Row record passed from onClick is expected value');
                }
            }
        });

        this.$().trigger('click');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-grid-row-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-grid-row-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-grid-row-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-grid-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/class-prefix', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, ClassPrefix, sinon, globalLibraries) {

    'use strict';

    var columns = Ember['default'].A([{ title: 'Name', valuePath: 'name' }, { title: 'ID', valuePath: 'id' }]);

    var content = Ember['default'].A([{ id: 4, name: 'Alice' }, { id: 8, name: 'Bob' }, { id: 15, name: 'Charlie' }]);

    ember_qunit.moduleForComponent('sl-grid', 'Unit | Component | sl grid', {
        needs: ['component:sl-button', 'component:sl-drop-button', 'component:sl-drop-option', 'component:sl-grid-cell', 'component:sl-grid-column-header', 'component:sl-grid-row', 'component:sl-pagination'],

        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('actionsButtonLabel'), 'Actions', 'actionsButtonLabel is set to "Actions"');

        assert.strictEqual(component.get('activeRow'), null, 'activeRow is set to null');

        assert.deepEqual(component.get('columns'), [], 'columns is set to an empty array');

        assert.strictEqual(component.get('componentClass'), 'grid', 'componentClass is set to grid');

        assert.strictEqual(component.get('content'), null, 'content is set to null');

        assert.strictEqual(component.get('continuous'), false, 'continuous is set to false');

        assert.strictEqual(component.get('currentPage'), 1, 'currentPage is set to 1');

        assert.strictEqual(component.get('detailComponent'), null, 'detailComponent is set to null');

        assert.strictEqual(component.get('detailFooterComponent'), null, 'detailFooterComponent is set to null');

        assert.strictEqual(component.get('detailHeaderComponent'), null, 'detailHeaderComponent is set to null');

        assert.strictEqual(component.get('detailPaneOpen'), false, 'detailPaneOpen is false');

        assert.strictEqual(component.get('filterButtonLabel'), 'Filter', 'filterButtonLabel is "Filter"');

        assert.strictEqual(component.get('filterPaneOpen'), false, 'filterPaneOpen is false');

        assert.strictEqual(component.get('filterComponent'), null, 'filterComponent is null');

        assert.strictEqual(component.get('footerPath'), null, 'footerPath is null');

        assert.strictEqual(component.get('height'), '', 'height is ""');

        assert.strictEqual(component.get('loading'), false, 'loading is false');

        assert.strictEqual(component.get('nextPageScrollPoint'), 0, 'nextPageScrollPoint is 0');

        assert.strictEqual(component.get('pageSize'), 25, 'pageSize is 25');

        assert.strictEqual(component.get('rowActions'), null, 'rowActions is null');

        assert.strictEqual(component.get('rowClick'), null, 'rowClick is null');
    });

    ember_qunit.test('changePage() triggers requestData action with correct arguments', function (assert) {
        var spy = sinon['default'].spy();
        var pageSize = 10;

        var component = this.subject({
            pageSize: pageSize,
            requestData: 'requestData',
            targetObject: {
                requestData: spy
            }
        });

        this.render();

        Ember['default'].run(function () {
            component.send('changePage', 1);
        });

        assert.ok(spy.calledWith(pageSize, 0));

        assert.strictEqual(component.get('loading'), true, 'Loading is set to true');

        spy.reset();

        Ember['default'].run(function () {
            component.send('changePage', 1);
        });

        assert.ok(spy.notCalled, 'Action is not fired if component is in loading state');

        spy.reset();

        Ember['default'].run(function () {
            component.set('loading', false);
            component.send('changePage', 2);
        });

        assert.ok(spy.calledWith(pageSize, 10));
    });

    ember_qunit.test('openDetailPane() updates component state', function (assert) {
        var row = { title: 'Name', valuePath: 'name', active: false };
        var activeRecord = { title: 'Id', valuePath: 'id', active: true };

        var component = this.subject({
            activeRow: activeRecord
        });

        Ember['default'].run(function () {
            component.send('selectRow', row);
        });

        assert.strictEqual(activeRecord.active, false, 'Active flag on previously active record was set to false');

        assert.strictEqual(row.active, true, 'Active flag on row was set to true');

        assert.deepEqual(component.get('activeRow'), row, 'Active record was set to passed in row');
    });

    ember_qunit.test('rowClick() fires rowClick action', function (assert) {
        var rowClickSpy = sinon['default'].spy();
        var row = { title: 'Name', valuePath: 'name', active: false };

        var component = this.subject({
            rowClick: 'rowClick',
            targetObject: {
                rowClick: rowClickSpy
            }
        });

        component.send('rowClick', row);

        assert.ok(rowClickSpy.calledWith(row), 'rowClick action was fired with correct row data');
    });

    ember_qunit.test('deselectRow() updates component state', function (assert) {
        var activeRecord = { 'active': true };

        var component = this.subject({
            activeRow: activeRecord
        });

        Ember['default'].run(function () {
            component.send('deselectRow');
        });

        assert.strictEqual(activeRecord.active, false, 'Active record key "active" was set to false');

        assert.strictEqual(component.get('activeRow'), null, 'Active record was set to null');

        assert.strictEqual(component.get('detailPaneOpen'), false, 'detailPaneOpen was set to false');
    });

    ember_qunit.test('showPagination() returns correct value', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('showPagination'), false, 'showPagination is false when continuous is false and totalPages is 0');

        component.set('totalPages', 2);

        assert.strictEqual(component.get('showPagination'), true, 'showPagination is true when continuous is false and totalPages is more than one');

        component.set('continuous', true);

        assert.strictEqual(component.get('showPagination'), false, 'showPagination is false when continuous is true and totalPages is more than one');

        component.set('totalPages', 0);

        assert.strictEqual(component.get('showPagination'), false, 'showPagination is false when continuous is true and totalPages is 0');
    });

    ember_qunit.test('totalPages() returns the correct value', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('totalPages'), null, 'totalPages is null when continuous is false, totalCount is 0 and pageSize is 0');

        var totalCount = 99;
        var pageSize = 10;

        Ember['default'].run(function () {
            component.set('totalCount', totalCount);
            component.set('pageSize', pageSize);
        });

        assert.strictEqual(10, component.get('totalPages'), 'Total pages is computed as 10');
    });

    ember_qunit.test('handleNewContent() unsets loading state when content data changes', function (assert) {
        var content = Ember['default'].A();

        var component = this.subject({
            columns: columns,
            content: content,
            loading: true
        });

        this.render();

        assert.ok(component.get('loading'), 'Initial loading is true');

        Ember['default'].run(function () {
            content.pushObject({
                id: 1,
                name: 'Danielle'
            });
        });

        assert.equal(component.get('loading'), false, 'Component is not in loading state after content update');
    });

    ember_qunit.test('handleNewContent() unbinds scroll event when there is no more data to request', function (assert) {
        var content = Ember['default'].A();

        var component = this.subject({
            columns: columns,
            content: content,
            hasMoreData: false
        });

        this.render();

        var spy = sinon['default'].spy(Ember['default'].$.fn, 'off');

        Ember['default'].run(function () {
            content.pushObject({
                id: 1,
                name: 'Danielle'
            });
        });

        assert.ok(spy.calledWith(component.namespaceEvent('scroll')), 'off was called with scroll');

        Ember['default'].$.fn.off.restore();
    });

    ember_qunit.test('setupCalculatedHeight() - updateHeight() is called on window resize', function (assert) {
        var spy = sinon['default'].spy();

        this.subject({
            columns: columns,
            content: content,
            updateHeight: spy
        });

        this.render();

        spy.reset();

        Ember['default'].$(window).trigger('resize');

        assert.ok(spy.calledOnce, 'updateHeight was called on resize of window');
    });

    ember_qunit.test('setupContinuousPaging() enables continuous paging', function (assert) {
        var spy = sinon['default'].spy();

        var component = this.subject({
            columns: columns,
            content: content,
            continuous: true,
            hasMoreData: true,
            enableContinuousPaging: spy
        });

        this.render();

        spy.reset();

        component.setupContinuousPaging();

        assert.ok(spy.calledOnce, 'enableContinuousPaging was called');

        spy.reset();

        Ember['default'].run(function () {
            component.set('hasMoreData', false);
            component.setupContinuousPaging();
        });

        assert.notOk(spy.called, 'enableContinuousPaging was not called when hasMoreData is false');

        spy.reset();

        Ember['default'].run(function () {
            component.set('continuous', false);
            component.set('hasMoreData', true);
            component.setupContinuousPaging();
        });

        assert.notOk(spy.called, 'enableContinuousPaging was not called when continuous is false');
    });

    ember_qunit.test('updateHeight() sets grid table height when not empty', function (assert) {
        var height = '200px';

        this.subject({
            columns: columns,
            content: content,
            height: height
        });

        this.render();

        assert.ok(this.$('> div > table').parent().height() < 200, 'detail content height is something less than what was given for total');

        assert.strictEqual(parseInt(this.$('> div > table').parent().css('height')), this.$('> div > table').parent().height(), 'detail content height was set to something specific');
    });

    ember_qunit.test('enableContinuousPaging() binds scroll event', function (assert) {
        var handleListContentSpy = sinon['default'].spy();

        var component = this.subject({
            columns: columns,
            content: content,
            setupContinuousPaging: function setupContinuousPaging() {},
            handleListContentScroll: handleListContentSpy
        });

        this.render();

        component.enableContinuousPaging();

        this.$('> div > table').parent().trigger('scroll');

        assert.ok(handleListContentSpy.called, 'handleListContentScroll was called when scroll event was triggered');
    });

    ember_qunit.test('handleListContentScroll() requests data as expected', function (assert) {
        var spy = sinon['default'].spy();

        var component = this.subject({
            columns: columns,
            content: content,
            loading: false,
            continuous: true,
            requestMoreData: spy
        });

        this.render();

        var evt = {
            target: this.$('.list-pane .content')
        };

        Ember['default'].run(function () {
            component.handleListContentScroll(evt);
        });

        assert.ok(spy.calledOnce, 'requestData action was fired');
    });

    ember_qunit.test('hasMoreData() returns correct value', function (assert) {
        var content = Ember['default'].A();
        var component = this.subject({
            columns: columns,
            content: content,
            totalCount: 0
        });

        assert.strictEqual(component.get('hasMoreData'), false, 'hasMoreData is false when there is no content and totalCount is 0');

        content.push({
            id: 4,
            name: 'Alice'
        });

        component.set('totalCount', content.length);

        assert.strictEqual(component.get('hasMoreData'), false, 'hasMoreData is false when content length matches totalCount');

        component.set('totalCount', content.length + 1);

        assert.strictEqual(component.get('hasMoreData'), true, 'hasMoreData is true when content length is less then totalCount');
    });

    ember_qunit.test('requestMoreData() sets correct component state and fires requestData action', function (assert) {
        var spy = sinon['default'].spy();
        var component = this.subject({
            columns: columns,
            content: content,
            hasMoreData: false,
            loading: false,
            requestData: spy,
            targetObject: {
                requestData: 'requestData'
            }
        });

        this.render();

        component.requestMoreData();

        assert.notOk(spy.called, 'requestData was not fired when hasMoreData is false');

        assert.strictEqual(component.get('loading'), false, 'component is not in loading state');

        Ember['default'].run(function () {
            component.set('hasMoreData', true);
            component.requestMoreData();
        });

        assert.ok(spy.calledOnce, 'requestData action was fired when hasMoreData is true');

        assert.strictEqual(component.get('loading'), true, 'component is in loading state');
    });

    ember_qunit.test('sortColumn() fires sortColumn action', function (assert) {
        var columns = Ember['default'].A([{ title: 'Name', valuePath: 'name' }, { title: 'ID', valuePath: 'id' }]);

        var sortColumnSpy = sinon['default'].spy();

        var component = this.subject({
            columns: columns,
            content: content,
            sortColumn: 'sortColumn',
            targetObject: {
                sortColumn: sortColumnSpy
            }
        });

        Ember['default'].run(function () {
            component.send('sortColumn', columns[0]);
        });

        assert.ok(sortColumnSpy.calledOnce, 'sortColumn action fired');
    });

    ember_qunit.test('toggleFilterPane() toggles filter pane and updates height of container', function (assert) {
        var updateHeightSpy = sinon['default'].spy();
        var component = this.subject({
            updateHeight: updateHeightSpy
        });

        var filterPaneOpen = component.get('filterPaneOpen');

        Ember['default'].run(function () {
            component.send('toggleFilterPane');
        });

        assert.strictEqual(component.get('filterPaneOpen'), !filterPaneOpen, 'filterPaneOpen property was toggled');

        assert.ok(updateHeightSpy.calledOnce, 'updateHeight was called');
    });

    ember_qunit.test('pagination data is handled correctly', function (assert) {
        var component = this.subject({
            columns: columns,
            content: content,
            pageSize: 1,
            totalCount: content.length
        });

        assert.equal(component.get('showPagination'), true, 'Pagination control is shown');

        assert.equal(component.get('currentPage'), 1, 'Initial currentPage is 1');

        this.$('.pagination li:last-child a').trigger('click');

        assert.equal(component.get('currentPage'), 2, 'Current page incremented correctly');

        Ember['default'].run(function () {
            component.set('loading', false);
        });

        this.$('.pagination li:last-child a').trigger('click');

        assert.equal(component.get('hasMoreData'), false, 'Current page is the last page');

        Ember['default'].run(function () {
            component.set('loading', false);
        });

        this.$('.pagination li:first-child a').trigger('click');

        assert.equal(component.get('currentPage'), 2, 'Current page decremented correctly');
    });

    ember_qunit.test('Window resize triggers updateHeight() with "auto" width', function (assert) {
        var spy = sinon['default'].spy();
        this.subject({
            columns: columns,
            content: content,
            height: 'auto',
            updateHeight: spy
        });

        this.render();

        spy.reset();

        Ember['default'].$(window).trigger('resize');

        assert.ok(spy.calledOnce, 'updateHeight() is called after window resize');
    });

    ember_qunit.test('dropButtonSelect action sends an action to the targetObject', function (assert) {
        var testActionSpy = sinon['default'].spy();
        var rowData = { foo: 'bar' };

        var component = this.subject({
            columns: columns,
            content: content,
            testAction: 'testAction',
            targetObject: {
                testAction: testActionSpy
            }
        });

        component.send('dropButtonSelect', rowData, 'testAction');

        assert.ok(testActionSpy.calledWith(rowData), 'testAction was sent with the correct argument');
    });

    ember_qunit.test('Event handlers are registered and unregistered', function (assert) {
        var spyOn = sinon['default'].spy(Ember['default'].$.fn, 'on');
        var spyOff = sinon['default'].spy(Ember['default'].$.fn, 'off');

        var component = this.subject({
            continuous: false,
            hasMoreData: false
        });

        this.render();

        spyOn.reset();

        component.trigger('didInsertElement');

        assert.ok(spyOn.calledWith(component.namespaceEvent('resize')), 'resize event bound');

        spyOn.reset();

        component.enableContinuousPaging();

        assert.ok(spyOn.calledWith(component.namespaceEvent('scroll')), 'scroll event bound');

        spyOff.reset();

        component.trigger('willClearRender');

        assert.ok(spyOff.calledWith(component.namespaceEvent('resize')), 'resize event unbound');

        assert.ok(spyOff.calledWith(component.namespaceEvent('scroll')), 'scroll event unbound');

        Ember['default'].$.fn.on.restore();
        Ember['default'].$.fn.off.restore();
    });

    ember_qunit.test('Observer keys are correct', function (assert) {
        var component = this.subject();

        var handleNewContentKeys = ['content.[]'];

        var displayFooterKeys = ['footerPath', 'showPagination'];

        assert.deepEqual(component.handleNewContent.__ember_observes__, handleNewContentKeys, 'Observer keys are correct for handleNewContent()');

        assert.deepEqual(component.displayFooter.__ember_observes__, displayFooterKeys, 'Observer keys are correct for displayFooter()');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var showPaginationDependentKeys = ['continuous', 'totalPages'];

        var totalPagesDependentKeys = ['continuous', 'pageSize', 'totalCount'];

        var hasMoreDataDependentKeys = ['content.length', 'totalCount'];

        assert.deepEqual(component.showPagination._dependentKeys, showPaginationDependentKeys);

        assert.deepEqual(component.totalPages._dependentKeys, totalPagesDependentKeys);

        assert.deepEqual(component.hasMoreData._dependentKeys, hasMoreDataDependentKeys);
    });

    ember_qunit.test('There are no references to $ or jQuery, and only some references to Ember.$', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].jqueryAliasSpy.called, '"$" was not referenced in code');

        assert.notOk(globalLibraries['default'].jquerySpy.called, '"jQuery" was not referenced in code');

        assert.ok(globalLibraries['default'].emberJquerySpy.calledThrice, 'Ember.$ was called thrice');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-grid-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-grid-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-grid-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-input-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-component-input-id', 'sl-ember-components/mixins/sl-input-based', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sinon', 'qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, ClassPrefix, ComponentInputId, InputBasedMixin, TooltipEnabledMixin, sinon, qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-input', 'Unit | Component | sl input', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(InputBasedMixin['default'].detect(this.subject()), 'InputBased Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject()), 'TooltipEnabled Mixin is present');

        assert.ok(ComponentInputId['default'].detect(this.subject()), 'ComponentInputId Mixin is present');

        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'input', 'componentClass is set to input');

        assert.strictEqual(component.get('clickToEdit'), false, 'clickToEdit property false by default');

        assert.strictEqual(component.get('type'), 'text', 'type property is text by default');

        assert.strictEqual(component.get('isTypeaheadSetup'), false, 'isTypeaheadSetup property false by default');

        assert.strictEqual(component.get('suggestionNamePath'), 'name', 'suggestionNamePath property is "name" by default');

        assert.strictEqual(component.get('value'), null, 'value property is null by default');
    });

    ember_qunit.test('getInput() returns correct element', function (assert) {
        var component = this.subject();

        assert.ok(this.$('input').get(0) === component.getInput().get(0));
    });

    ember_qunit.test('Event handlers are registered and unregistered', function (assert) {
        var spyOn = sinon['default'].spy(Ember['default'].$.fn, 'on');
        var spyOff = sinon['default'].spy(Ember['default'].$.fn, 'off');
        var component = this.subject({
            blur: function blur() {}
        });

        var matchElement = sinon['default'].match(function (value) {
            return value.get(0) === component.$('input').get(0);
        });

        this.render();

        spyOn.reset();

        component.trigger('didInsertElement');

        assert.ok(spyOn.calledWith(component.namespaceEvent('blur')), 'on() was called with namespaced blur event');

        assert.ok(spyOn.alwaysCalledOn(matchElement), 'on() was called on expected input');

        Ember['default'].run(function () {
            return component.trigger('willClearRender');
        });

        assert.ok(spyOff.calledWith(component.namespaceEvent('blur')), 'off() was called with namespaced blur event');

        assert.ok(spyOff.alwaysCalledOn(matchElement), 'off() was called on expected input');

        Ember['default'].$.fn.on.restore();
        Ember['default'].$.fn.off.restore();
    });

    ember_qunit.test('Blur action is triggered when input loses focus', function (assert) {
        assert.expect(1);

        var done = assert.async();

        this.subject({
            blur: 'blur',
            targetObject: {
                blur: function blur() {
                    assert.ok('blur was triggered');

                    done();
                }
            }
        });

        this.$('input').trigger('blur');
    });

    ember_qunit.test('Popover is initialized with the correct options', function (assert) {
        var popoverText = 'Popover text';

        this.subject({
            popover: popoverText
        });

        this.render();

        var data = this.$().data();
        var popoverData = data['bs.popover'];

        assert.strictEqual(popoverData.enabled, true, 'Popover is enabled');

        assert.strictEqual(popoverData.options.trigger, 'focus', 'Popover trigger is "focus"');

        assert.strictEqual(popoverData.options.content, popoverText, 'Popover text is set correctly');
    });

    ember_qunit.test('isTypeaheadSetup is true when suggestions are provided', function (assert) {
        var colors = ['Black', 'Yellow'];

        var component = this.subject({
            suggestions: colors
        });

        this.render();

        assert.strictEqual(component.get('isTypeaheadSetup'), true);
    });

    ember_qunit.test('Value is set correctly', function (assert) {
        var value = 'test value';

        var component = this.subject({
            value: value
        });

        assert.strictEqual(component.get('value'), value, '"value" prop is set successfully');
    });

    ember_qunit.test('setupTypeahead() "selectItem" sets value successfully', function (assert) {
        var _this = this;

        var colors = ['Black'];

        var component = this.subject({
            suggestions: colors
        });

        Ember['default'].run(function () {
            _this.$('.typeahead.tt-input').typeahead('val', 'b').blur();
            _this.$('.tt-suggestion.tt-selectable').click();
        });

        assert.strictEqual(component.get('value'), 'Black', '"selectItem" sets value successfully when item selected');
    });

    ember_qunit.test('setupTypeahead() "selectItem" sets value successfully with "suggestionNamePath" set', function (assert) {
        var _this2 = this;

        var colors = [{ id: 'Black' }];

        var component = this.subject({
            suggestions: colors,
            suggestionNamePath: 'id'
        });

        Ember['default'].run(function () {
            _this2.$('.typeahead.tt-input').typeahead('val', 'b').blur();
            _this2.$('.tt-suggestion.tt-selectable').click();
        });

        assert.strictEqual(component.get('value'), 'Black', '"selectItem" sets value successfully when item selected with suggestionNamePath set');
    });

    ember_qunit.test('Observer keys are correct', function (assert) {
        var component = this.subject();

        var setupTypeaheadKeys = ['suggestions'];

        assert.deepEqual(component.setupTypeaheadObserver.__ember_observes__, setupTypeaheadKeys, 'Observer keys are correct for setupTypeahead()');
    });

    qunit.skip('setupTypeahead() - typeahead "displayKey" initialization is correct', function () {});

    qunit.skip('setupTypeahead() - typeahead "source" initialization is correct', function () {});

    qunit.skip('setupTypeahead() - "typeahead:autocomplete" action sets value successfully', function () {});

    qunit.skip('setupTypeahead() - "typeahead:select" action sets value successfully', function () {});

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-input-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-input-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-input-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-menu-item-show-all-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-menu-item-show-all', 'Unit | Component | sl menu item show all', {
        unit: true
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-menu-item-show-all-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-menu-item-show-all-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-menu-item-show-all-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-menu-item-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-menu-item', 'Unit | Component | sl menu item', {
        unit: true
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('tagName'), 'li', 'Default tagName is "li"');

        assert.strictEqual(component.get('active'), false, '"active" is "false"');

        assert.strictEqual(component.get('item'), null, '"item" is "null"');
    });

    ember_qunit.test('Active state applies class', function (assert) {
        var component = this.subject();

        assert.equal(component.get('active'), false, 'Component is not active by default');

        assert.equal(this.$().hasClass('active'), false, 'Rendered element does not have class "active" by default');

        Ember['default'].run(function () {
            component.set('active', true);
        });

        assert.ok(this.$().hasClass('active'), 'Rendered element has class "active" when component is active');
    });

    ember_qunit.test('Class "contains-dropdown" is present when bound item has items array', function (assert) {
        var component = this.subject();

        assert.ok(false === this.$().hasClass('contains-dropdown'), 'Rendered element does not have class "contains-dropdown" by default');

        Ember['default'].run(function () {
            component.set('item', { items: [{ label: '' }] });
        });

        assert.ok(this.$().hasClass('contains-dropdown'), 'Rendered element has class "contains-dropdown"');
    });

    ember_qunit.test('Class "active" is present when bound item is selected', function (assert) {
        var component = this.subject();

        assert.ok(false === this.$().hasClass('active'), 'Rendered element does not have class "active" by default');

        Ember['default'].run(function () {
            component.set('item', { selected: true });
        });

        assert.ok(this.$().hasClass('active'), 'Rendered element has class "active"');
    });

    ember_qunit.test('Bound item.action is triggered when link is clicked', function (assert) {
        this.subject({
            action: 'test',

            item: {
                action: 'test',
                data: { okay: true },
                label: 'Test'
            },

            targetObject: {
                test: function test(actionName, data) {
                    assert.ok('test' === actionName && true === data.okay, 'Bound item.action triggered with expected data');
                }
            }
        });

        this.$('a').trigger('click');
    });

    ember_qunit.test('`subItems` computed property is a wrapped `item.items` array', function (assert) {
        var component = this.subject({
            item: {
                items: [{ okay: true }]
            }
        });

        assert.ok(component.get('subItems').objectAt(0).okay, 'Parsed `subItems` correctly');
    });

    ember_qunit.test('`subItems` computed property is null when `item.items` does not exist', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('subItems'), null, '"subItems" is null');
    });

    ember_qunit.test('`hasSubItems` represents the presence of `item.items`', function (assert) {
        var component = this.subject();

        assert.ok(false === component.get('hasSubItems'), '`hasSubItems` is false with no `item.items`');

        Ember['default'].run(function () {
            component.set('item', { items: [] });
        });

        assert.ok(false === component.get('hasSubItems'), '`hasSubItems` is false with empty `item.items`');

        Ember['default'].run(function () {
            component.set('item', { items: [{ okay: true }] });
        });

        assert.ok(true === component.get('hasSubItems'), '`hasSubItems` is true when `item.items` is present and not empty');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var hasSubItemsDependentKeys = ['item'];

        assert.deepEqual(component.hasSubItems._dependentKeys, hasSubItemsDependentKeys, 'Dependent keys are correct for hasSubItems()');

        var subItemsDependentKeys = ['item'];

        assert.deepEqual(component.subItems._dependentKeys, subItemsDependentKeys, 'Dependent keys are correct for subItems()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-menu-item-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-menu-item-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-menu-item-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-menu-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/class-prefix', 'ember-stream/mixins/stream-enabled', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, ClassPrefix, StreamEnabledMixin, sinon, globalLibraries) {

    'use strict';

    var mockStream = {
        actions: {},

        on: function on(actionName, handler) {
            this.actions[actionName] = handler;
        },

        subject: {
            dispose: function dispose() {
                mockStream.actions = {};
            },

            onCompleted: function onCompleted() {}
        }
    };

    var testItems = Ember['default'].A([{
        action: 'firstTest',
        data: 'first',
        label: 'First',
        items: [{
            label: 'First sub-item',
            items: [{ label: 'First sub-item sub-item' }]
        }, {
            label: 'Second sub-item'
        }]
    }, {
        action: 'secondTest',
        data: 'second',
        label: 'Second'
    }]);

    ember_qunit.moduleForComponent('sl-menu', 'Unit | Component | sl menu', {
        unit: true,

        needs: ['component:sl-menu-item', 'component:sl-menu-item-show-all']
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(StreamEnabledMixin['default'].detect(this.subject()), 'StreamEnabled Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'menu', 'componentClass is set to menu');

        assert.strictEqual(component.get('allowShowAll'), false, '"allowShowAll" is "false"');

        assert.strictEqual(component.get('items'), null, '"items" is "null"');

        assert.deepEqual(component.get('selections'), [], '"selections" is "[]"');

        assert.strictEqual(component.get('showingAll'), false, '"showingAll" is "false"');
    });

    ember_qunit.test('showAll() properly sets state to showingAll', function (assert) {
        var component = this.subject({
            allowShowAll: true,
            items: testItems
        });

        assert.ok(!component.get('showingAll'), 'showingAll is initially false');

        Ember['default'].run(function () {
            component.showAll();
        });

        assert.ok(component.get('showingAll'), 'showingAll is true after showAll()');
    });

    ember_qunit.test('hideAll() sets state to not showingAll', function (assert) {
        var component = this.subject({
            items: testItems,
            showingAll: true
        });

        Ember['default'].run(function () {
            component.hideAll();
        });

        assert.equal(component.get('showingAll'), false, 'showingAll is false');
    });

    ember_qunit.test('showingAll sets class "show-all"', function (assert) {
        this.subject({
            showingAll: true
        });

        assert.ok(this.$().hasClass('show-all'), 'Rendered element has class "show-all"');
    });

    ember_qunit.test('select() selects a certain menu item', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            component.select(0);
        });

        assert.equal(component.get('selections').length, 1, 'A single item is selected after select()');

        assert.equal(component.get('selectedItem'), testItems[0], 'Selected item is first test item');

        Ember['default'].run(function () {
            component.select(1);
        });

        assert.equal(component.get('selections').length, 1, 'A single item is selected after select()');

        assert.equal(component.get('selectedItem'), testItems[1], 'Selected item is second test item');
    });

    ember_qunit.test('selectDown() selects an item in the "down" direction', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            component.selectDown();
        });

        assert.equal(component.get('selectedItem'), testItems[0], 'Selected item is first testItem');

        Ember['default'].run(function () {
            component.selectDown();
        });

        assert.equal(component.get('selectedItem'), testItems[0].items[0], 'Selected item is first sub-menu item');
    });

    ember_qunit.test('selectLeft() selects an item in the "left" direction', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            // Selection has to be "down" first in order to select the top level for
            // the context
            component.selectDown();
            component.selectLeft();
        });

        assert.equal(component.get('selections').length, 1, 'Only one selection is made');

        Ember['default'].run(function () {
            // Select "left" to the first top-level item
            component.selectLeft();

            // Select "down" into the first sub-menu
            component.selectDown();
        });

        // This assertion ensures that we have gone into the first sub-menu
        assert.equal(component.get('selections').length, 2, 'Two selections are made');

        Ember['default'].run(function () {
            // Back to top-level items
            component.selectLeft();
        });

        assert.equal(component.get('selections').length, 1, 'Only one selection is made');

        assert.equal(component.get('selectedItem'), testItems[0], 'First top-level item is selected again');
    });

    ember_qunit.test('selectNext() selects the next sibling menu item', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            component.selectNext();
        });

        assert.equal(component.get('selectedItem'), testItems[0], 'First top-level item is selected');

        Ember['default'].run(function () {
            component.selectNext();
        });

        assert.equal(component.get('selections').length, 1, 'One item is still selected');

        assert.equal(component.get('selectedItem'), testItems[1], 'Second top-level item is selected');
    });

    ember_qunit.test("selectParent() selects a sub-menu's parent item", function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            // Select the first top-level item
            component.select(0);

            // Descend into the first sub-menu
            component.selectSubMenu();
        });

        assert.equal(component.get('selectedItem'), testItems[0].items[0], 'The first sub-menu item is selected');
    });

    ember_qunit.test('selectPrevious() selects the previous sibling menu item', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            // Select the second top-level item
            component.select(1);

            // Select previous; should be the first top-level item
            component.selectPrevious();
        });

        assert.equal(component.get('selectedItem'), testItems[0], 'The first top-level item is selected');

        Ember['default'].run(function () {
            // Select previous again; should wrap and select the second top-level item
            component.selectPrevious();
        });

        assert.equal(component.get('selectedItem'), testItems[1], 'The second top-level item is selected');
    });

    ember_qunit.test('selectRight() selects an item in the "right" direction', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            component.select(0);
            component.selectRight();
        });

        assert.equal(component.get('selectedItem'), testItems[1], 'The second top-level item is selected');

        Ember['default'].run(function () {
            // Should wrap around back to the first item
            component.selectRight();
        });

        assert.equal(component.get('selectedItem'), testItems[0], 'The first top-level item is selected');

        Ember['default'].run(function () {
            // Descend "down" into the first sub-menu
            component.selectDown();

            // Select "right" to the first nested sub-menu's first sub-item
            component.selectRight();
        });

        assert.equal(component.get('selectedItem'), testItems[0].items[0].items[0], "The first nested sub-menu's first sub-item is selected");
    });

    ember_qunit.test('selectSubMenu() selects a sub-menu item', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            // Select the first top-level item
            component.select(0);

            // Select the first sub-menu
            component.selectSubMenu();
        });

        assert.equal(component.get('selectedItem'), testItems[0].items[0], 'The first sub-menu item is selected');
    });

    ember_qunit.test('selectUp() selects an item in the "up" direction', function (assert) {
        var component = this.subject({
            items: testItems
        });

        assert.equal(component.get('selections').length, 0, 'Nothing is selected initially');

        Ember['default'].run(function () {
            // Select the first top-level item
            component.select(0);

            // Select the first sub-menu
            component.selectSubMenu();

            // Select the second sub-menu item
            component.selectDown();
        });

        assert.equal(component.get('selectedItem'), testItems[0].items[1], 'The second sub-menu item is selected');

        Ember['default'].run(function () {
            // Select "up" to the first sub-menu item
            component.selectUp();
        });

        assert.equal(component.get('selectedItem'), testItems[0].items[0], 'The first sub-menu item is selected');

        Ember['default'].run(function () {
            // Select "up" again to select the sub-menu's parent
            component.selectUp();
        });

        assert.equal(component.get('selectedItem'), testItems[0], 'The first top-level item is selected');
    });

    ember_qunit.test('selectNext() shows all at the end of the context', function (assert) {
        var component = this.subject({
            allowShowAll: true,
            items: testItems
        });

        Ember['default'].run(function () {
            // Select the last item option
            component.select(1);
        });

        assert.ok(false === component.get('showingAll'), 'Component is not showing all');

        Ember['default'].run(function () {
            component.selectNext();
        });

        assert.ok(component.get('showingAll'), 'Component is now showing all');
    });

    ember_qunit.test('selectPrevious() shows all when at the beginning of the context', function (assert) {
        var component = this.subject({
            allowShowAll: true,
            items: testItems
        });

        assert.ok(false === component.get('showingAll'), 'Component is not showing all by default');

        Ember['default'].run(function () {
            component.selectPrevious();
        });

        assert.ok(component.get('showingAll'), 'Component is now showing all');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var selectedItemDependentKeys = ['selections.@each.item'];

        assert.deepEqual(component.selectedItem._dependentKeys, selectedItemDependentKeys, 'Dependent keys are correct for selectedItem()');
    });

    ember_qunit.test('Stream action "clearSelections" triggers clearSelections()', function (assert) {
        var component = this.subject({
            items: testItems,
            stream: mockStream
        });
        var clearSelectionsSpy = sinon['default'].spy(component, 'clearSelections');

        mockStream.actions['clearSelections']();
        assert.ok(clearSelectionsSpy.called, 'clearSelections method was called');
    });

    ember_qunit.test('clearSelections() - sets selections to empty array', function (assert) {
        var component = this.subject({
            items: testItems,
            stream: mockStream
        });

        // execute select to have a selection to clear from
        mockStream.actions['select'](0);
        mockStream.actions['clearSelections']();
        assert.deepEqual(component.get('selections'), [], 'clearSelections sets selections to empty array');
    });

    ember_qunit.test('selectedItem() - returns expected selected item', function (assert) {
        var component = this.subject({
            items: testItems,
            stream: mockStream
        });

        assert.strictEqual(component.get('selectedItem'), null, 'selectedItem() returns selected item');
    });

    ember_qunit.test('Stream action "doAction" triggers doAction()', function (assert) {
        var component = this.subject({
            items: testItems,
            stream: mockStream
        });
        var doActionSpy = sinon['default'].spy(component, 'doAction');

        mockStream.actions['doAction']();
        assert.ok(doActionSpy.called, 'doAction method was called');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject({
            items: testItems,
            stream: mockStream
        });

        var selectedItemKeys = ['selections.@each.item'];

        assert.deepEqual(component.selectedItem._dependentKeys, selectedItemKeys, 'Dependent keys are correct for selectedItem()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject({
            items: testItems
        });

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-menu-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-menu-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-menu-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-modal-body-test', ['sl-ember-components/mixins/class-prefix', 'dummy/tests/helpers/sl/synchronous/global-libraries', 'ember-qunit'], function (ClassPrefix, globalLibraries, ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-modal-body', 'Unit | Component | sl modal body', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'modal-body', 'componentClass is set to modal-body');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-modal-body-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-modal-body-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-modal-body-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-modal-footer-test', ['sl-ember-components/mixins/class-prefix', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ClassPrefix, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-modal-footer', 'Unit | Component | sl modal footer', {
        unit: true
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('buttonText'), 'Close', 'Default buttonText is "Close"');

        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'modal-footer', 'componentClass is set to modal-footer');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-modal-footer-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-modal-footer-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-modal-footer-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-modal-header-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-modal-header', 'Unit | Component | sl modal header', {
        unit: true
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-modal-header-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-modal-header-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-modal-header-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-modal-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/class-prefix', 'sinon', 'ember-stream/mixins/stream-enabled', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, ClassPrefix, sinon, streamEnabled, globalLibraries) {

    'use strict';

    var mockStream = {
        actions: {},

        on: function on(actionName, handler) {
            this.actions[actionName] = handler;
        },

        subject: {
            dispose: function dispose() {
                mockStream.actions = {};
            },

            onCompleted: function onCompleted() {}
        }
    };

    ember_qunit.moduleForComponent('sl-modal', 'Unit | Component | sl modal', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(streamEnabled['default'].detect(this.subject()), 'StreamEnabled Mixin is present');

        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'modal', 'componentClass is set to modal');

        assert.strictEqual(component.get('animated'), true, 'animated is true by default');

        assert.strictEqual(component.get('ariaDescribedBy'), null, 'ariaDescribedBy is null by default');

        assert.strictEqual(component.get('ariaHidden'), 'true', 'ariaHidden is "true" by default');

        assert.strictEqual(component.get('ariaRole'), 'dialog', 'ariaRole is "dialog" by default');

        assert.strictEqual(component.get('backdrop'), true, 'backdrop is true by default');

        assert.strictEqual(component.get('isOpen'), false, 'isOpen is false by default');

        assert.strictEqual(component.get('tabindex'), '-1', 'tabindex is "-1" by default');
    });

    ember_qunit.test('hide() calls bootstrap modal hide', function (assert) {
        var spyModal = sinon['default'].spy(Ember['default'].$.fn, 'modal');

        var component = this.subject();

        this.render();

        component.hide();

        assert.ok(spyModal.calledWithExactly('hide'), 'Bootstrap jQuery modal plugin correctly called with "hide" parameter');

        Ember['default'].$.fn.modal.restore();
    });

    ember_qunit.test('show() calls bootstrap modal show', function (assert) {
        var spyModal = sinon['default'].spy(Ember['default'].$.fn, 'modal');

        var component = this.subject();

        this.render();

        component.show();

        assert.ok(spyModal.calledWithExactly('show'), 'Bootstrap jQuery modal plugin correctly called with "show" parameter');

        // clean up
        component.hide();
        Ember['default'].$.fn.modal.restore();
    });

    ember_qunit.test('Event handlers are registered and unregistered', function (assert) {
        var spyOn = sinon['default'].spy(Ember['default'].$.fn, 'on');
        var spyOff = sinon['default'].spy(Ember['default'].$.fn, 'off');
        var component = this.subject();

        var matchElement = sinon['default'].match(function (value) {
            return value.get(0) === component.$().get(0);
        });

        this.render();

        spyOn.reset();

        component.trigger('didInsertElement');

        assert.ok(spyOn.calledWith(component.namespaceEvent('show.bs.modal')), 'on() was called with namespaced show.bs.modal event');

        assert.ok(spyOn.calledWith(component.namespaceEvent('shown.bs.modal')), 'on() was called with namespaced shown.bs.modal event');

        assert.ok(spyOn.calledWith(component.namespaceEvent('hide.bs.modal')), 'on() was called with namespaced hide.bs.modal event');

        assert.ok(spyOn.calledWith(component.namespaceEvent('hidden.bs.modal')), 'on() was called with namespaced hidden.bs.modal event');

        assert.ok(spyOn.alwaysCalledOn(matchElement), 'on() was called on expected element');

        spyOff.reset();

        component.trigger('willClearRender');

        assert.ok(spyOff.calledWith(component.namespaceEvent('show.bs.modal')), 'off() was called with namespaced show.bs.modal event');

        assert.ok(spyOff.calledWith(component.namespaceEvent('shown.bs.modal')), 'off() was called with namespaced shown.bs.modal event');

        assert.ok(spyOff.calledWith(component.namespaceEvent('hide.bs.modal')), 'off() was called with namespaced hide.bs.modal event');

        assert.ok(spyOff.calledWith(component.namespaceEvent('hidden.bs.modal')), 'off() was called with namespaced hidden.bs.modal event');

        assert.ok(spyOff.alwaysCalledOn(matchElement), 'off() was called on expected element');

        Ember['default'].$.fn.on.restore();
        Ember['default'].$.fn.off.restore();
    });

    ember_qunit.test('Stream action "show" triggers show()', function (assert) {
        var component = this.subject({
            stream: mockStream
        });
        var showSpy = sinon['default'].spy(component, 'show');

        this.render();

        mockStream.actions['show']();
        assert.ok(showSpy.called, 'show method was called');

        // clean up
        component.hide();
        component.show.restore();
    });

    ember_qunit.test('Stream action "hide" triggers hide()', function (assert) {
        var component = this.subject({
            stream: mockStream
        });
        var hideSpy = sinon['default'].spy(component, 'hide');

        this.render();

        mockStream.actions['hide']();
        assert.ok(hideSpy.called, 'hide method was called');

        component.hide.restore();
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-modal-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-modal-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-modal-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-pagination-test', ['ember', 'sinon', 'sl-ember-components/mixins/class-prefix', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, sinon, ClassPrefix, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-pagination', 'Unit | Component | sl pagination', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'pagination', 'componentClass is set to pagination');

        assert.strictEqual(component.get('tagName'), 'ul', 'tagName is ul by default');

        assert.strictEqual(component.get('busy'), false, 'busy is false by default');

        assert.strictEqual(component.get('changePage'), null, 'changePage is null by default');

        assert.strictEqual(component.get('currentPage'), 1, 'currentPage is 1 by default');

        assert.strictEqual(component.get('isResponsive'), true, 'isResponsive is true by default');

        assert.strictEqual(component.get('totalPages'), null, 'totalPages is null by default');
    });

    ember_qunit.test('nextPage action increments currentPage', function (assert) {
        var component = this.subject({
            totalPages: 2,
            updateResponsivePlugin: function updateResponsivePlugin() {}
        });

        Ember['default'].run(function () {
            component.send('nextPage');
        });

        assert.strictEqual(component.get('currentPage'), 2, 'currentPage was incremented');
    });

    ember_qunit.test('previousPage action decrements currentPage', function (assert) {
        var component = this.subject({
            totalPages: 2,
            currentPage: 2,
            updateResponsivePlugin: function updateResponsivePlugin() {}
        });

        Ember['default'].run(function () {
            component.send('previousPage');
        });

        assert.strictEqual(component.get('currentPage'), 1, 'currentPage was decremented');
    });

    ember_qunit.test('onFirstPage property returns the expected values', function (assert) {
        var component = this.subject({
            currentPage: 2,
            totalPages: 3,
            updateResponsivePlugin: function updateResponsivePlugin() {}
        });

        assert.strictEqual(component.get('onFirstPage'), false, 'Returns false when not on the first page');

        Ember['default'].run(function () {
            component.set('currentPage', 1);
        });

        assert.strictEqual(component.get('onFirstPage'), true, 'Returns true when not on the first page');
    });

    ember_qunit.test('onLastPage property returns the expected values', function (assert) {
        var component = this.subject({
            currentPage: 1,
            totalPages: 2,
            updateResponsivePlugin: function updateResponsivePlugin() {},
            setupResponsivePlugin: function setupResponsivePlugin() {}
        });

        assert.strictEqual(component.get('onLastPage'), false, 'Returns false when not on the last page');

        Ember['default'].run(function () {
            component.set('currentPage', 2);
        });

        assert.strictEqual(component.get('onLastPage'), true, 'Returns true when on the last page');

        Ember['default'].run(function () {
            component.set('totalPages', 3);
        });

        assert.strictEqual(component.get('onLastPage'), false, 'Respects changes to the totalPages property');
    });

    ember_qunit.test('changePageBy() adds to currentPage when positive', function (assert) {
        var component = this.subject({
            totalPages: 2,
            updateResponsivePlugin: function updateResponsivePlugin() {}
        });

        Ember['default'].run(function () {
            component.changePageBy(1);
        });

        assert.strictEqual(component.get('currentPage'), 2, 'currentPage was increased by 1');
    });

    ember_qunit.test('changePageBy() subtracts from currentPage when negative', function (assert) {
        var component = this.subject({
            totalPages: 2,
            currentPage: 2,
            updateResponsivePlugin: function updateResponsivePlugin() {}
        });

        Ember['default'].run(function () {
            component.changePageBy(-1);
        });

        assert.strictEqual(component.get('currentPage'), 1, 'currentPage was decreased by 1');
    });

    ember_qunit.test('gotoPage() sends the changePage action', function (assert) {
        var targetObject = {
            testAction: sinon['default'].spy()
        };

        var component = this.subject({
            totalPages: 2,
            changePage: 'testAction',
            updateResponsivePlugin: function updateResponsivePlugin() {},
            targetObject: targetObject
        });

        Ember['default'].run(function () {
            component.gotoPage(2);
        });

        assert.strictEqual(targetObject.testAction.getCall(0).args[0], 2, 'the changePage action was sent with the new currentPage value');
    });

    ember_qunit.test('gotoPage() does nothing when busy is true', function (assert) {
        var targetObject = {
            testAction: sinon['default'].spy()
        };

        var component = this.subject({
            totalPages: 2,
            changePage: 'testAction',
            targetObject: targetObject
        });

        Ember['default'].run(function () {
            component.set('busy', true);
            component.gotoPage(2);
        });

        assert.strictEqual(component.get('currentPage'), 1, 'currentPage was not changed');

        assert.notOk(targetObject.testAction.calledOnce, 'changePage action was not sent');
    });

    ember_qunit.test('gotoPage() does nothing when page is outside of range', function (assert) {
        var targetObject = {
            testAction: sinon['default'].spy()
        };

        var component = this.subject({
            totalPages: 2,
            changePage: 'testAction',
            targetObject: targetObject
        });

        component.gotoPage(3);
        component.gotoPage(0);

        assert.notOk(targetObject.testAction.called, 'changePage action not called when page number is outside of range');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var onFirstPageDependentKeys = ['currentPage'];

        var onLastPageDependentKeys = ['currentPage', 'totalPages'];

        var rangeDependentKeys = ['totalPages'];

        assert.deepEqual(component.onFirstPage._dependentKeys, onFirstPageDependentKeys, 'Dependent keys are correct for onFirstPage()');

        assert.deepEqual(component.onLastPage._dependentKeys, onLastPageDependentKeys, 'Dependent keys are correct for onLastPage()');

        assert.deepEqual(component.range._dependentKeys, rangeDependentKeys, 'Dependent keys are correct for range()');
    });

    ember_qunit.test('Observer keys are correct', function (assert) {
        var component = this.subject();

        var reinitializeResponsivePluginKeys = ['totalPages'];

        var updateCurrentPageKeys = ['currentPage'];

        var updateResponsivePluginKeys = ['currentPage'];

        assert.deepEqual(component.reinitializeResponsivePlugin.__ember_observes__, reinitializeResponsivePluginKeys, 'Observer keys are correct for reinitializeResponsivePlugin()');

        assert.deepEqual(component.updateCurrentPage.__ember_observes__, updateCurrentPageKeys, 'Observer keys are correct for updateCurrentPage()');

        assert.deepEqual(component.updateResponsivePlugin.__ember_observes__, updateResponsivePluginKeys, 'Observer keys are correct for updateResponsivePlugin()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-pagination-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-pagination-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-pagination-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-panel-test', ['sl-ember-components/mixins/class-prefix', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ClassPrefix, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-panel', 'Unit | Component | sl panel', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'panel', 'componentClass is set to panel');

        assert.strictEqual(component.get('heading'), null, 'Default heading value is null');

        assert.strictEqual(component.get('loading'), false, 'Default loading value is null');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-panel-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-panel-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-panel-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-progress-bar-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sl-ember-components/components/sl-progress-bar', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, ClassPrefix, TooltipEnabledMixin, sl_progress_bar, sinon, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-progress-bar', 'Unit | Component | sl progress bar', {
        unit: true
    });

    var Theme = {
        DANGER: 'danger',
        DEFAULT: 'default',
        INFO: 'info',
        SUCCESS: 'success',
        WARNING: 'warning'
    };

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject()), 'TooltipEnabled Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'progress-bar', 'componentClass is set to progress-bar');

        assert.deepEqual(sl_progress_bar.Theme, Theme, 'Theme enum values are correct');

        assert.strictEqual(component.get('animated'), false, 'animated: false');

        assert.strictEqual(component.get('label'), false, 'label: false');

        assert.strictEqual(component.get('striped'), false, 'striped: false');

        assert.strictEqual(component.get('theme'), Theme.DEFAULT, 'theme: ' + Theme.DEFAULT);

        assert.strictEqual(component.get('value'), 0, 'value: 0');
    });

    ember_qunit.test('isLowPercentage() is only true when value < 50', function (assert) {
        var component = this.subject({ value: 49 });

        assert.ok(component.get('isLowPercentage'), 'Value < 50 is low percentage');

        this.render();

        Ember['default'].run(function () {
            component.set('value', 50);
        });

        assert.strictEqual(component.get('isLowPercentage'), false, 'Value >= 50 is not low percentage');
    });

    ember_qunit.test('Event listener on "willInsertElement" calls "setCssWidth()"', function (assert) {
        var spy = sinon['default'].spy();
        var component = this.subject({
            setCssWidth: spy
        });

        Ember['default'].run(function () {
            return component.trigger('willInsertElement');
        });

        assert.ok(spy.called, '"setCssWidth()" called when "willInsertElement" event occurs');
    });

    ember_qunit.test('"setWidth()" calls the correct methods', function (assert) {
        var spy = sinon['default'].spy();
        var component = this.subject({
            setCssWidth: spy
        });

        component.setWidth();

        assert.ok(spy.called, '"setCssWidth()" called inside "setWidth()"');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var isLowPercentageDependentKeys = ['value'];

        var themeClassNameDependentKeys = ['theme'];

        assert.deepEqual(component.isLowPercentage._dependentKeys, isLowPercentageDependentKeys, 'Dependent keys are correct for isLowPercentage()');

        assert.deepEqual(component.themeClassName._dependentKeys, themeClassNameDependentKeys, 'Dependent keys are correct for themeClassName()');
    });

    ember_qunit.test('Observer keys are correct', function (assert) {
        var component = this.subject();

        var setWidthKeys = ['value'];

        assert.deepEqual(component.setWidth.__ember_observes__, setWidthKeys, 'Observer keys are correct for setWidth()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-progress-bar-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-progress-bar-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-progress-bar-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-radio-group-test', ['ember', 'ember-qunit', 'sl-ember-components/mixins/sl-input-based', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sl-ember-components/mixins/sl-namespace', 'sl-ember-components/mixins/class-prefix', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, InputBasedMixin, TooltipEnabledMixin, NamespaceMixin, ClassPrefix, sinon, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-radio-group', 'Unit | Component | sl radio group', {
        needs: ['component:sl-radio'],
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(InputBasedMixin['default'].detect(this.subject()), 'InputBased Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject()), 'TooltipEnabled Mixin is present');

        assert.ok(NamespaceMixin['default'].detect(this.subject()), 'Namespace Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'radio-group', 'componentClass is set to radio-group');

        assert.strictEqual(component.get('tagName'), 'fieldset', 'tagName: fieldset');

        assert.strictEqual(component.get('inline'), null, 'inline: null');

        assert.strictEqual(component.get('label'), null, 'label: null');

        assert.strictEqual(component.get('value'), null, 'value: null');
    });

    ember_qunit.test('intialize() - assert that name must be set on sl-radio-group', function (assert) {
        var component = this.subject();

        assert.throws(function () {
            return component.initialize();
        }, '"name" property must be set on component');
    });

    ember_qunit.test('Event handlers are registered and unregistered', function (assert) {
        var spyOn = sinon['default'].spy(Ember['default'].$.fn, 'on');
        var spyOff = sinon['default'].spy(Ember['default'].$.fn, 'off');

        this.registry.register('template:test-template', Ember['default'].HTMLBars.template((function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 1,
                            'column': 0
                        },
                        'end': {
                            'line': 5,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n        ');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment('');
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode('\n    ');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    return morphs;
                },
                statements: [['content', 'sl-radio', ['loc', [null, [2, 8], [2, 20]]]], ['content', 'sl-radio', ['loc', [null, [3, 8], [3, 20]]]], ['content', 'sl-radio', ['loc', [null, [4, 8], [4, 20]]]]],
                locals: [],
                templates: []
            };
        })()));

        var component = this.subject({
            name: 'testName',
            templateName: 'test-template'
        });

        this.render();

        var radioButtonsArray = this.$('input:radio').toArray();

        var matchElements = sinon['default'].match(function (elements) {
            return radioButtonsArray.every(function (element) {
                var found = elements.toArray().find(function (radioElement) {
                    return element === radioElement;
                });

                return Boolean(found);
            });
        });

        this.render();

        spyOn.reset();

        component.trigger('didInsertElement');

        assert.ok(spyOn.calledWith(component.namespaceEvent('change')), 'on() was called with namespaced change event');

        assert.ok(spyOn.calledOn(matchElements), 'on() was called on expected radio buttons');

        spyOff.reset();

        component.trigger('willClearRender');

        assert.ok(spyOff.calledWith(component.namespaceEvent('change')), 'off() was called with namespaced change event');

        assert.ok(spyOff.calledOn(matchElements), 'off() was called on expected radio buttons');

        Ember['default'].$.fn.on.restore();
        Ember['default'].$.fn.off.restore();
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject({
            name: 'testName'
        });

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-radio-group-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-radio-group-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-radio-group-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-radio-test', ['ember', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-input-based', 'ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ClassPrefix, InputBasedMixin, ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-radio', 'Unit | Component | sl radio', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');

        assert.ok(InputBasedMixin['default'].detect(this.subject()), 'InputBased Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'radio', 'ComponentClass is set to radio');

        assert.strictEqual(component.get('label'), null, 'Default property "label" is null');

        assert.strictEqual(component.get('tagName'), 'div', 'tagName is "div" in default state');

        assert.strictEqual(component.get('value'), null, 'Default property "value" is null');
    });

    ember_qunit.test('radioType property sets relevant class', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('radioType'), 'radio', 'RadioType defaults to "radio"');

        Ember['default'].run(function () {
            component.set('inline', true);
        });

        assert.strictEqual(component.get('radioType'), 'radio-inline', 'RadioType is inline');
    });

    ember_qunit.test('inline property changes tagName', function (assert) {
        var component = this.subject({
            inline: true
        });

        assert.strictEqual(component.get('tagName'), 'label', 'tagName is "label" when component is inline');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();

        var radioTypeDependentKeys = ['inline'];

        assert.deepEqual(component.radioType._dependentKeys, radioTypeDependentKeys, 'Dependent keys are correct for radioType()');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-radio-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-radio-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-radio-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-select-test', ['ember-qunit', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ember_qunit, globalLibraries) {

    'use strict';

    ember_qunit.moduleForComponent('sl-select', 'Unit | Component | sl select', {
        unit: true
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-select-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-select-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-select-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-span-test', ['sl-ember-components/mixins/class-prefix', 'dummy/tests/helpers/sl/synchronous/global-libraries', 'ember-qunit'], function (ClassPrefix, globalLibraries, ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-span', 'Unit | Component | sl span', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'span', 'ComponentClass is set to span');

        assert.strictEqual(component.get('tagName'), 'span', 'Default property "tagName" is "span"');

        assert.strictEqual(component.get('inverse'), false, 'Default property "inverse" is false');

        assert.strictEqual(component.get('loading'), false, 'Default property "loading" is false');

        assert.strictEqual(component.get('value'), null, 'Default property "value" is null');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-span-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-span-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-span-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-tab-pane-test', ['ember', 'ember-qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (Ember, ember_qunit, startApp, globalLibraries) {

    'use strict';

    var App = undefined;

    ember_qunit.moduleForComponent('sl-tab-pane', 'Unit | Component | sl tab pane', {
        needs: ['component:sl-tab-panel'],

        beforeEach: function beforeEach() {
            App = startApp['default']();
        },

        afterEach: function afterEach() {
            Ember['default'].run(App, App.destroy);
        },

        unit: true
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject({
            label: 'Test Label',
            name: 'Test Name'
        });

        assert.strictEqual(component.get('data-tab-label'), 'Test Label', '"data-tab-label" is set to the value of "label"');

        assert.strictEqual(component.get('data-tab-name'), 'Test Name', '"data-tab-name" is set to the value of "name"');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-tab-pane-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-tab-pane-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-tab-pane-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-tab-panel-test', ['ember-qunit', 'sl-ember-components/components/sl-tab-panel', 'sl-ember-components/utils/warn', 'sl-ember-components/mixins/class-prefix', 'sinon', 'dummy/tests/helpers/sl/synchronous/global-libraries'], function (ember_qunit, sl_tab_panel, warn, ClassPrefix, sinon, globalLibraries) {

    'use strict';

    var template = Ember.HTMLBars.template((function () {
        var child0 = (function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 2,
                            'column': 4
                        },
                        'end': {
                            'line': 4,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('        One\n');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                    return [];
                },
                statements: [],
                locals: [],
                templates: []
            };
        })();

        var child1 = (function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 6,
                            'column': 4
                        },
                        'end': {
                            'line': 8,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('        Two\n');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                    return [];
                },
                statements: [],
                locals: [],
                templates: []
            };
        })();

        var child2 = (function () {
            return {
                meta: {
                    'revision': 'Ember@1.13.7',
                    'loc': {
                        'source': null,
                        'start': {
                            'line': 10,
                            'column': 4
                        },
                        'end': {
                            'line': 12,
                            'column': 4
                        }
                    }
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode('        Three\n');
                    dom.appendChild(el0, el1);
                    return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                    return [];
                },
                statements: [],
                locals: [],
                templates: []
            };
        })();

        return {
            meta: {
                'revision': 'Ember@1.13.7',
                'loc': {
                    'source': null,
                    'start': {
                        'line': 1,
                        'column': 0
                    },
                    'end': {
                        'line': 13,
                        'column': 0
                    }
                }
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode('\n');
                dom.appendChild(el0, el1);
                var el1 = dom.createComment('');
                dom.appendChild(el0, el1);
                return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
            },
            statements: [['block', 'sl-tab-pane', [], ['label', 'One', 'name', 'one'], 0, null, ['loc', [null, [2, 4], [4, 20]]]], ['block', 'sl-tab-pane', [], ['label', 'Two', 'name', 'two'], 1, null, ['loc', [null, [6, 4], [8, 20]]]], ['block', 'sl-tab-pane', [], ['label', 'Three', 'name', 'three'], 2, null, ['loc', [null, [10, 4], [12, 20]]]]],
            locals: [],
            templates: [child0, child1, child2]
        };
    })());

    ember_qunit.moduleForComponent('sl-tab-panel', 'Unit | Component | sl tab panel', {
        unit: true,
        needs: ['component:sl-tab-pane']
    });

    ember_qunit.test('Alignment enum values are correct', function (assert) {
        var Alignment = {
            LEFT: 'left',
            RIGHT: 'right'
        };

        assert.deepEqual(sl_tab_panel.Alignment, Alignment);
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default values are set correctly', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('alignTabs'), sl_tab_panel.Alignment.LEFT, 'alignmentTabs is left by default');

        assert.strictEqual(component.get('componentClass'), 'tab-panel', 'componentClass is set to tab-panel');

        assert.strictEqual(component.get('initialTabName'), null, 'initialTabName is null by default');
    });

    ember_qunit.test('Dependent keys are correct', function (assert) {
        var component = this.subject();
        var tabAlignmentDependentKeys = ['alignTabs'];

        assert.deepEqual(component.tabAlignmentClass._dependentKeys, tabAlignmentDependentKeys);
    });

    ember_qunit.test('setupTabs() sets "tabs" property with correct data', function (assert) {
        var tabs = [{ label: 'One', name: 'one', active: true }, { label: 'Two', name: 'two', active: false }, { label: 'Three', name: 'three', active: false }];

        this.registry.register('template:test-template', template);

        var component = this.subject({
            templateName: 'test-template'
        });

        this.render();

        var componentTabs = component.get('tabs');

        assert.deepEqual(tabs.map(function (i) {
            return i.label;
        }), componentTabs.map(function (i) {
            return i.label;
        }), '"tabs" property has proper labels');

        assert.deepEqual(tabs.map(function (i) {
            return i.name;
        }), componentTabs.map(function (i) {
            return i.name;
        }), '"tabs" property has proper names');

        assert.deepEqual(tabs.map(function (i) {
            return i.active;
        }), componentTabs.map(function (i) {
            return i.active;
        }), '"tabs" property has proper active states');

        this.registry.unregister('template:test-template');
    });

    ember_qunit.test('setActiveTab() does so correctly', function (assert) {
        this.registry.register('template:test-template', template);

        var component = this.subject({
            templateName: 'test-template'
        });

        this.render();

        var tabOne = this.$('> .nav-tabs > li[data-tab-name="one"]');
        var tabTwo = this.$('> .nav-tabs > li[data-tab-name="two"]');

        assert.notOk(tabTwo.hasClass('active'), 'Second tab did not have active class');

        component.setActiveTab('two');

        assert.ok(tabTwo.hasClass('active'), 'Second tab now has active class');

        assert.notOk(tabOne.hasClass('active'), 'First tab does not have active class');

        this.registry.unregister('template:test-template');
    });

    ember_qunit.test('getInitialTabName() returns the correct tab name', function (assert) {
        this.registry.register('template:test-template', template);

        var component = this.subject({
            templateName: 'test-template'
        });

        this.render();

        assert.strictEqual(component.getInitialTabName(), 'one', 'First tab is initial tab by default');

        component.set('initialTabName', 'two');

        assert.strictEqual(component.getInitialTabName(), 'two', 'If initialTabName is set, it is returned');

        this.registry.unregister('template:test-template');
    });

    ember_qunit.test('tabAlignmentClass() returns the correct value', function (assert) {
        var component = this.subject();

        component.set('alignTabs', 'left');

        assert.strictEqual(component.get('tabAlignmentClass'), 'sl-align-tabs-left', 'Correct string returned for value of left');

        component.set('alignTabs', 'right');

        assert.strictEqual(component.get('tabAlignmentClass'), 'sl-align-tabs-right', 'Correct string returned for value of right');

        var spy = sinon['default'].spy(warn, 'default');

        component.set('alignTabs', 'Invalid value');
        component.get('tabAlignmentClass');

        assert.ok(spy.calledOnce, 'warn() was called when invalid alignment class was provided');

        warn['default'].restore();
    });

    ember_qunit.test('getActiveTabName returns the correct value after setActiveTab() is called', function (assert) {
        this.registry.register('template:test-template', template);

        var component = this.subject({
            templateName: 'test-template'
        });

        this.render();

        component.setActiveTab('two');

        assert.equal(component.getActiveTabName(), 'two');

        this.registry.unregister('template:test-template');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-tab-panel-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-tab-panel-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-tab-panel-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-textarea-test', ['sl-ember-components/mixins/class-prefix', 'sl-ember-components/mixins/sl-component-input-id', 'dummy/tests/helpers/sl/synchronous/global-libraries', 'sl-ember-components/mixins/sl-input-based', 'sl-ember-components/mixins/sl-tooltip-enabled', 'sl-ember-components/components/sl-textarea', 'ember-qunit'], function (ClassPrefix, ComponentInputId, globalLibraries, InputBasedMixin, TooltipEnabledMixin, sl_textarea, ember_qunit) {

    'use strict';

    var Direction = {
        BACKWARD: 'backward',
        FORWARD: 'forward',
        NONE: 'none'
    };

    var Wrap = {
        HARD: 'hard',
        SOFT: 'soft'
    };

    ember_qunit.moduleForComponent('sl-textarea', 'Unit | Component | sl textarea', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(InputBasedMixin['default'].detect(this.subject()), 'InputBased Mixin is present');

        assert.ok(TooltipEnabledMixin['default'].detect(this.subject()), 'TooltipEnabled Mixin is present');

        assert.ok(ComponentInputId['default'].detect(this.subject()), 'ComponentInputId Mixin is present');

        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject();

        assert.strictEqual(component.get('componentClass'), 'textarea', 'componentClass is set to textarea');

        assert.strictEqual(component.get('autofocus'), false, 'Default property "autofocus" is false');

        assert.strictEqual(component.get('selectionDirection'), 'forward', 'Default property "selectionDirection" is forward');

        assert.strictEqual(component.get('selectionEnd'), null, 'Default property "selectionEnd" is null');

        assert.strictEqual(component.get('selectionStart'), null, 'Default property "selectionStart" is null');

        assert.strictEqual(component.get('spellcheck'), false, 'Default property "spellcheck" is null');

        assert.strictEqual(component.get('value'), null, 'Default property "value" is null');

        assert.strictEqual(component.get('wrap'), 'soft', 'Default property "wrap" is null');

        assert.deepEqual(sl_textarea.Wrap, Wrap, 'Wrap enum values are correct');

        assert.deepEqual(sl_textarea.Direction, Direction, 'Direction enum values are correct');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject();

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-textarea-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-textarea-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-textarea-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/components/sl-tooltip-test', ['ember', 'sl-ember-components/mixins/class-prefix', 'dummy/tests/helpers/sl/synchronous/global-libraries', 'sl-ember-components/mixins/sl-tooltip-enabled', 'ember-qunit'], function (Ember, ClassPrefix, globalLibraries, TooltipEnabledMixin, ember_qunit) {

    'use strict';

    ember_qunit.moduleForComponent('sl-tooltip', 'Unit | Component | sl tooltip', {
        unit: true
    });

    ember_qunit.test('Expected Mixins are present', function (assert) {
        assert.ok(TooltipEnabledMixin['default'].detect(this.subject({ title: 'Tooltip Text' })), 'Expected Mixin is present');

        assert.ok(ClassPrefix['default'].detect(this.subject()), 'ClassPrefix Mixin is present');
    });

    ember_qunit.test('Default property values', function (assert) {
        var component = this.subject({ title: 'test' });

        assert.strictEqual(component.get('componentClass'), 'tooltip', 'componentClass is set to tooltip');

        assert.equal(component.get('tagName'), 'span');
    });

    ember_qunit.test('"title" property needs to be a string', function (assert) {
        var _this = this;

        var properties = Ember['default'].Object.create();

        var callSubject = function callSubject() {
            return _this.subject(properties);
        };

        // Empty Property

        assert.throws(callSubject, 'Property was empty');

        // Null Property

        properties.set('title', null);

        assert.throws(callSubject, 'Property was null');

        // Number Property

        properties.set('title', 3);

        assert.throws(callSubject, 'Property was a number');

        // Boolean Property

        properties.set('title', true);

        assert.throws(callSubject, 'Property was a boolean');

        // Array Property

        properties.set('title', []);

        assert.throws(callSubject, 'Property was an array');

        // Function Property

        properties.set('title', function () {});

        assert.throws(callSubject, 'Property was a function');

        // Object Property

        properties.set('title', {});

        assert.throws(callSubject, 'Property was an object');

        // Undefined Property

        properties.set('title', undefined);

        assert.throws(callSubject, 'Property was undefined');

        // String Property

        properties.set('title', 'Test title');

        assert.ok(callSubject(), 'Property was a string');
    });

    ember_qunit.test('"popover" property needs to be a string or undefined', function (assert) {
        var _this2 = this;

        var properties = Ember['default'].Object.create({
            title: 'Tooltip text'
        });

        var callSubject = function callSubject() {
            return _this2.subject(properties);
        };

        // Null Property

        properties.set('popover', null);

        assert.throws(callSubject, 'Property was null');

        // Number Property

        properties.set('popover', 3);

        assert.throws(callSubject, 'Property was a number');

        // Boolean Property

        properties.set('popover', true);

        assert.throws(callSubject, 'Property was a number');

        // Array Property

        properties.set('popover', []);

        assert.throws(callSubject, 'Property was an array');

        // Function Property

        properties.set('popover', function () {});

        assert.throws(callSubject, 'Property was a function');

        // Object Property

        properties.set('popover', {});

        assert.throws(callSubject, 'Property was an object');

        // Undefined Property

        // Delete previously populated popover property
        delete properties.popover;

        assert.ok(callSubject(), 'Property was undefined');

        // String Property

        properties.set('popover', 'Popover text');

        assert.ok(callSubject(), 'Property was a string');
    });

    ember_qunit.test('There are no references to Ember.$, $ or jQuery', function (assert) {
        globalLibraries['default'].setupSpies();

        var component = this.subject({
            title: 'tooltip'
        });

        this.render();

        globalLibraries['default'].triggerEvents(component);

        assert.notOk(globalLibraries['default'].called(), 'Global libraries are not referenced in component');

        globalLibraries['default'].restoreSpies();
    });

});
define('dummy/tests/unit/components/sl-tooltip-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/components');
  QUnit.test('unit/components/sl-tooltip-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/components/sl-tooltip-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/mixins/sl-component-class-prefix-test', ['ember', 'sl-ember-components/mixins/class-prefix', 'sl-ember-components/utils/class-prefix', 'sinon', 'qunit'], function (Ember, mixinUnderTest, prefixModule, sinon, qunit) {

    'use strict';

    qunit.module('Unit | Mixin | sl component class prefix');

    qunit.test('Can be successfully mixed', function (assert) {
        var testObject = Ember['default'].Component.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        assert.ok(subject);
    });

    qunit.test('prefix() is called when getComponentClassName() invoked', function (assert) {
        var testObject = Ember['default'].Component.extend(mixinUnderTest['default'], {
            componentClass: 'test-component'
        });

        var subject = testObject.create();
        var prefixSpy = sinon['default'].spy(prefixModule, 'default');

        subject.getComponentClassName();

        assert.ok(prefixSpy.called, 'prefix() was called');
    });

    qunit.test('Prefixed component class is present in classNames array', function (assert) {
        var testObject = Ember['default'].Component.extend(mixinUnderTest['default'], {
            componentClass: 'test-component'
        });

        var subject = testObject.create();
        var prefix = prefixModule['default'];
        var prefixedComponentClass = prefix('test-component');

        assert.ok(subject.get('classNames').contains(prefixedComponentClass), 'Prefixed component class is present in classNames array');
    });

});
define('dummy/tests/unit/mixins/sl-component-class-prefix-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins');
  QUnit.test('unit/mixins/sl-component-class-prefix-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/mixins/sl-component-class-prefix-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/mixins/sl-component-input-id-test', ['ember', 'sl-ember-components/mixins/sl-component-input-id', 'qunit'], function (Ember, mixinUnderTest, qunit) {

    'use strict';

    qunit.module('Unit | Mixin | sl component input id');

    qunit.test('Can be successfully mixed', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        assert.ok(subject, 'sl-component-input-id mixin is present');
    });

    qunit.test('inputId is set on component', function (assert) {
        var component = Ember['default'].Component.extend(mixinUnderTest['default']).create();

        assert.strictEqual(component.get('inputId'), component.get('elementId') + '-input');
    });

    qunit.test('inputId value is preserved if it is already set', function (assert) {
        var id = 'preset-id';
        var component = Ember['default'].Component.extend(mixinUnderTest['default']).create({
            inputId: id
        });

        assert.strictEqual(component.get('inputId'), id);
    });

});
define('dummy/tests/unit/mixins/sl-component-input-id-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins');
  QUnit.test('unit/mixins/sl-component-input-id-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/mixins/sl-component-input-id-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/mixins/sl-input-based-test', ['ember', 'sl-ember-components/mixins/sl-input-based', 'qunit'], function (Ember, mixinUnderTest, qunit) {

    'use strict';

    qunit.module('Unit | Mixin | sl input based');

    qunit.test('Successfully mixed', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        assert.ok(subject);
    });

    qunit.test('Default values are set correctly', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        assert.strictEqual(subject.get('disabled'), false, 'Disabled is false by default');

        assert.strictEqual(subject.get('optional'), false, 'Optional is false by default');

        assert.strictEqual(subject.get('name'), null, 'Name is null by default');

        assert.strictEqual(subject.get('readonly'), false, 'Readonly is false by default');

        assert.strictEqual(subject.get('required'), false, 'Required is false by default');
    });

    qunit.test('Class name bindings contain expected bindings', function (assert) {
        var expectedClassNameBindings = ['disabled', 'optional', 'readonly', 'required'];
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        assert.deepEqual(subject.get('classNameBindings'), expectedClassNameBindings, 'classNameBindings contains the expected class names');
    });

    qunit.test('readonlyString() returns expected value', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        subject.set('readonly', true);

        assert.strictEqual(subject.get('readonlyString'), 'readonly', 'readonlyString() returns expected string when "readonly" is true');

        subject.set('readonly', false);

        assert.strictEqual(subject.get('readonlyString'), null, 'readonlyString() returns null when "readonly" is false');
    });

    qunit.test('Dependent keys are correct', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        var readonlyStringDependentKeys = ['readonly'];

        assert.deepEqual(subject.readonlyString._dependentKeys, readonlyStringDependentKeys, 'Dependent keys are correct for readonlyString()');
    });

});
define('dummy/tests/unit/mixins/sl-input-based-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins');
  QUnit.test('unit/mixins/sl-input-based-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/mixins/sl-input-based-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/mixins/sl-tooltip-enabled-test', ['ember', 'sl-ember-components/mixins/sl-tooltip-enabled', 'qunit', 'sinon'], function (Ember, mixinUnderTest, qunit, sinon) {

    'use strict';

    var temporaryData = undefined;
    var jQueryMock = function jQueryMock() {
        return {
            attr: function attr(property, value) {
                if (!value) {
                    return temporaryData[property];
                }

                temporaryData[property] = value;
            },

            tooltip: function tooltip(value) {
                temporaryData.tooltip = value;
            },

            popover: function popover(value) {
                temporaryData.popover = value;
            }
        };
    };

    qunit.module('Unit | Mixin | sl tooltip enabled', {
        beforeEach: function beforeEach() {
            temporaryData = {};
        }
    });

    qunit.test('Successfully mixed', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);
        var subject = testObject.create();

        assert.ok(subject, 'sl-tooltip-enabled mixin is present');
    });

    qunit.test('Default property values', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);

        var subject = testObject.create();

        assert.strictEqual(subject.get('dataTrigger'), null, 'dataTrigger is null');

        assert.strictEqual(subject.get('title'), null, 'title is null');
    });

    qunit.skip('enable() - observes correct properties', function () {});

    qunit.skip('enable() - listens to correct event', function () {
        // Waiting to see if an easier way in 2.0
    });

    qunit.test('enable() - popover defined calls enablePopover()', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {
            popover: 'Popover Text'
        });
        var subject = testObject.create();

        subject.enablePopover = sinon['default'].spy();
        subject.enableTooltip = sinon['default'].spy();

        subject.enable();

        assert.ok(subject.enablePopover.calledOnce, 'enablePopover() was called');

        assert.ok(!subject.enableTooltip.calledOnce, 'enableTooltip() was not called');

        subject.enablePopover.reset();
        subject.enableTooltip.reset();
    });

    qunit.test('enable() - title defined calls enableTooltip()', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {
            title: 'Tooltip Text'
        });
        var subject = testObject.create();

        subject.enablePopover = sinon['default'].spy();
        subject.enableTooltip = sinon['default'].spy();

        subject.enable();

        assert.ok(!subject.enablePopover.calledOnce, 'enablePopover() was not called');

        assert.ok(subject.enableTooltip.calledOnce, 'enableTooltip() was called');

        subject.enablePopover.reset();
        subject.enableTooltip.reset();
    });

    qunit.test('enabledTooltip() - Renders tooltip', function (assert) {
        var testTitle = 'Tooltip Text';
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {
            title: testTitle,
            $: jQueryMock
        });
        var subject = testObject.create();

        subject.enableTooltip();

        assert.equal(temporaryData.tooltip.container, 'body', 'tooltip container is set to correct value');

        assert.equal(temporaryData.tooltip.title, testTitle, 'tooltip title is set to correct value');
    });

    qunit.test('enabledTooltip() - Title is reset', function (assert) {
        var testTitle = 'Tooltip Text';
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {
            title: testTitle,
            $: jQueryMock
        });
        var subject = testObject.create();

        subject.$().attr('data-original-title', 'to get past undefined check');
        subject.enableTooltip();

        assert.equal(temporaryData['data-original-title'], testTitle);
    });

    qunit.test('enablePopover() - Renders popover', function (assert) {
        var testContent = 'Popover Text';
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {
            popover: testContent,
            $: jQueryMock
        });
        var subject = testObject.create();

        subject.enablePopover();

        assert.equal(temporaryData.popover.content, testContent, 'popover content is set to correct value');

        assert.equal(temporaryData.popover.placement, 'top', 'popover placement is set to correct value');
    });

    qunit.test('enablePopover() - Title is reset', function (assert) {
        var testTitle = 'Popover Text';
        var testContent = 'Popover Content';
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {
            title: testTitle,
            popover: testContent,
            $: jQueryMock
        });
        var subject = testObject.create();

        subject.$().attr('data-original-title', 'to get past undefined check');
        subject.enablePopover();

        assert.equal(temporaryData['data-original-title'], testTitle);

        assert.equal(temporaryData['data-content'], testContent);
    });

    qunit.test('dataTrigger property supports "focus hover click" values', function (assert) {
        var testTitle = 'Popover Text';
        var testContent = 'Popover Content';
        var testDataTrigger = 'focus hover click';
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default'], {
            title: testTitle,
            popover: testContent,
            dataTrigger: testDataTrigger,
            $: jQueryMock
        });
        var subject = testObject.create();

        subject.$().attr('data-original-title', 'to get past undefined check');

        assert.strictEqual(subject.get('dataTrigger'), testDataTrigger, '"dataTrigger" is set to "focus hover click"');

        subject.set('dataTrigger', 'focus');

        assert.strictEqual(subject.get('dataTrigger'), 'focus', '"dataTrigger" is set to "focus"');

        subject.set('dataTrigger', 'hover');

        assert.strictEqual(subject.get('dataTrigger'), 'hover', '"dataTrigger" is set to "hover"');

        subject.set('dataTrigger', 'click');

        assert.strictEqual(subject.get('dataTrigger'), 'click', '"dataTrigger" is set to "click"');
    });

    qunit.test('Observer keys are correct', function (assert) {
        var testObject = Ember['default'].Object.extend(mixinUnderTest['default']);

        var subject = testObject.create();

        var enableKeys = ['popover', 'title'];

        assert.deepEqual(subject.enable.__ember_observes__, enableKeys, 'Observer keys are correct for enable()');
    });

});
define('dummy/tests/unit/mixins/sl-tooltip-enabled-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/mixins');
  QUnit.test('unit/mixins/sl-tooltip-enabled-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/mixins/sl-tooltip-enabled-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/utils/class-prefix-test', ['sl-ember-components/utils/class-prefix', 'qunit', 'ember-get-config'], function (prefix, qunit, config) {

    'use strict';

    qunit.module('Unit | Utility | class-prefix');

    qunit.test('prefix() returns a correctly structured prefixed component class name', function (assert) {
        config['default'].componentClassPrefix = 'test-prefix';

        assert.strictEqual(prefix['default']('test-component'), 'test-prefix-test-component', 'prefix returns a correctly structured prefixed component class name');
    });

});
define('dummy/tests/unit/utils/class-prefix-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/utils');
  QUnit.test('unit/utils/class-prefix-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/utils/class-prefix-test.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/utils/error-test', ['sl-ember-components/utils/error', 'qunit'], function (utils__error, qunit) {

    'use strict';

    qunit.module('Unit | Utility | error', {
        beforeEach: function beforeEach() {
            utils__error.setErrorTypeThrown(null);
        }
    });

    qunit.test('errorWasThrown() returns false when "errorTypeThrown" is not set', function (assert) {

        assert.strictEqual(utils__error.errorWasThrown(), false, 'errorWasThrown() returns correct result when "errorTypeThrown" is not set');
    });

    qunit.test('isErrorInstanceOf() returns false when "errorTypeThrown" is null', function (assert) {

        assert.strictEqual(utils__error.isErrorInstanceOf('chart'), false, 'isErrorInstanceOf() returns correct result when "errorTypeThrown" uses default value');
    });

    qunit.test('errorWasThrown() returns true when "errorTypeThrown" is set', function (assert) {
        assert.expect(1);

        try {
            utils__error.throwChartError('This is a test');
        } catch (error) {

            assert.strictEqual(utils__error.errorWasThrown(), true, 'errorWasThrown() returns correct result when "errorTypeThrown" is set');
        }
    });

    qunit.test('isErrorInstanceOf() returns true when "errorTypeThrown" equals the error thrown', function (assert) {
        assert.expect(1);

        try {
            utils__error.throwChartError('This is a test');
        } catch (error) {

            assert.strictEqual(utils__error.isErrorInstanceOf('chart'), true, 'isErrorInstanceOf() returns correct result when "errorTypeThrown" is set');
        }
    });

    qunit.test('isErrorInstanceOf() returns false when "errorTypeThrown" is not equivalent', function (assert) {
        assert.expect(1);

        try {
            utils__error.throwDateTimeError('This is a test');
        } catch (error) {

            assert.strictEqual(utils__error.isErrorInstanceOf('chart'), false, 'isErrorInstanceOf() returns correct result when "errorTypeThrown" is not set');
        }
    });

    qunit.test('throwChartError() sets attributes on chart error', function (assert) {
        assert.expect(2);

        try {
            utils__error.throwChartError('This is a test');
        } catch (error) {

            assert.strictEqual(error.name, 'sl-chart', 'throwChartError() returns an instance with name set correctly');

            assert.strictEqual(error.message, 'This is a test', 'throwChartError() returns an instance with message set correctly');
        }
    });

    qunit.test('throwDateTimeError() sets attributes on dateTime error', function (assert) {
        assert.expect(2);

        try {
            utils__error.throwDateTimeError('This is a test');
        } catch (error) {

            assert.strictEqual(error.name, 'sl-date-time', 'throwDateTimeError() returns an instance with name set correctly');

            assert.strictEqual(error.message, 'This is a test', 'throwDateTimeError() returns an instance with message set correctly');
        }
    });

    qunit.test('throwMenuError() sets attributes on menu error', function (assert) {
        assert.expect(2);

        try {
            utils__error.throwMenuError('This is a test');
        } catch (error) {

            assert.strictEqual(error.name, 'sl-menu', 'throwMenuError() returns an instance with name set correctly');

            assert.strictEqual(error.message, 'This is a test', 'throwMenuError() returns an instance with message set correctly');
        }
    });

    qunit.test('throwRadioGroupError() sets attributes on radioGroup error', function (assert) {
        assert.expect(2);

        try {
            utils__error.throwRadioGroupError('This is a test');
        } catch (error) {

            assert.strictEqual(error.name, 'sl-radio-group', 'throwRadioGroupError() returns an instance with name set correctly');

            assert.strictEqual(error.message, 'This is a test', 'throwRadioGroupError() returns an instance with message set correctly');
        }
    });

    qunit.test('throwTooltipError() sets attributes on tooltip error', function (assert) {
        assert.expect(2);

        try {
            utils__error.throwTooltipError('This is a test');
        } catch (error) {

            assert.strictEqual(error.name, 'sl-tooltip', 'throwTooltipError() returns an instance with name set correctly');

            assert.strictEqual(error.message, 'This is a test', 'throwTooltipError() returns an instance with message set correctly');
        }
    });

    qunit.test('buildErrorFunction() sets message to empty string when message is not provided', function (assert) {
        assert.expect(1);

        try {
            utils__error.throwTooltipError();
        } catch (error) {

            assert.strictEqual(error.message, '', 'buildErrorFunction() returns an instance with message set to empty string');
        }
    });

});
define('dummy/tests/unit/utils/error-test.jshint', function () {

  'use strict';

  QUnit.module('JSHint - unit/utils');
  QUnit.test('unit/utils/error-test.js should pass jshint', function(assert) { 
    assert.expect(1);
    assert.ok(true, 'unit/utils/error-test.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"sl-ember-components","version":"0.11.1+032a960e"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map
