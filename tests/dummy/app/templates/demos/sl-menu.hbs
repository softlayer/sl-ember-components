<h2>sl-menu</h2>
<p class="lead">A component that can be nested to build complex menu hierarchies.</p>

<hr>

<h3>Example</h3>

<div class="row">
    <div class="col-lg-6">
        <h6>Template</h6>
        <pre>\{{sl-menu
    actionInitiated="actionInitiatedHandler"
    changeRoute="changeRouteHandler"
    keyEvents=controller.keyHandler
    keyboardInUse=controller.keyboardInUse
    menu=controller.content
    selectionMade="selectionMadeHandler"
    showAll="true"
}}</pre>
    </div>

    <div class="col-lg-6">
        <h6>Rendered Component</h6>
        {{sl-menu
            actionInitiated="actionInitiatedHandler"
            changeRoute="changeRouteHandler"
            keyEvents=controller.keyHandler
            keyboardInUse=controller.keyboardInUse
            menu=controller.content
            selectionMade="selectionMadeHandler"
            showAll="true"
        }}
    </div>
</div>

<br>
<div class="row">
    <div class="col-lg-12">
        <p>In addition to being able to interact with the menu via a mouse, the following keyboard shortcuts can also be used:</p>

        <ul>
            <li>The numbers 1-4 can be selected to expand the menu option corresponding to its same location in the menu.</li>
            <li>The numbers 0 can be selected to expand the "Show All" menu option.  How this option is visually rendered is a product of the applied CSS, which you can specify.</li>
            <li>The ESC key can be used to close the expanded menu option.</li>
            <li>To select an option from the expanded menu follow up your previous numerical selection with the selection of the dash/hyphen key followed by the numerical digit representing the location of the desired option desired in the display.</li>
            <li>Once a top-level menu option has been selected you can use the TAB key or SHIFT+TAB key combination to cycle forwards and backwards through the menu options.</li>
        </ul>

        <p>Instructions on how to implement your own keyboard shortcuts can be found further below.</p>
    </div>
</div>

<hr>

<h3>Properties</h3>

<ul class="list-group">
    {{#property-text name="menu" required=true type="object"}}
        Used to provide the underlying structure of the entire menu. This expects an Ember.Object with a <code>pages</code> attribute that contains an Ember.Array of other nodes. Each node, including the top level, can have the following attributes:
        <ul>
            <li><strong>pages</strong> - An array of nodes that will be embedded under the <code>label</code> attribute as a sub-menu.</li>
            <li><strong>label</strong> - The label of the menu itself. This should be <em>null</em> for top level menus and will provide the name of the sub-menu for sub-menu lists</li>
            <li><strong>action</strong> - This can either be a string, which will be received by the <code>actionInitiated</code> binding on the template or can actually be a function that will be executed when the item is selected with either a mouse click or through a keyboard shortcut.</li>
            <li><strong>route</strong> - This can be used to specify a route to which the application will transition if the menu item is selected.</li>
            <li><strong>link</strong> - This can be used to specify a link to another page.  This should be used to link to pages outside of the Ember app. </li>
        </ul>
        <br>
        Of the last 3 properties in the list only one will be respected even if multiple are applied.  The order of precedence is <strong>action</strong>, <strong>route</strong>, and then <strong>link</strong>.
    {{/property-text}}

    {{#property-text name="actionInitiated" type="function"}}
        Handler for string based actions that are associated with a menu item. If a given item has an associated action, the handler bound to the actionInitiated property will be called and the name of the action handed as the only parameter.
    {{/property-text}}

    {{#property-text name="changeRoute" type="function"}}
        Handler for handling the selection of menu items that have a corresponding route property.  Typically, this will be a simple <code>transitionTo</code> or <code>transitionToRoute</code> call.
    {{/property-text}}

    {{#property-text name="keyEvents" type="object"}}
        Used for providing events to the menu. This can be used in conjunction with the <strong>utils/sl-menu-key-adapter</strong> to provide the proper events to support key presses.
    {{/property-text}}

    {{#property-text name="keyboardInUse" type="boolean"}}
        Whether the menu is being interacted with via the keyboard.  This value gets set by the inner workings of the component and is exposed for use by view logic.  One example of how to use this value is to be able to use the <code>TAB</code> key to navigate through the menu options, where its default event needs to suppressed while doing so.
    {{/property-text}}

    {{#property-text name="selectionMade" type="function"}}
        Handler for selection events. Handler will be given the full path to the selected node.
    {{/property-text}}

    {{#property-text name="showAll" type="boolean" default="false"}}
        Whether a "Show All" icon appears, displaying all of the menu options when interacted with.
    {{/property-text}}
</ul>

<hr>

<h3>Keyboard Shortcuts</h3>

<div class="list-group">
    <div class="list-group-item">
        <h6>Hooks</h6>
        <p>The <strong>utils/sl-menu-key-adapter</strong> provides the following hooks into the menu component onto which to attach keyboard events:</p>

        <ul>
        <li>
            childSelection
            <ul>
            <li>Select a menu option</li>
            </ul>
        </li>
        <li>
            drillDown
            <ul>
            <li>Select a sub-menu</li>
            </ul>
        </li>
        <li>
            cycleRootSelectionNext
            <ul>
            <li>Select the next top-level menu option</li>
            </ul>
        </li>
        <li>
            cycleRootSelectionPrevious
            <ul>
            <li>Select the previous top-level menu option</li>
            </ul>
        </li>
        <li>
            closeAll
            <ul>
            <li>Close all menu options</li>
            </ul>
        </li>
        <li>
            showAll
            <ul>
            <li>Show all menu options</li>
            </ul>
        </li>
        </ul>
    </div>

    <div class="list-group-item">
        <h6>Code Example</h6>

        <p>The keyboard shortcuts for this demo are configured in <a href="https://github.com/softlayer/sl-ember-components/blob/master/tests/dummy/app/views/sl-menu.js">https://github.com/softlayer/sl-ember-components/blob/master/tests/dummy/app/views/sl-menu.js</a> and <a href="https://github.com/softlayer/sl-ember-components/blob/master/tests/dummy/app/controllers/sl-menu.js">https://github.com/softlayer/sl-ember-components/blob/master/tests/dummy/app/controllers/sl-menu.js</a>, relevant excerpts of which are presented below:</p>

        <p><strong>tests/dummy/app/controllers/sl-menu.js</strong></p>
<pre>
import Ember from 'ember';
import KeyManager from 'sl-ember-components/utils/sl-menu-key-adapter';

export default Ember.ObjectController.extend({

    keyHandler: KeyManager.create(),

    /**
     * Is the menu being interacted with via the keyboard?
     *
     * This value gets set by the inner workings of the component and is exposed for use by view logic
     *
     * @param {boolean}
     */
    keyboardInUse: null
});
</pre>

        <p><strong>tests/dummy/app/views/sl-menu.js</strong></p>
<pre>
import Ember from 'ember';

export default Ember.View.extend({

    registerKeyListeners: function() {
        Ember.$( document ).on( 'keypress.menu', function( e ) {
            if ( e.charCode &gt;= 49 &amp;&amp; e.charCode &lt;= 57 ) {
                var keypressed = e.charCode - 48;
                this.get( 'controller.keyHandler' ).childSelection( keypressed );
            } else if ( e.charCode === 45 ) {
                this.get( 'controller.keyHandler' ).drillDown( '-' );
            } else if ( e.charCode === 48 ) {
                this.get( 'controller.keyHandler' ).showAll();
            }
        }.bind( this ));

        // keypress doesn't appear to catch ESC
        Ember.$( document ).on( 'keyup.menu', function( e ) {
            if ( e.keyCode === 27 ) {
                this.get( 'controller.keyHandler' ).closeAll();
            }
        }.bind( this ));

        // need to capture TAB key with keydown event
        Ember.$( document ).on( 'keydown.menu', function( e ) {
            if ( 9 === e.keyCode &amp;&amp; this.get( 'controller.keyboardInUse' ) ) {
                e.preventDefault();

                if ( e.shiftKey ) {
                    this.get( 'controller.keyHandler' ).cycleRootSelectionPrevious();
                } else {
                    this.get( 'controller.keyHandler' ).cycleRootSelectionNext();
                }
            }
        }.bind( this ));
    }.on( 'didInsertElement' ),

    unregisterKeyListeners: function() {
        Ember.$( document ).off( 'keypress.menu' ).off( 'keyup.menu' ).off( 'keydown.menu' );
    }.on( 'willClearRender' )

});
</pre>


    </div>
</div>
