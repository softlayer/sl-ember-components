<h2>sl-grid</h2>

<p class="lead">A grid system composed of a partial and multiple components.</p>

<hr>

<h3>Example</h3>

<div class="row">
    <div class="col-lg-12">
        <h6>Template</h6>
        <pre>
\{{#sl-panel}}
    &lt;div class="text-right"&gt;
    \{{#sl-button title="Refresh" action="reload"}}&lt;i class="fa fa-refresh"&gt;&lt;/i&gt;\{{/sl-button}}
    \{{#sl-tooltip title="Configuration"}}
        \{{sl-grid-header-settings class="btn-group dropdown"
            settings=options.settingsMenu columns=columns}}
    \{{/sl-tooltip}}
    &lt;/div&gt;
\{{/sl-panel}}
\{{partial "sl-grid"}}
        </pre>
    </div>

    <div class="col-lg-12">
        <h6>Rendered Grid</h6>

        {{#sl-panel}}
            <div class="text-right">
            {{#sl-button title="Refresh" action="reload"}}<i class="fa fa-refresh"></i>{{/sl-button}}
            {{#sl-tooltip title="Configuration"}}
                {{sl-grid-header-settings class="btn-group dropdown" settings=options.settingsMenu columns=columns}}
            {{/sl-tooltip}}
            </div>
        {{/sl-panel}}
        {{partial "sl-grid"}}
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <h6>Features</h6>
        <ul>
            <li>Hideable Columns: accessed through the grid settings dropdown</li>
            <li>Sortable Columns: click a column's header</li>
            <li>Reorderable Columns: drag a column's header</li>
            <li>Resizable Columns: drag the space between columns</li>
            <li>Action Column: dropdown with actions directed to your itemController</li>
            <li>Row Expander: render a component in a hideable row (per array entry)</li>
        </ul>
    </div>
</div>

<hr>

<h3>Mixins used</h3>

<div class="panel panel-default">
  <div class="panel-heading">sl-grid-controller</div>
  <div class="panel-body">
    <p>The sl-grid-controller mixin should be applied to an array controller backed by a model that had `grid-like` data in it.  This mixin makes use of one object `gridDefinition` that will control the presentation of the grid.</p>
    <p>The `gridDefinition` object has two top-level keys: `options` and `columns`. Options is an object that specifies settings for the grid as a whole.  Column is an array of column definitions for each column in the grid. </p>

    <div class="list-group">

        {{#property-text name="gridDefinition.columns" type="array" required=true}}
            An array of column definitions.  This is required in your `gridDefinition`.
        {{/property-text}}

        {{#property-text name="gridDefinition.options" required=true}}
            Option object holds all of the option settings for your grid.
        {{/property-text}}

        {{#property-text name="gridDefinition.options.rowExpander" type="boolean"}}
            <p>Option to enable the `rowExpander` functionality.</p>
            <p>If enabled, specify the `rowExpanderComponent'.</p>

            <p>Here is the specification from this demo's `itemController`:
                <pre>rowExpanderComponent: 'row-expander-content'</pre>
            </p>
        {{/property-text}}

        {{#property-text name="gridDefinition.options.settingsMenu.translationKeys" type="object"}}
            <p>The grid system makes use of the `sl-translate` service and component.  This object is provided so that you can map the grid's translation keys to your own translation keys.  We have three keys on the `settingsMenu` that need to be translated:</p>
            <ul>
                <li>actions</li>
                <li>columns</li>
                <li>resetColumnsToDefaults</li>
            </ul>
            <p>These keys should be pointed to paths that the `sl-translate` service can translate.</p>
        {{/property-text}}

        {{#property-text name="gridDefinition.options.settingsMenu.actions[].icon" type="string"}}
            A path to an icon image to be used in this entry in the actions menu.
        {{/property-text}}

        {{#property-text name="gridDefinition.options.settingsMenu.actions[].label" type="string"}}
            A key that will be used by sl-translate to generate a translated string to display to the user, specifically for this entry in the actions menu.
        {{/property-text}}

        {{#property-text name="gridDefinition.options.settingsMenu.actions[].action" type="string"}}
            The action to invoke on your grid `arrayController`.
        {{/property-text}}

        {{#property-text name="gridDefinition.options.settingsMenu.hideableColumns" type="boolean"}}
            Whether to show the `hideable` column checkboxes in the settings menu.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].cssClass" type="string"}}
            An optional css class to apply to each cell.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].cssThClass" type="string"}}
            An optional css class to apply to each header cell.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].component" type="string"}}
            The component to be rendered into each cell in this column.  The default is `sl-grid-table-cell`.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].defaultText" type="string"}}
            A key that will be used by sl-translate to generate a translated string to display to the user in the column header.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].fixedWidth" type="number"}}
            An integer that specifies the width of this column in pixels.  Setting a column to a fixedWidth will cause it not to be used in the calculations for widthHints.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].hideable" type="string"}}
            Whether this column is hideable, requires the settings menu to have `hideableColumns` set to `true`
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].key" type="string"}}
            The key to the object on this array entry that will be used for this column.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].link" type="string"}}
            The ember route to link to if you are using the `sl-grid-table-cell-link` component.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].movable" type="boolean"}}
            Whether this column's position can be changed by dragging the header.  Defaults to true.  Movable columns can not be dragged past unmovable columns.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].resizable" type="boolean"}}
            Whether this column is resizable.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].sortable" type="string"}}
            Whether this column is sortable.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].title" type="string"}}
            A key that will be used by sl-translate to generate a translated string to display to the user in the column header.
        {{/property-text}}

        {{#property-text name="gridDefinition.columns[].widthHint" type="number"}}
            An integer that will give 'hints' to the table layout for column sizing.  These sizes are relative.  If the first column gets a width hint of `2` and the rest of the columns have width hints of `1` then the first column will initially render with a width twice as large as the rest.  All columns are assumed to have a widthHint of `1` unless they have `fixedWidth` specified.
        {{/property-text}}
    </div>

    <p>Here is the `gridDefinition` from this demo:</p>
    <pre>
    gridDefinition: {
        options: {
            rowExpander      : true,
            settingsMenu     : {
                translationKeys: {
                    actions: 'ACTIONS',
                    columns: 'COLUMNS',
                    resetColumnsToDefaults: 'RESETCOLUMNS'
                },
                actions: [
                    {
                        label: 'TESTACTION',
                        action: 'testAction'
                    }
                ],
                hideableColumns: true
            }
        },
        columns: [
            {
                component: 'sl-grid-table-cell-row-expander',
                cssClass: 'sl-grid-table-cell-row-expander',
                cssThClass: 'sl-grid-table-cell-row-expander',
                fixedWidth: 30
            },
            {
                key: 'name',
                title: 'HOSTNAME',
                defaultText: 'translate.UNKNOWNDEVICE',
                sortable: true,
                resizable: true,
                widthHint: 2
            },
            {
                key: 'ip',
                title: 'IPADDRESS',
                sortable: true,
                hideable: true,
                resizable: true,
                widthHint: 1
            },
            {
                key: 'type',
                title: 'DEVICETYPE',
                sortable: true,
                hideable: true,
                resizable: true,
                widthHint: 1
            },
            {
                key: 'notes',
                title: 'NOTES',
                hideable: true,
                resizable: true,
                widthHint: 3
            },
            {
                key: 'fmtProvisionDate',
                title: 'PROVISIONDATE',
                hideable: true,
                resizable: true,
                widthHint: 1
            },
            {
                cssClass: 'sl-grid-table-cell-actions',
                cssThClass: 'sl-grid-table-cell-actions',
                component: 'sl-grid-table-cell-actions',
                fixedWidth: 120
            }
        ]
    }
    </pre>
  </div>
</div>

<hr>

<h3>Optional Mixin</h3>

<div class="panel panel-default">
  <div class="panel-heading">sl-grid-key-controller</div>
  <div class="panel-body">
        <p>A controller using the <em>sl-grid-controller</em> mixin should also use this mixin when it is desired to bind keyboard events to any of the following supported actions on the grid:</p>

        <ul>
            <li>navigate to the first page of records</li>
            <li>navigate to the last page of records</li>
            <li>navigate to the next page of records</li>
            <li>navigate to the previous page of records</li>
            <li>refresh the grid</li>
        </ul>
  </div>
</div>


<h3>Partials used</h3>

<div class="list-group">
    <div class="list-group-item">
        <h6>sl-grid/table</h6>
        <p>View this partial to get an idea of how the grid layout works. The grid is an integrated system and most of the components will not work in isolation.</p>
    </div>
</div>

<h3>Components used</h3>

<div class="list-group">
    <div class="list-group-item">
        <h6>sl-grid-header-settings</h6>
        <p>One of the few stand-alone components.  Place this component anywhere on the page to give your users access to the options specific to this ArrayController's grid.</p>
    </div>
    <div class="list-group-item">
        <h6>sl-grid-table-cell</h6>
        <p>The base class for a grid table cell.  Extend this class to implement your own custom components to fit inside a grid table cell.</p>
    </div>
    <div class="list-group-item">
        <h6>sl-grid-table-cell-link</h6>
        <p>Extends sl-grid-table-cell, provides an ember link to a different route in your app.</p>
    </div>
    <div class="list-group-item">
        <h6>sl-grid-table-cell-row-expander</h6>
        <p>Used by the grid to show/hide the sl-grid-table-row-expander component.  The <code>gridDefinition.options.rowExpander</code> setting must be set to true in able to use the row-expander.</p>
    </div>
    <div class="list-group-item">
        <h6>sl-grid-table-column-resize</h6>
        <p>This component enables the dragable resizing of columns</p>
    </div>
    <div class="list-group-item">
        <h6>sl-grid-table-header</h6>
        <p>This component displays the <code>th</code> table header cell and implements the <code>widthHinting</code> and column reordering functionality.</p>
    </div>
    <div class="list-group-item">
        <h6>sl-grid-table-row-expander</h6>
        <p>The component that contains the table row that will get shown or hidden if you have the rowExpander functionality enabled.</p>
    </div>
</div>
